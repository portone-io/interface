// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/certification/certification.proto

#include "v1/certification/certification.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace certification {
constexpr CertificationRequest::CertificationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imp_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CertificationRequestDefaultTypeInternal {
  constexpr CertificationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CertificationRequestDefaultTypeInternal() {}
  union {
    CertificationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CertificationRequestDefaultTypeInternal _CertificationRequest_default_instance_;
constexpr CertificationResponse::CertificationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_(nullptr)
  , code_(0){}
struct CertificationResponseDefaultTypeInternal {
  constexpr CertificationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CertificationResponseDefaultTypeInternal() {}
  union {
    CertificationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CertificationResponseDefaultTypeInternal _CertificationResponse_default_instance_;
constexpr Certification::Certification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imp_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , merchant_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pg_tid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pg_provider_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , birthday_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , carrier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_in_site_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , origin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , birth_(0)
  , foreigner_(false)
  , certified_(false)
  , certified_at_(0){}
struct CertificationDefaultTypeInternal {
  constexpr CertificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CertificationDefaultTypeInternal() {}
  union {
    Certification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CertificationDefaultTypeInternal _Certification_default_instance_;
}  // namespace certification
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_v1_2fcertification_2fcertification_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_v1_2fcertification_2fcertification_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_v1_2fcertification_2fcertification_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_v1_2fcertification_2fcertification_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::certification::CertificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::certification::CertificationRequest, imp_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::certification::CertificationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::certification::CertificationResponse, code_),
  PROTOBUF_FIELD_OFFSET(::certification::CertificationResponse, message_),
  PROTOBUF_FIELD_OFFSET(::certification::CertificationResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::certification::Certification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::certification::Certification, imp_uid_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, merchant_uid_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, pg_tid_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, pg_provider_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, name_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, gender_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, birth_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, birthday_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, foreigner_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, phone_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, carrier_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, certified_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, certified_at_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, unique_key_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, unique_in_site_),
  PROTOBUF_FIELD_OFFSET(::certification::Certification, origin_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::certification::CertificationRequest)},
  { 6, -1, sizeof(::certification::CertificationResponse)},
  { 14, -1, sizeof(::certification::Certification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::certification::_CertificationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::certification::_CertificationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::certification::_Certification_default_instance_),
};

const char descriptor_table_protodef_v1_2fcertification_2fcertification_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$v1/certification/certification.proto\022\r"
  "certification\032\034google/api/annotations.pr"
  "oto\"\'\n\024CertificationRequest\022\017\n\007imp_uid\030\001"
  " \001(\t\"f\n\025CertificationResponse\022\014\n\004code\030\001 "
  "\001(\005\022\017\n\007message\030\002 \001(\t\022.\n\010response\030\003 \001(\0132\034"
  ".certification.Certification\"\262\002\n\rCertifi"
  "cation\022\017\n\007imp_uid\030\001 \001(\t\022\024\n\014merchant_uid\030"
  "\002 \001(\t\022\016\n\006pg_tid\030\003 \001(\t\022\023\n\013pg_provider\030\004 \001"
  "(\t\022\014\n\004name\030\005 \001(\t\022\016\n\006gender\030\006 \001(\t\022\r\n\005birt"
  "h\030\007 \001(\005\022\020\n\010birthday\030\010 \001(\t\022\021\n\tforeigner\030\t"
  " \001(\010\022\r\n\005phone\030\n \001(\t\022\017\n\007carrier\030\013 \001(\t\022\021\n\t"
  "certified\030\014 \001(\010\022\024\n\014certified_at\030\r \001(\005\022\022\n"
  "\nunique_key\030\016 \001(\t\022\026\n\016unique_in_site\030\017 \001("
  "\t\022\016\n\006origin\030\020 \001(\t2\305\002\n\024CertificationServi"
  "ce\022\223\001\n\023CertificationGetRPC\022#.certificati"
  "on.CertificationRequest\032$.certification."
  "CertificationResponse\"1\202\323\344\223\002+\022)/api/paym"
  "ents/v1/certifications/{imp_uid}\022\226\001\n\026Cer"
  "tificationDeleteRPC\022#.certification.Cert"
  "ificationRequest\032$.certification.Certifi"
  "cationResponse\"1\202\323\344\223\002+*)/api/payments/v1"
  "/certifications/{imp_uid}BMZ8github.com/"
  "iamport/interface/gen_src/go/v1/certific"
  "ation\252\002\020V1.Certificationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_v1_2fcertification_2fcertification_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_v1_2fcertification_2fcertification_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fcertification_2fcertification_2eproto = {
  false, false, 952, descriptor_table_protodef_v1_2fcertification_2fcertification_2eproto, "v1/certification/certification.proto", 
  &descriptor_table_v1_2fcertification_2fcertification_2eproto_once, descriptor_table_v1_2fcertification_2fcertification_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_v1_2fcertification_2fcertification_2eproto::offsets,
  file_level_metadata_v1_2fcertification_2fcertification_2eproto, file_level_enum_descriptors_v1_2fcertification_2fcertification_2eproto, file_level_service_descriptors_v1_2fcertification_2fcertification_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_v1_2fcertification_2fcertification_2eproto_getter() {
  return &descriptor_table_v1_2fcertification_2fcertification_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_v1_2fcertification_2fcertification_2eproto(&descriptor_table_v1_2fcertification_2fcertification_2eproto);
namespace certification {

// ===================================================================

class CertificationRequest::_Internal {
 public:
};

CertificationRequest::CertificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:certification.CertificationRequest)
}
CertificationRequest::CertificationRequest(const CertificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imp_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imp_uid().empty()) {
    imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imp_uid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:certification.CertificationRequest)
}

inline void CertificationRequest::SharedCtor() {
imp_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CertificationRequest::~CertificationRequest() {
  // @@protoc_insertion_point(destructor:certification.CertificationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CertificationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  imp_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CertificationRequest::ArenaDtor(void* object) {
  CertificationRequest* _this = reinterpret_cast< CertificationRequest* >(object);
  (void)_this;
}
void CertificationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CertificationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CertificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:certification.CertificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imp_uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CertificationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string imp_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_imp_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.CertificationRequest.imp_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CertificationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:certification.CertificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string imp_uid = 1;
  if (!this->_internal_imp_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imp_uid().data(), static_cast<int>(this->_internal_imp_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.CertificationRequest.imp_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imp_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:certification.CertificationRequest)
  return target;
}

size_t CertificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:certification.CertificationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string imp_uid = 1;
  if (!this->_internal_imp_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imp_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CertificationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CertificationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CertificationRequest::GetClassData() const { return &_class_data_; }

void CertificationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CertificationRequest *>(to)->MergeFrom(
      static_cast<const CertificationRequest &>(from));
}


void CertificationRequest::MergeFrom(const CertificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:certification.CertificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imp_uid().empty()) {
    _internal_set_imp_uid(from._internal_imp_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CertificationRequest::CopyFrom(const CertificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:certification.CertificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificationRequest::IsInitialized() const {
  return true;
}

void CertificationRequest::InternalSwap(CertificationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &imp_uid_, GetArenaForAllocation(),
      &other->imp_uid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CertificationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fcertification_2fcertification_2eproto_getter, &descriptor_table_v1_2fcertification_2fcertification_2eproto_once,
      file_level_metadata_v1_2fcertification_2fcertification_2eproto[0]);
}

// ===================================================================

class CertificationResponse::_Internal {
 public:
  static const ::certification::Certification& response(const CertificationResponse* msg);
};

const ::certification::Certification&
CertificationResponse::_Internal::response(const CertificationResponse* msg) {
  return *msg->response_;
}
CertificationResponse::CertificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:certification.CertificationResponse)
}
CertificationResponse::CertificationResponse(const CertificationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_response()) {
    response_ = new ::certification::Certification(*from.response_);
  } else {
    response_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:certification.CertificationResponse)
}

inline void CertificationResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&response_)) + sizeof(code_));
}

CertificationResponse::~CertificationResponse() {
  // @@protoc_insertion_point(destructor:certification.CertificationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CertificationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void CertificationResponse::ArenaDtor(void* object) {
  CertificationResponse* _this = reinterpret_cast< CertificationResponse* >(object);
  (void)_this;
}
void CertificationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CertificationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CertificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:certification.CertificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CertificationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.CertificationResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .certification.Certification response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CertificationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:certification.CertificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.CertificationResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .certification.Certification response = 3;
  if (this->_internal_has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:certification.CertificationResponse)
  return target;
}

size_t CertificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:certification.CertificationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .certification.Certification response = 3;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CertificationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CertificationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CertificationResponse::GetClassData() const { return &_class_data_; }

void CertificationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CertificationResponse *>(to)->MergeFrom(
      static_cast<const CertificationResponse &>(from));
}


void CertificationResponse::MergeFrom(const CertificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:certification.CertificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_response()) {
    _internal_mutable_response()->::certification::Certification::MergeFrom(from._internal_response());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CertificationResponse::CopyFrom(const CertificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:certification.CertificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificationResponse::IsInitialized() const {
  return true;
}

void CertificationResponse::InternalSwap(CertificationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CertificationResponse, code_)
      + sizeof(CertificationResponse::code_)
      - PROTOBUF_FIELD_OFFSET(CertificationResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CertificationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fcertification_2fcertification_2eproto_getter, &descriptor_table_v1_2fcertification_2fcertification_2eproto_once,
      file_level_metadata_v1_2fcertification_2fcertification_2eproto[1]);
}

// ===================================================================

class Certification::_Internal {
 public:
};

Certification::Certification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:certification.Certification)
}
Certification::Certification(const Certification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imp_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imp_uid().empty()) {
    imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imp_uid(), 
      GetArenaForAllocation());
  }
  merchant_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_merchant_uid().empty()) {
    merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_merchant_uid(), 
      GetArenaForAllocation());
  }
  pg_tid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pg_tid().empty()) {
    pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pg_tid(), 
      GetArenaForAllocation());
  }
  pg_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pg_provider().empty()) {
    pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pg_provider(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gender().empty()) {
    gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gender(), 
      GetArenaForAllocation());
  }
  birthday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_birthday().empty()) {
    birthday_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_birthday(), 
      GetArenaForAllocation());
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArenaForAllocation());
  }
  carrier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_carrier().empty()) {
    carrier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_carrier(), 
      GetArenaForAllocation());
  }
  unique_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unique_key().empty()) {
    unique_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_key(), 
      GetArenaForAllocation());
  }
  unique_in_site_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unique_in_site().empty()) {
    unique_in_site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_in_site(), 
      GetArenaForAllocation());
  }
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_origin().empty()) {
    origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_origin(), 
      GetArenaForAllocation());
  }
  ::memcpy(&birth_, &from.birth_,
    static_cast<size_t>(reinterpret_cast<char*>(&certified_at_) -
    reinterpret_cast<char*>(&birth_)) + sizeof(certified_at_));
  // @@protoc_insertion_point(copy_constructor:certification.Certification)
}

inline void Certification::SharedCtor() {
imp_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
merchant_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pg_tid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pg_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
birthday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
carrier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unique_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unique_in_site_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&birth_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&certified_at_) -
    reinterpret_cast<char*>(&birth_)) + sizeof(certified_at_));
}

Certification::~Certification() {
  // @@protoc_insertion_point(destructor:certification.Certification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Certification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  imp_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merchant_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pg_tid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pg_provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  birthday_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  carrier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_in_site_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Certification::ArenaDtor(void* object) {
  Certification* _this = reinterpret_cast< Certification* >(object);
  (void)_this;
}
void Certification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Certification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Certification::Clear() {
// @@protoc_insertion_point(message_clear_start:certification.Certification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imp_uid_.ClearToEmpty();
  merchant_uid_.ClearToEmpty();
  pg_tid_.ClearToEmpty();
  pg_provider_.ClearToEmpty();
  name_.ClearToEmpty();
  gender_.ClearToEmpty();
  birthday_.ClearToEmpty();
  phone_.ClearToEmpty();
  carrier_.ClearToEmpty();
  unique_key_.ClearToEmpty();
  unique_in_site_.ClearToEmpty();
  origin_.ClearToEmpty();
  ::memset(&birth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&certified_at_) -
      reinterpret_cast<char*>(&birth_)) + sizeof(certified_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Certification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string imp_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_imp_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.imp_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string merchant_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_merchant_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.merchant_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pg_tid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pg_tid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.pg_tid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pg_provider = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pg_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.pg_provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gender = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.gender"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 birth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          birth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string birthday = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_birthday();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.birthday"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool foreigner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          foreigner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string carrier = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_carrier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.carrier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool certified = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          certified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 certified_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          certified_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unique_key = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_unique_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.unique_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unique_in_site = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_unique_in_site();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.unique_in_site"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string origin = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_origin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certification.Certification.origin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Certification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:certification.Certification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string imp_uid = 1;
  if (!this->_internal_imp_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imp_uid().data(), static_cast<int>(this->_internal_imp_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.imp_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imp_uid(), target);
  }

  // string merchant_uid = 2;
  if (!this->_internal_merchant_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_merchant_uid().data(), static_cast<int>(this->_internal_merchant_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.merchant_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_merchant_uid(), target);
  }

  // string pg_tid = 3;
  if (!this->_internal_pg_tid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pg_tid().data(), static_cast<int>(this->_internal_pg_tid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.pg_tid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pg_tid(), target);
  }

  // string pg_provider = 4;
  if (!this->_internal_pg_provider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pg_provider().data(), static_cast<int>(this->_internal_pg_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.pg_provider");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pg_provider(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string gender = 6;
  if (!this->_internal_gender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gender().data(), static_cast<int>(this->_internal_gender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.gender");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gender(), target);
  }

  // int32 birth = 7;
  if (this->_internal_birth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_birth(), target);
  }

  // string birthday = 8;
  if (!this->_internal_birthday().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_birthday().data(), static_cast<int>(this->_internal_birthday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.birthday");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_birthday(), target);
  }

  // bool foreigner = 9;
  if (this->_internal_foreigner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_foreigner(), target);
  }

  // string phone = 10;
  if (!this->_internal_phone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.phone");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_phone(), target);
  }

  // string carrier = 11;
  if (!this->_internal_carrier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_carrier().data(), static_cast<int>(this->_internal_carrier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.carrier");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_carrier(), target);
  }

  // bool certified = 12;
  if (this->_internal_certified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_certified(), target);
  }

  // int32 certified_at = 13;
  if (this->_internal_certified_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_certified_at(), target);
  }

  // string unique_key = 14;
  if (!this->_internal_unique_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unique_key().data(), static_cast<int>(this->_internal_unique_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.unique_key");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_unique_key(), target);
  }

  // string unique_in_site = 15;
  if (!this->_internal_unique_in_site().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unique_in_site().data(), static_cast<int>(this->_internal_unique_in_site().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.unique_in_site");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_unique_in_site(), target);
  }

  // string origin = 16;
  if (!this->_internal_origin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_origin().data(), static_cast<int>(this->_internal_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "certification.Certification.origin");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:certification.Certification)
  return target;
}

size_t Certification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:certification.Certification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string imp_uid = 1;
  if (!this->_internal_imp_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imp_uid());
  }

  // string merchant_uid = 2;
  if (!this->_internal_merchant_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_merchant_uid());
  }

  // string pg_tid = 3;
  if (!this->_internal_pg_tid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pg_tid());
  }

  // string pg_provider = 4;
  if (!this->_internal_pg_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pg_provider());
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string gender = 6;
  if (!this->_internal_gender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gender());
  }

  // string birthday = 8;
  if (!this->_internal_birthday().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_birthday());
  }

  // string phone = 10;
  if (!this->_internal_phone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string carrier = 11;
  if (!this->_internal_carrier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_carrier());
  }

  // string unique_key = 14;
  if (!this->_internal_unique_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unique_key());
  }

  // string unique_in_site = 15;
  if (!this->_internal_unique_in_site().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unique_in_site());
  }

  // string origin = 16;
  if (!this->_internal_origin().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origin());
  }

  // int32 birth = 7;
  if (this->_internal_birth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_birth());
  }

  // bool foreigner = 9;
  if (this->_internal_foreigner() != 0) {
    total_size += 1 + 1;
  }

  // bool certified = 12;
  if (this->_internal_certified() != 0) {
    total_size += 1 + 1;
  }

  // int32 certified_at = 13;
  if (this->_internal_certified_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_certified_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Certification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Certification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Certification::GetClassData() const { return &_class_data_; }

void Certification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Certification *>(to)->MergeFrom(
      static_cast<const Certification &>(from));
}


void Certification::MergeFrom(const Certification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:certification.Certification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imp_uid().empty()) {
    _internal_set_imp_uid(from._internal_imp_uid());
  }
  if (!from._internal_merchant_uid().empty()) {
    _internal_set_merchant_uid(from._internal_merchant_uid());
  }
  if (!from._internal_pg_tid().empty()) {
    _internal_set_pg_tid(from._internal_pg_tid());
  }
  if (!from._internal_pg_provider().empty()) {
    _internal_set_pg_provider(from._internal_pg_provider());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_gender().empty()) {
    _internal_set_gender(from._internal_gender());
  }
  if (!from._internal_birthday().empty()) {
    _internal_set_birthday(from._internal_birthday());
  }
  if (!from._internal_phone().empty()) {
    _internal_set_phone(from._internal_phone());
  }
  if (!from._internal_carrier().empty()) {
    _internal_set_carrier(from._internal_carrier());
  }
  if (!from._internal_unique_key().empty()) {
    _internal_set_unique_key(from._internal_unique_key());
  }
  if (!from._internal_unique_in_site().empty()) {
    _internal_set_unique_in_site(from._internal_unique_in_site());
  }
  if (!from._internal_origin().empty()) {
    _internal_set_origin(from._internal_origin());
  }
  if (from._internal_birth() != 0) {
    _internal_set_birth(from._internal_birth());
  }
  if (from._internal_foreigner() != 0) {
    _internal_set_foreigner(from._internal_foreigner());
  }
  if (from._internal_certified() != 0) {
    _internal_set_certified(from._internal_certified());
  }
  if (from._internal_certified_at() != 0) {
    _internal_set_certified_at(from._internal_certified_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Certification::CopyFrom(const Certification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:certification.Certification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Certification::IsInitialized() const {
  return true;
}

void Certification::InternalSwap(Certification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &imp_uid_, GetArenaForAllocation(),
      &other->imp_uid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &merchant_uid_, GetArenaForAllocation(),
      &other->merchant_uid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pg_tid_, GetArenaForAllocation(),
      &other->pg_tid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pg_provider_, GetArenaForAllocation(),
      &other->pg_provider_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gender_, GetArenaForAllocation(),
      &other->gender_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &birthday_, GetArenaForAllocation(),
      &other->birthday_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_, GetArenaForAllocation(),
      &other->phone_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &carrier_, GetArenaForAllocation(),
      &other->carrier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unique_key_, GetArenaForAllocation(),
      &other->unique_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unique_in_site_, GetArenaForAllocation(),
      &other->unique_in_site_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &origin_, GetArenaForAllocation(),
      &other->origin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Certification, certified_at_)
      + sizeof(Certification::certified_at_)
      - PROTOBUF_FIELD_OFFSET(Certification, birth_)>(
          reinterpret_cast<char*>(&birth_),
          reinterpret_cast<char*>(&other->birth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Certification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_v1_2fcertification_2fcertification_2eproto_getter, &descriptor_table_v1_2fcertification_2fcertification_2eproto_once,
      file_level_metadata_v1_2fcertification_2fcertification_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace certification
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::certification::CertificationRequest* Arena::CreateMaybeMessage< ::certification::CertificationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::certification::CertificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::certification::CertificationResponse* Arena::CreateMaybeMessage< ::certification::CertificationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::certification::CertificationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::certification::Certification* Arena::CreateMaybeMessage< ::certification::Certification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::certification::Certification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
