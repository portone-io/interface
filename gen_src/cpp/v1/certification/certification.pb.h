// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/certification/certification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2fcertification_2fcertification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_v1_2fcertification_2fcertification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_v1_2fcertification_2fcertification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2fcertification_2fcertification_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fcertification_2fcertification_2eproto;
namespace certification {
class Certification;
struct CertificationDefaultTypeInternal;
extern CertificationDefaultTypeInternal _Certification_default_instance_;
class CertificationRequest;
struct CertificationRequestDefaultTypeInternal;
extern CertificationRequestDefaultTypeInternal _CertificationRequest_default_instance_;
class CertificationResponse;
struct CertificationResponseDefaultTypeInternal;
extern CertificationResponseDefaultTypeInternal _CertificationResponse_default_instance_;
}  // namespace certification
PROTOBUF_NAMESPACE_OPEN
template<> ::certification::Certification* Arena::CreateMaybeMessage<::certification::Certification>(Arena*);
template<> ::certification::CertificationRequest* Arena::CreateMaybeMessage<::certification::CertificationRequest>(Arena*);
template<> ::certification::CertificationResponse* Arena::CreateMaybeMessage<::certification::CertificationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace certification {

// ===================================================================

class CertificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:certification.CertificationRequest) */ {
 public:
  inline CertificationRequest() : CertificationRequest(nullptr) {}
  ~CertificationRequest() override;
  explicit constexpr CertificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CertificationRequest(const CertificationRequest& from);
  CertificationRequest(CertificationRequest&& from) noexcept
    : CertificationRequest() {
    *this = ::std::move(from);
  }

  inline CertificationRequest& operator=(const CertificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CertificationRequest& operator=(CertificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CertificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CertificationRequest* internal_default_instance() {
    return reinterpret_cast<const CertificationRequest*>(
               &_CertificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CertificationRequest& a, CertificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CertificationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CertificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CertificationRequest* New() const final {
    return new CertificationRequest();
  }

  CertificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CertificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CertificationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CertificationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CertificationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "certification.CertificationRequest";
  }
  protected:
  explicit CertificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpUidFieldNumber = 1,
  };
  // string imp_uid = 1;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imp_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imp_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // @@protoc_insertion_point(class_scope:certification.CertificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fcertification_2fcertification_2eproto;
};
// -------------------------------------------------------------------

class CertificationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:certification.CertificationResponse) */ {
 public:
  inline CertificationResponse() : CertificationResponse(nullptr) {}
  ~CertificationResponse() override;
  explicit constexpr CertificationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CertificationResponse(const CertificationResponse& from);
  CertificationResponse(CertificationResponse&& from) noexcept
    : CertificationResponse() {
    *this = ::std::move(from);
  }

  inline CertificationResponse& operator=(const CertificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CertificationResponse& operator=(CertificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CertificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CertificationResponse* internal_default_instance() {
    return reinterpret_cast<const CertificationResponse*>(
               &_CertificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CertificationResponse& a, CertificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CertificationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CertificationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CertificationResponse* New() const final {
    return new CertificationResponse();
  }

  CertificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CertificationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CertificationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CertificationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CertificationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "certification.CertificationResponse";
  }
  protected:
  explicit CertificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .certification.Certification response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::certification::Certification& response() const;
  PROTOBUF_MUST_USE_RESULT ::certification::Certification* release_response();
  ::certification::Certification* mutable_response();
  void set_allocated_response(::certification::Certification* response);
  private:
  const ::certification::Certification& _internal_response() const;
  ::certification::Certification* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::certification::Certification* response);
  ::certification::Certification* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:certification.CertificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::certification::Certification* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fcertification_2fcertification_2eproto;
};
// -------------------------------------------------------------------

class Certification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:certification.Certification) */ {
 public:
  inline Certification() : Certification(nullptr) {}
  ~Certification() override;
  explicit constexpr Certification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Certification(const Certification& from);
  Certification(Certification&& from) noexcept
    : Certification() {
    *this = ::std::move(from);
  }

  inline Certification& operator=(const Certification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Certification& operator=(Certification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Certification& default_instance() {
    return *internal_default_instance();
  }
  static inline const Certification* internal_default_instance() {
    return reinterpret_cast<const Certification*>(
               &_Certification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Certification& a, Certification& b) {
    a.Swap(&b);
  }
  inline void Swap(Certification* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Certification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Certification* New() const final {
    return new Certification();
  }

  Certification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Certification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Certification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Certification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Certification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "certification.Certification";
  }
  protected:
  explicit Certification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpUidFieldNumber = 1,
    kMerchantUidFieldNumber = 2,
    kPgTidFieldNumber = 3,
    kPgProviderFieldNumber = 4,
    kNameFieldNumber = 5,
    kGenderFieldNumber = 6,
    kBirthdayFieldNumber = 8,
    kPhoneFieldNumber = 10,
    kCarrierFieldNumber = 11,
    kUniqueKeyFieldNumber = 14,
    kUniqueInSiteFieldNumber = 15,
    kOriginFieldNumber = 16,
    kBirthFieldNumber = 7,
    kForeignerFieldNumber = 9,
    kCertifiedFieldNumber = 12,
    kCertifiedAtFieldNumber = 13,
  };
  // string imp_uid = 1;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imp_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imp_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // string merchant_uid = 2;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string pg_tid = 3;
  void clear_pg_tid();
  const std::string& pg_tid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_tid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_tid();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_tid();
  void set_allocated_pg_tid(std::string* pg_tid);
  private:
  const std::string& _internal_pg_tid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_tid(const std::string& value);
  std::string* _internal_mutable_pg_tid();
  public:

  // string pg_provider = 4;
  void clear_pg_provider();
  const std::string& pg_provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_provider();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_provider();
  void set_allocated_pg_provider(std::string* pg_provider);
  private:
  const std::string& _internal_pg_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_provider(const std::string& value);
  std::string* _internal_mutable_pg_provider();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string gender = 6;
  void clear_gender();
  const std::string& gender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gender();
  PROTOBUF_MUST_USE_RESULT std::string* release_gender();
  void set_allocated_gender(std::string* gender);
  private:
  const std::string& _internal_gender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gender(const std::string& value);
  std::string* _internal_mutable_gender();
  public:

  // string birthday = 8;
  void clear_birthday();
  const std::string& birthday() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_birthday(ArgT0&& arg0, ArgT... args);
  std::string* mutable_birthday();
  PROTOBUF_MUST_USE_RESULT std::string* release_birthday();
  void set_allocated_birthday(std::string* birthday);
  private:
  const std::string& _internal_birthday() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birthday(const std::string& value);
  std::string* _internal_mutable_birthday();
  public:

  // string phone = 10;
  void clear_phone();
  const std::string& phone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone();
  PROTOBUF_MUST_USE_RESULT std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string carrier = 11;
  void clear_carrier();
  const std::string& carrier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_carrier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_carrier();
  PROTOBUF_MUST_USE_RESULT std::string* release_carrier();
  void set_allocated_carrier(std::string* carrier);
  private:
  const std::string& _internal_carrier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_carrier(const std::string& value);
  std::string* _internal_mutable_carrier();
  public:

  // string unique_key = 14;
  void clear_unique_key();
  const std::string& unique_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_unique_key();
  void set_allocated_unique_key(std::string* unique_key);
  private:
  const std::string& _internal_unique_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_key(const std::string& value);
  std::string* _internal_mutable_unique_key();
  public:

  // string unique_in_site = 15;
  void clear_unique_in_site();
  const std::string& unique_in_site() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique_in_site(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique_in_site();
  PROTOBUF_MUST_USE_RESULT std::string* release_unique_in_site();
  void set_allocated_unique_in_site(std::string* unique_in_site);
  private:
  const std::string& _internal_unique_in_site() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_in_site(const std::string& value);
  std::string* _internal_mutable_unique_in_site();
  public:

  // string origin = 16;
  void clear_origin();
  const std::string& origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin();
  PROTOBUF_MUST_USE_RESULT std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // int32 birth = 7;
  void clear_birth();
  ::PROTOBUF_NAMESPACE_ID::int32 birth() const;
  void set_birth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_birth() const;
  void _internal_set_birth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool foreigner = 9;
  void clear_foreigner();
  bool foreigner() const;
  void set_foreigner(bool value);
  private:
  bool _internal_foreigner() const;
  void _internal_set_foreigner(bool value);
  public:

  // bool certified = 12;
  void clear_certified();
  bool certified() const;
  void set_certified(bool value);
  private:
  bool _internal_certified() const;
  void _internal_set_certified(bool value);
  public:

  // int32 certified_at = 13;
  void clear_certified_at();
  ::PROTOBUF_NAMESPACE_ID::int32 certified_at() const;
  void set_certified_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_certified_at() const;
  void _internal_set_certified_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:certification.Certification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_tid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birthday_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr carrier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_in_site_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::int32 birth_;
  bool foreigner_;
  bool certified_;
  ::PROTOBUF_NAMESPACE_ID::int32 certified_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fcertification_2fcertification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CertificationRequest

// string imp_uid = 1;
inline void CertificationRequest::clear_imp_uid() {
  imp_uid_.ClearToEmpty();
}
inline const std::string& CertificationRequest::imp_uid() const {
  // @@protoc_insertion_point(field_get:certification.CertificationRequest.imp_uid)
  return _internal_imp_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CertificationRequest::set_imp_uid(ArgT0&& arg0, ArgT... args) {
 
 imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.CertificationRequest.imp_uid)
}
inline std::string* CertificationRequest::mutable_imp_uid() {
  std::string* _s = _internal_mutable_imp_uid();
  // @@protoc_insertion_point(field_mutable:certification.CertificationRequest.imp_uid)
  return _s;
}
inline const std::string& CertificationRequest::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void CertificationRequest::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CertificationRequest::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CertificationRequest::release_imp_uid() {
  // @@protoc_insertion_point(field_release:certification.CertificationRequest.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CertificationRequest::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.CertificationRequest.imp_uid)
}

// -------------------------------------------------------------------

// CertificationResponse

// int32 code = 1;
inline void CertificationResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CertificationResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CertificationResponse::code() const {
  // @@protoc_insertion_point(field_get:certification.CertificationResponse.code)
  return _internal_code();
}
inline void CertificationResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CertificationResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:certification.CertificationResponse.code)
}

// string message = 2;
inline void CertificationResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CertificationResponse::message() const {
  // @@protoc_insertion_point(field_get:certification.CertificationResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CertificationResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.CertificationResponse.message)
}
inline std::string* CertificationResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:certification.CertificationResponse.message)
  return _s;
}
inline const std::string& CertificationResponse::_internal_message() const {
  return message_.Get();
}
inline void CertificationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CertificationResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CertificationResponse::release_message() {
  // @@protoc_insertion_point(field_release:certification.CertificationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CertificationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.CertificationResponse.message)
}

// .certification.Certification response = 3;
inline bool CertificationResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool CertificationResponse::has_response() const {
  return _internal_has_response();
}
inline void CertificationResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::certification::Certification& CertificationResponse::_internal_response() const {
  const ::certification::Certification* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::certification::Certification&>(
      ::certification::_Certification_default_instance_);
}
inline const ::certification::Certification& CertificationResponse::response() const {
  // @@protoc_insertion_point(field_get:certification.CertificationResponse.response)
  return _internal_response();
}
inline void CertificationResponse::unsafe_arena_set_allocated_response(
    ::certification::Certification* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certification.CertificationResponse.response)
}
inline ::certification::Certification* CertificationResponse::release_response() {
  
  ::certification::Certification* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::certification::Certification* CertificationResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:certification.CertificationResponse.response)
  
  ::certification::Certification* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::certification::Certification* CertificationResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::certification::Certification>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::certification::Certification* CertificationResponse::mutable_response() {
  ::certification::Certification* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:certification.CertificationResponse.response)
  return _msg;
}
inline void CertificationResponse::set_allocated_response(::certification::Certification* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::certification::Certification>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:certification.CertificationResponse.response)
}

// -------------------------------------------------------------------

// Certification

// string imp_uid = 1;
inline void Certification::clear_imp_uid() {
  imp_uid_.ClearToEmpty();
}
inline const std::string& Certification::imp_uid() const {
  // @@protoc_insertion_point(field_get:certification.Certification.imp_uid)
  return _internal_imp_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_imp_uid(ArgT0&& arg0, ArgT... args) {
 
 imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.imp_uid)
}
inline std::string* Certification::mutable_imp_uid() {
  std::string* _s = _internal_mutable_imp_uid();
  // @@protoc_insertion_point(field_mutable:certification.Certification.imp_uid)
  return _s;
}
inline const std::string& Certification::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void Certification::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_imp_uid() {
  // @@protoc_insertion_point(field_release:certification.Certification.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.imp_uid)
}

// string merchant_uid = 2;
inline void Certification::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& Certification::merchant_uid() const {
  // @@protoc_insertion_point(field_get:certification.Certification.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.merchant_uid)
}
inline std::string* Certification::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:certification.Certification.merchant_uid)
  return _s;
}
inline const std::string& Certification::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void Certification::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:certification.Certification.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.merchant_uid)
}

// string pg_tid = 3;
inline void Certification::clear_pg_tid() {
  pg_tid_.ClearToEmpty();
}
inline const std::string& Certification::pg_tid() const {
  // @@protoc_insertion_point(field_get:certification.Certification.pg_tid)
  return _internal_pg_tid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_pg_tid(ArgT0&& arg0, ArgT... args) {
 
 pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.pg_tid)
}
inline std::string* Certification::mutable_pg_tid() {
  std::string* _s = _internal_mutable_pg_tid();
  // @@protoc_insertion_point(field_mutable:certification.Certification.pg_tid)
  return _s;
}
inline const std::string& Certification::_internal_pg_tid() const {
  return pg_tid_.Get();
}
inline void Certification::_internal_set_pg_tid(const std::string& value) {
  
  pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_pg_tid() {
  
  return pg_tid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_pg_tid() {
  // @@protoc_insertion_point(field_release:certification.Certification.pg_tid)
  return pg_tid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_pg_tid(std::string* pg_tid) {
  if (pg_tid != nullptr) {
    
  } else {
    
  }
  pg_tid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_tid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.pg_tid)
}

// string pg_provider = 4;
inline void Certification::clear_pg_provider() {
  pg_provider_.ClearToEmpty();
}
inline const std::string& Certification::pg_provider() const {
  // @@protoc_insertion_point(field_get:certification.Certification.pg_provider)
  return _internal_pg_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_pg_provider(ArgT0&& arg0, ArgT... args) {
 
 pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.pg_provider)
}
inline std::string* Certification::mutable_pg_provider() {
  std::string* _s = _internal_mutable_pg_provider();
  // @@protoc_insertion_point(field_mutable:certification.Certification.pg_provider)
  return _s;
}
inline const std::string& Certification::_internal_pg_provider() const {
  return pg_provider_.Get();
}
inline void Certification::_internal_set_pg_provider(const std::string& value) {
  
  pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_pg_provider() {
  
  return pg_provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_pg_provider() {
  // @@protoc_insertion_point(field_release:certification.Certification.pg_provider)
  return pg_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_pg_provider(std::string* pg_provider) {
  if (pg_provider != nullptr) {
    
  } else {
    
  }
  pg_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_provider,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.pg_provider)
}

// string name = 5;
inline void Certification::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Certification::name() const {
  // @@protoc_insertion_point(field_get:certification.Certification.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.name)
}
inline std::string* Certification::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:certification.Certification.name)
  return _s;
}
inline const std::string& Certification::_internal_name() const {
  return name_.Get();
}
inline void Certification::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_name() {
  // @@protoc_insertion_point(field_release:certification.Certification.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.name)
}

// string gender = 6;
inline void Certification::clear_gender() {
  gender_.ClearToEmpty();
}
inline const std::string& Certification::gender() const {
  // @@protoc_insertion_point(field_get:certification.Certification.gender)
  return _internal_gender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_gender(ArgT0&& arg0, ArgT... args) {
 
 gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.gender)
}
inline std::string* Certification::mutable_gender() {
  std::string* _s = _internal_mutable_gender();
  // @@protoc_insertion_point(field_mutable:certification.Certification.gender)
  return _s;
}
inline const std::string& Certification::_internal_gender() const {
  return gender_.Get();
}
inline void Certification::_internal_set_gender(const std::string& value) {
  
  gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_gender() {
  
  return gender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_gender() {
  // @@protoc_insertion_point(field_release:certification.Certification.gender)
  return gender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_gender(std::string* gender) {
  if (gender != nullptr) {
    
  } else {
    
  }
  gender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gender,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.gender)
}

// int32 birth = 7;
inline void Certification::clear_birth() {
  birth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Certification::_internal_birth() const {
  return birth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Certification::birth() const {
  // @@protoc_insertion_point(field_get:certification.Certification.birth)
  return _internal_birth();
}
inline void Certification::_internal_set_birth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  birth_ = value;
}
inline void Certification::set_birth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_birth(value);
  // @@protoc_insertion_point(field_set:certification.Certification.birth)
}

// string birthday = 8;
inline void Certification::clear_birthday() {
  birthday_.ClearToEmpty();
}
inline const std::string& Certification::birthday() const {
  // @@protoc_insertion_point(field_get:certification.Certification.birthday)
  return _internal_birthday();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_birthday(ArgT0&& arg0, ArgT... args) {
 
 birthday_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.birthday)
}
inline std::string* Certification::mutable_birthday() {
  std::string* _s = _internal_mutable_birthday();
  // @@protoc_insertion_point(field_mutable:certification.Certification.birthday)
  return _s;
}
inline const std::string& Certification::_internal_birthday() const {
  return birthday_.Get();
}
inline void Certification::_internal_set_birthday(const std::string& value) {
  
  birthday_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_birthday() {
  
  return birthday_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_birthday() {
  // @@protoc_insertion_point(field_release:certification.Certification.birthday)
  return birthday_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_birthday(std::string* birthday) {
  if (birthday != nullptr) {
    
  } else {
    
  }
  birthday_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birthday,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.birthday)
}

// bool foreigner = 9;
inline void Certification::clear_foreigner() {
  foreigner_ = false;
}
inline bool Certification::_internal_foreigner() const {
  return foreigner_;
}
inline bool Certification::foreigner() const {
  // @@protoc_insertion_point(field_get:certification.Certification.foreigner)
  return _internal_foreigner();
}
inline void Certification::_internal_set_foreigner(bool value) {
  
  foreigner_ = value;
}
inline void Certification::set_foreigner(bool value) {
  _internal_set_foreigner(value);
  // @@protoc_insertion_point(field_set:certification.Certification.foreigner)
}

// string phone = 10;
inline void Certification::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& Certification::phone() const {
  // @@protoc_insertion_point(field_get:certification.Certification.phone)
  return _internal_phone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_phone(ArgT0&& arg0, ArgT... args) {
 
 phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.phone)
}
inline std::string* Certification::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:certification.Certification.phone)
  return _s;
}
inline const std::string& Certification::_internal_phone() const {
  return phone_.Get();
}
inline void Certification::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_phone() {
  // @@protoc_insertion_point(field_release:certification.Certification.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.phone)
}

// string carrier = 11;
inline void Certification::clear_carrier() {
  carrier_.ClearToEmpty();
}
inline const std::string& Certification::carrier() const {
  // @@protoc_insertion_point(field_get:certification.Certification.carrier)
  return _internal_carrier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_carrier(ArgT0&& arg0, ArgT... args) {
 
 carrier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.carrier)
}
inline std::string* Certification::mutable_carrier() {
  std::string* _s = _internal_mutable_carrier();
  // @@protoc_insertion_point(field_mutable:certification.Certification.carrier)
  return _s;
}
inline const std::string& Certification::_internal_carrier() const {
  return carrier_.Get();
}
inline void Certification::_internal_set_carrier(const std::string& value) {
  
  carrier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_carrier() {
  
  return carrier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_carrier() {
  // @@protoc_insertion_point(field_release:certification.Certification.carrier)
  return carrier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_carrier(std::string* carrier) {
  if (carrier != nullptr) {
    
  } else {
    
  }
  carrier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), carrier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.carrier)
}

// bool certified = 12;
inline void Certification::clear_certified() {
  certified_ = false;
}
inline bool Certification::_internal_certified() const {
  return certified_;
}
inline bool Certification::certified() const {
  // @@protoc_insertion_point(field_get:certification.Certification.certified)
  return _internal_certified();
}
inline void Certification::_internal_set_certified(bool value) {
  
  certified_ = value;
}
inline void Certification::set_certified(bool value) {
  _internal_set_certified(value);
  // @@protoc_insertion_point(field_set:certification.Certification.certified)
}

// int32 certified_at = 13;
inline void Certification::clear_certified_at() {
  certified_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Certification::_internal_certified_at() const {
  return certified_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Certification::certified_at() const {
  // @@protoc_insertion_point(field_get:certification.Certification.certified_at)
  return _internal_certified_at();
}
inline void Certification::_internal_set_certified_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  certified_at_ = value;
}
inline void Certification::set_certified_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_certified_at(value);
  // @@protoc_insertion_point(field_set:certification.Certification.certified_at)
}

// string unique_key = 14;
inline void Certification::clear_unique_key() {
  unique_key_.ClearToEmpty();
}
inline const std::string& Certification::unique_key() const {
  // @@protoc_insertion_point(field_get:certification.Certification.unique_key)
  return _internal_unique_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_unique_key(ArgT0&& arg0, ArgT... args) {
 
 unique_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.unique_key)
}
inline std::string* Certification::mutable_unique_key() {
  std::string* _s = _internal_mutable_unique_key();
  // @@protoc_insertion_point(field_mutable:certification.Certification.unique_key)
  return _s;
}
inline const std::string& Certification::_internal_unique_key() const {
  return unique_key_.Get();
}
inline void Certification::_internal_set_unique_key(const std::string& value) {
  
  unique_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_unique_key() {
  
  return unique_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_unique_key() {
  // @@protoc_insertion_point(field_release:certification.Certification.unique_key)
  return unique_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_unique_key(std::string* unique_key) {
  if (unique_key != nullptr) {
    
  } else {
    
  }
  unique_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.unique_key)
}

// string unique_in_site = 15;
inline void Certification::clear_unique_in_site() {
  unique_in_site_.ClearToEmpty();
}
inline const std::string& Certification::unique_in_site() const {
  // @@protoc_insertion_point(field_get:certification.Certification.unique_in_site)
  return _internal_unique_in_site();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_unique_in_site(ArgT0&& arg0, ArgT... args) {
 
 unique_in_site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.unique_in_site)
}
inline std::string* Certification::mutable_unique_in_site() {
  std::string* _s = _internal_mutable_unique_in_site();
  // @@protoc_insertion_point(field_mutable:certification.Certification.unique_in_site)
  return _s;
}
inline const std::string& Certification::_internal_unique_in_site() const {
  return unique_in_site_.Get();
}
inline void Certification::_internal_set_unique_in_site(const std::string& value) {
  
  unique_in_site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_unique_in_site() {
  
  return unique_in_site_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_unique_in_site() {
  // @@protoc_insertion_point(field_release:certification.Certification.unique_in_site)
  return unique_in_site_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_unique_in_site(std::string* unique_in_site) {
  if (unique_in_site != nullptr) {
    
  } else {
    
  }
  unique_in_site_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_in_site,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.unique_in_site)
}

// string origin = 16;
inline void Certification::clear_origin() {
  origin_.ClearToEmpty();
}
inline const std::string& Certification::origin() const {
  // @@protoc_insertion_point(field_get:certification.Certification.origin)
  return _internal_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Certification::set_origin(ArgT0&& arg0, ArgT... args) {
 
 origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:certification.Certification.origin)
}
inline std::string* Certification::mutable_origin() {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:certification.Certification.origin)
  return _s;
}
inline const std::string& Certification::_internal_origin() const {
  return origin_.Get();
}
inline void Certification::_internal_set_origin(const std::string& value) {
  
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Certification::_internal_mutable_origin() {
  
  return origin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Certification::release_origin() {
  // @@protoc_insertion_point(field_release:certification.Certification.origin)
  return origin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Certification::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    
  } else {
    
  }
  origin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:certification.Certification.origin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace certification

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_v1_2fcertification_2fcertification_2eproto
