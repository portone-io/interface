// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/escrow/escrow.proto

#include "v1/escrow/escrow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace escrow {
constexpr Info::Info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , postcode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InfoDefaultTypeInternal {
  constexpr InfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InfoDefaultTypeInternal() {}
  union {
    Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InfoDefaultTypeInternal _Info_default_instance_;
constexpr Logis::Logis(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : company_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invoice_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sent_at_(0)
  , applied_at_(0){}
struct LogisDefaultTypeInternal {
  constexpr LogisDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogisDefaultTypeInternal() {}
  union {
    Logis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogisDefaultTypeInternal _Logis_default_instance_;
constexpr EscrowRequest::EscrowRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imp_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(nullptr)
  , receiver_(nullptr)
  , logis_(nullptr){}
struct EscrowRequestDefaultTypeInternal {
  constexpr EscrowRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EscrowRequestDefaultTypeInternal() {}
  union {
    EscrowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EscrowRequestDefaultTypeInternal _EscrowRequest_default_instance_;
constexpr EscrowResponse::EscrowResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_(nullptr)
  , code_(0){}
struct EscrowResponseDefaultTypeInternal {
  constexpr EscrowResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EscrowResponseDefaultTypeInternal() {}
  union {
    EscrowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EscrowResponseDefaultTypeInternal _EscrowResponse_default_instance_;
}  // namespace escrow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_v1_2fescrow_2fescrow_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_v1_2fescrow_2fescrow_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_v1_2fescrow_2fescrow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_v1_2fescrow_2fescrow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escrow::Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escrow::Info, name_),
  PROTOBUF_FIELD_OFFSET(::escrow::Info, tel_),
  PROTOBUF_FIELD_OFFSET(::escrow::Info, addr_),
  PROTOBUF_FIELD_OFFSET(::escrow::Info, postcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escrow::Logis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escrow::Logis, company_),
  PROTOBUF_FIELD_OFFSET(::escrow::Logis, invoice_),
  PROTOBUF_FIELD_OFFSET(::escrow::Logis, sent_at_),
  PROTOBUF_FIELD_OFFSET(::escrow::Logis, applied_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escrow::EscrowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escrow::EscrowRequest, imp_uid_),
  PROTOBUF_FIELD_OFFSET(::escrow::EscrowRequest, sender_),
  PROTOBUF_FIELD_OFFSET(::escrow::EscrowRequest, receiver_),
  PROTOBUF_FIELD_OFFSET(::escrow::EscrowRequest, logis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escrow::EscrowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escrow::EscrowResponse, code_),
  PROTOBUF_FIELD_OFFSET(::escrow::EscrowResponse, message_),
  PROTOBUF_FIELD_OFFSET(::escrow::EscrowResponse, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::escrow::Info)},
  { 9, -1, sizeof(::escrow::Logis)},
  { 18, -1, sizeof(::escrow::EscrowRequest)},
  { 27, -1, sizeof(::escrow::EscrowResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::escrow::_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::escrow::_Logis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::escrow::_EscrowRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::escrow::_EscrowResponse_default_instance_),
};

const char descriptor_table_protodef_v1_2fescrow_2fescrow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026v1/escrow/escrow.proto\022\006escrow\032\034google"
  "/api/annotations.proto\"A\n\004Info\022\014\n\004name\030\001"
  " \001(\t\022\013\n\003tel\030\002 \001(\t\022\014\n\004addr\030\003 \001(\t\022\020\n\010postc"
  "ode\030\004 \001(\t\"N\n\005Logis\022\017\n\007company\030\001 \001(\t\022\017\n\007i"
  "nvoice\030\002 \001(\t\022\017\n\007sent_at\030\003 \001(\005\022\022\n\napplied"
  "_at\030\004 \001(\005\"|\n\rEscrowRequest\022\017\n\007imp_uid\030\001 "
  "\001(\t\022\034\n\006sender\030\002 \001(\0132\014.escrow.Info\022\036\n\010rec"
  "eiver\030\003 \001(\0132\014.escrow.Info\022\034\n\005logis\030\004 \001(\013"
  "2\r.escrow.Logis\"P\n\016EscrowResponse\022\014\n\004cod"
  "e\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022\037\n\010response\030\003 \001"
  "(\0132\r.escrow.Logis2\370\001\n\rEscrowService\022s\n\rE"
  "scrowPostRPC\022\025.escrow.EscrowRequest\032\026.es"
  "crow.EscrowResponse\"3\202\323\344\223\002-\"(/api/paymen"
  "ts/v1/escrows/logis/{imp_uid}:\001*\022r\n\014Escr"
  "owPutRPC\022\025.escrow.EscrowRequest\032\026.escrow"
  ".EscrowResponse\"3\202\323\344\223\002-\032(/api/payments/v"
  "1/escrows/logis/{imp_uid}:\001*B\?Z1github.c"
  "om/iamport/interface/gen_src/go/v1/escro"
  "w\252\002\tV1.Escrowb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_v1_2fescrow_2fescrow_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_v1_2fescrow_2fescrow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fescrow_2fescrow_2eproto = {
  false, false, 741, descriptor_table_protodef_v1_2fescrow_2fescrow_2eproto, "v1/escrow/escrow.proto", 
  &descriptor_table_v1_2fescrow_2fescrow_2eproto_once, descriptor_table_v1_2fescrow_2fescrow_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_v1_2fescrow_2fescrow_2eproto::offsets,
  file_level_metadata_v1_2fescrow_2fescrow_2eproto, file_level_enum_descriptors_v1_2fescrow_2fescrow_2eproto, file_level_service_descriptors_v1_2fescrow_2fescrow_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_v1_2fescrow_2fescrow_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v1_2fescrow_2fescrow_2eproto);
  return descriptor_table_v1_2fescrow_2fescrow_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_v1_2fescrow_2fescrow_2eproto(&descriptor_table_v1_2fescrow_2fescrow_2eproto);
namespace escrow {

// ===================================================================

class Info::_Internal {
 public:
};

Info::Info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:escrow.Info)
}
Info::Info(const Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  tel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tel().empty()) {
    tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tel(), 
      GetArena());
  }
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArena());
  }
  postcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_postcode().empty()) {
    postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_postcode(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:escrow.Info)
}

void Info::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
postcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:escrow.Info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Info::ArenaDtor(void* object) {
  Info* _this = reinterpret_cast< Info* >(object);
  (void)_this;
}
void Info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:escrow.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  tel_.ClearToEmpty();
  addr_.ClearToEmpty();
  postcode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "escrow.Info.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "escrow.Info.tel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "escrow.Info.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string postcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_postcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "escrow.Info.postcode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:escrow.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "escrow.Info.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string tel = 2;
  if (this->tel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tel().data(), static_cast<int>(this->_internal_tel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "escrow.Info.tel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tel(), target);
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "escrow.Info.addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_addr(), target);
  }

  // string postcode = 4;
  if (this->postcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postcode().data(), static_cast<int>(this->_internal_postcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "escrow.Info.postcode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_postcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escrow.Info)
  return target;
}

size_t Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escrow.Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string tel = 2;
  if (this->tel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tel());
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string postcode = 4;
  if (this->postcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escrow.Info)
  GOOGLE_DCHECK_NE(&from, this);
  const Info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escrow.Info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escrow.Info)
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escrow.Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.tel().size() > 0) {
    _internal_set_tel(from._internal_tel());
  }
  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.postcode().size() > 0) {
    _internal_set_postcode(from._internal_postcode());
  }
}

void Info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escrow.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escrow.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {
  return true;
}

void Info::InternalSwap(Info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tel_.Swap(&other->tel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  postcode_.Swap(&other->postcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Logis::_Internal {
 public:
};

Logis::Logis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:escrow.Logis)
}
Logis::Logis(const Logis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company().empty()) {
    company_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_company(), 
      GetArena());
  }
  invoice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invoice().empty()) {
    invoice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invoice(), 
      GetArena());
  }
  ::memcpy(&sent_at_, &from.sent_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&applied_at_) -
    reinterpret_cast<char*>(&sent_at_)) + sizeof(applied_at_));
  // @@protoc_insertion_point(copy_constructor:escrow.Logis)
}

void Logis::SharedCtor() {
company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
invoice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sent_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&applied_at_) -
    reinterpret_cast<char*>(&sent_at_)) + sizeof(applied_at_));
}

Logis::~Logis() {
  // @@protoc_insertion_point(destructor:escrow.Logis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  company_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Logis::ArenaDtor(void* object) {
  Logis* _this = reinterpret_cast< Logis* >(object);
  (void)_this;
}
void Logis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Logis::Clear() {
// @@protoc_insertion_point(message_clear_start:escrow.Logis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  company_.ClearToEmpty();
  invoice_.ClearToEmpty();
  ::memset(&sent_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applied_at_) -
      reinterpret_cast<char*>(&sent_at_)) + sizeof(applied_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string company = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_company();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "escrow.Logis.company"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invoice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_invoice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "escrow.Logis.invoice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sent_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 applied_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          applied_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:escrow.Logis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string company = 1;
  if (this->company().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company().data(), static_cast<int>(this->_internal_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "escrow.Logis.company");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_company(), target);
  }

  // string invoice = 2;
  if (this->invoice().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invoice().data(), static_cast<int>(this->_internal_invoice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "escrow.Logis.invoice");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invoice(), target);
  }

  // int32 sent_at = 3;
  if (this->sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sent_at(), target);
  }

  // int32 applied_at = 4;
  if (this->applied_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_applied_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escrow.Logis)
  return target;
}

size_t Logis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escrow.Logis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string company = 1;
  if (this->company().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company());
  }

  // string invoice = 2;
  if (this->invoice().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invoice());
  }

  // int32 sent_at = 3;
  if (this->sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sent_at());
  }

  // int32 applied_at = 4;
  if (this->applied_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_applied_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escrow.Logis)
  GOOGLE_DCHECK_NE(&from, this);
  const Logis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escrow.Logis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escrow.Logis)
    MergeFrom(*source);
  }
}

void Logis::MergeFrom(const Logis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escrow.Logis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.company().size() > 0) {
    _internal_set_company(from._internal_company());
  }
  if (from.invoice().size() > 0) {
    _internal_set_invoice(from._internal_invoice());
  }
  if (from.sent_at() != 0) {
    _internal_set_sent_at(from._internal_sent_at());
  }
  if (from.applied_at() != 0) {
    _internal_set_applied_at(from._internal_applied_at());
  }
}

void Logis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escrow.Logis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logis::CopyFrom(const Logis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escrow.Logis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logis::IsInitialized() const {
  return true;
}

void Logis::InternalSwap(Logis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  company_.Swap(&other->company_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invoice_.Swap(&other->invoice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Logis, applied_at_)
      + sizeof(Logis::applied_at_)
      - PROTOBUF_FIELD_OFFSET(Logis, sent_at_)>(
          reinterpret_cast<char*>(&sent_at_),
          reinterpret_cast<char*>(&other->sent_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Logis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EscrowRequest::_Internal {
 public:
  static const ::escrow::Info& sender(const EscrowRequest* msg);
  static const ::escrow::Info& receiver(const EscrowRequest* msg);
  static const ::escrow::Logis& logis(const EscrowRequest* msg);
};

const ::escrow::Info&
EscrowRequest::_Internal::sender(const EscrowRequest* msg) {
  return *msg->sender_;
}
const ::escrow::Info&
EscrowRequest::_Internal::receiver(const EscrowRequest* msg) {
  return *msg->receiver_;
}
const ::escrow::Logis&
EscrowRequest::_Internal::logis(const EscrowRequest* msg) {
  return *msg->logis_;
}
EscrowRequest::EscrowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:escrow.EscrowRequest)
}
EscrowRequest::EscrowRequest(const EscrowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imp_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imp_uid().empty()) {
    imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imp_uid(), 
      GetArena());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::escrow::Info(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  if (from._internal_has_receiver()) {
    receiver_ = new ::escrow::Info(*from.receiver_);
  } else {
    receiver_ = nullptr;
  }
  if (from._internal_has_logis()) {
    logis_ = new ::escrow::Logis(*from.logis_);
  } else {
    logis_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:escrow.EscrowRequest)
}

void EscrowRequest::SharedCtor() {
imp_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logis_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(logis_));
}

EscrowRequest::~EscrowRequest() {
  // @@protoc_insertion_point(destructor:escrow.EscrowRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EscrowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imp_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
  if (this != internal_default_instance()) delete receiver_;
  if (this != internal_default_instance()) delete logis_;
}

void EscrowRequest::ArenaDtor(void* object) {
  EscrowRequest* _this = reinterpret_cast< EscrowRequest* >(object);
  (void)_this;
}
void EscrowRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EscrowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EscrowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:escrow.EscrowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imp_uid_.ClearToEmpty();
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  if (GetArena() == nullptr && receiver_ != nullptr) {
    delete receiver_;
  }
  receiver_ = nullptr;
  if (GetArena() == nullptr && logis_ != nullptr) {
    delete logis_;
  }
  logis_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EscrowRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string imp_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_imp_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "escrow.EscrowRequest.imp_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .escrow.Info sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .escrow.Info receiver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .escrow.Logis logis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_logis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EscrowRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:escrow.EscrowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string imp_uid = 1;
  if (this->imp_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imp_uid().data(), static_cast<int>(this->_internal_imp_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "escrow.EscrowRequest.imp_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imp_uid(), target);
  }

  // .escrow.Info sender = 2;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sender(this), target, stream);
  }

  // .escrow.Info receiver = 3;
  if (this->has_receiver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::receiver(this), target, stream);
  }

  // .escrow.Logis logis = 4;
  if (this->has_logis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::logis(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escrow.EscrowRequest)
  return target;
}

size_t EscrowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escrow.EscrowRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string imp_uid = 1;
  if (this->imp_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imp_uid());
  }

  // .escrow.Info sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // .escrow.Info receiver = 3;
  if (this->has_receiver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receiver_);
  }

  // .escrow.Logis logis = 4;
  if (this->has_logis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logis_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EscrowRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escrow.EscrowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EscrowRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EscrowRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escrow.EscrowRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escrow.EscrowRequest)
    MergeFrom(*source);
  }
}

void EscrowRequest::MergeFrom(const EscrowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escrow.EscrowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imp_uid().size() > 0) {
    _internal_set_imp_uid(from._internal_imp_uid());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::escrow::Info::MergeFrom(from._internal_sender());
  }
  if (from.has_receiver()) {
    _internal_mutable_receiver()->::escrow::Info::MergeFrom(from._internal_receiver());
  }
  if (from.has_logis()) {
    _internal_mutable_logis()->::escrow::Logis::MergeFrom(from._internal_logis());
  }
}

void EscrowRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escrow.EscrowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscrowRequest::CopyFrom(const EscrowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escrow.EscrowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscrowRequest::IsInitialized() const {
  return true;
}

void EscrowRequest::InternalSwap(EscrowRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imp_uid_.Swap(&other->imp_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EscrowRequest, logis_)
      + sizeof(EscrowRequest::logis_)
      - PROTOBUF_FIELD_OFFSET(EscrowRequest, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EscrowRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EscrowResponse::_Internal {
 public:
  static const ::escrow::Logis& response(const EscrowResponse* msg);
};

const ::escrow::Logis&
EscrowResponse::_Internal::response(const EscrowResponse* msg) {
  return *msg->response_;
}
EscrowResponse::EscrowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:escrow.EscrowResponse)
}
EscrowResponse::EscrowResponse(const EscrowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  if (from._internal_has_response()) {
    response_ = new ::escrow::Logis(*from.response_);
  } else {
    response_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:escrow.EscrowResponse)
}

void EscrowResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&response_)) + sizeof(code_));
}

EscrowResponse::~EscrowResponse() {
  // @@protoc_insertion_point(destructor:escrow.EscrowResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EscrowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void EscrowResponse::ArenaDtor(void* object) {
  EscrowResponse* _this = reinterpret_cast< EscrowResponse* >(object);
  (void)_this;
}
void EscrowResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EscrowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EscrowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:escrow.EscrowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EscrowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "escrow.EscrowResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .escrow.Logis response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EscrowResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:escrow.EscrowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "escrow.EscrowResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .escrow.Logis response = 3;
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escrow.EscrowResponse)
  return target;
}

size_t EscrowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escrow.EscrowResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .escrow.Logis response = 3;
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EscrowResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escrow.EscrowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EscrowResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EscrowResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escrow.EscrowResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escrow.EscrowResponse)
    MergeFrom(*source);
  }
}

void EscrowResponse::MergeFrom(const EscrowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escrow.EscrowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_response()) {
    _internal_mutable_response()->::escrow::Logis::MergeFrom(from._internal_response());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void EscrowResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escrow.EscrowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscrowResponse::CopyFrom(const EscrowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escrow.EscrowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscrowResponse::IsInitialized() const {
  return true;
}

void EscrowResponse::InternalSwap(EscrowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EscrowResponse, code_)
      + sizeof(EscrowResponse::code_)
      - PROTOBUF_FIELD_OFFSET(EscrowResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EscrowResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace escrow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::escrow::Info* Arena::CreateMaybeMessage< ::escrow::Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::escrow::Info >(arena);
}
template<> PROTOBUF_NOINLINE ::escrow::Logis* Arena::CreateMaybeMessage< ::escrow::Logis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::escrow::Logis >(arena);
}
template<> PROTOBUF_NOINLINE ::escrow::EscrowRequest* Arena::CreateMaybeMessage< ::escrow::EscrowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::escrow::EscrowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::escrow::EscrowResponse* Arena::CreateMaybeMessage< ::escrow::EscrowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::escrow::EscrowResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
