// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/payment/payment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2fpayment_2fpayment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_v1_2fpayment_2fpayment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_v1_2fpayment_2fpayment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2fpayment_2fpayment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fpayment_2fpayment_2eproto;
namespace payment {
class CancelHistory;
struct CancelHistoryDefaultTypeInternal;
extern CancelHistoryDefaultTypeInternal _CancelHistory_default_instance_;
class Payment;
struct PaymentDefaultTypeInternal;
extern PaymentDefaultTypeInternal _Payment_default_instance_;
class PaymentBalance;
struct PaymentBalanceDefaultTypeInternal;
extern PaymentBalanceDefaultTypeInternal _PaymentBalance_default_instance_;
class PaymentBalanceDetail;
struct PaymentBalanceDetailDefaultTypeInternal;
extern PaymentBalanceDetailDefaultTypeInternal _PaymentBalanceDetail_default_instance_;
class PaymentBalanceHistory;
struct PaymentBalanceHistoryDefaultTypeInternal;
extern PaymentBalanceHistoryDefaultTypeInternal _PaymentBalanceHistory_default_instance_;
class PaymentBalanceRequest;
struct PaymentBalanceRequestDefaultTypeInternal;
extern PaymentBalanceRequestDefaultTypeInternal _PaymentBalanceRequest_default_instance_;
class PaymentBalanceResponse;
struct PaymentBalanceResponseDefaultTypeInternal;
extern PaymentBalanceResponseDefaultTypeInternal _PaymentBalanceResponse_default_instance_;
class PaymentCancelRequest;
struct PaymentCancelRequestDefaultTypeInternal;
extern PaymentCancelRequestDefaultTypeInternal _PaymentCancelRequest_default_instance_;
class PaymentCancelResponse;
struct PaymentCancelResponseDefaultTypeInternal;
extern PaymentCancelResponseDefaultTypeInternal _PaymentCancelResponse_default_instance_;
class PaymentGetPrepareRequest;
struct PaymentGetPrepareRequestDefaultTypeInternal;
extern PaymentGetPrepareRequestDefaultTypeInternal _PaymentGetPrepareRequest_default_instance_;
class PaymentMerchantUidRequest;
struct PaymentMerchantUidRequestDefaultTypeInternal;
extern PaymentMerchantUidRequestDefaultTypeInternal _PaymentMerchantUidRequest_default_instance_;
class PaymentMerchantUidResponse;
struct PaymentMerchantUidResponseDefaultTypeInternal;
extern PaymentMerchantUidResponseDefaultTypeInternal _PaymentMerchantUidResponse_default_instance_;
class PaymentPage;
struct PaymentPageDefaultTypeInternal;
extern PaymentPageDefaultTypeInternal _PaymentPage_default_instance_;
class PaymentPrepareRequest;
struct PaymentPrepareRequestDefaultTypeInternal;
extern PaymentPrepareRequestDefaultTypeInternal _PaymentPrepareRequest_default_instance_;
class PaymentPrepareResponse;
struct PaymentPrepareResponseDefaultTypeInternal;
extern PaymentPrepareResponseDefaultTypeInternal _PaymentPrepareResponse_default_instance_;
class PaymentRequest;
struct PaymentRequestDefaultTypeInternal;
extern PaymentRequestDefaultTypeInternal _PaymentRequest_default_instance_;
class PaymentResponse;
struct PaymentResponseDefaultTypeInternal;
extern PaymentResponseDefaultTypeInternal _PaymentResponse_default_instance_;
class PaymentStatusRequest;
struct PaymentStatusRequestDefaultTypeInternal;
extern PaymentStatusRequestDefaultTypeInternal _PaymentStatusRequest_default_instance_;
class PaymentStatusResponse;
struct PaymentStatusResponseDefaultTypeInternal;
extern PaymentStatusResponseDefaultTypeInternal _PaymentStatusResponse_default_instance_;
class PaymentsMerchantUidRequest;
struct PaymentsMerchantUidRequestDefaultTypeInternal;
extern PaymentsMerchantUidRequestDefaultTypeInternal _PaymentsMerchantUidRequest_default_instance_;
class PaymentsMerchantUidResponse;
struct PaymentsMerchantUidResponseDefaultTypeInternal;
extern PaymentsMerchantUidResponseDefaultTypeInternal _PaymentsMerchantUidResponse_default_instance_;
class PaymentsRequest;
struct PaymentsRequestDefaultTypeInternal;
extern PaymentsRequestDefaultTypeInternal _PaymentsRequest_default_instance_;
class PaymentsResponse;
struct PaymentsResponseDefaultTypeInternal;
extern PaymentsResponseDefaultTypeInternal _PaymentsResponse_default_instance_;
class Prepare;
struct PrepareDefaultTypeInternal;
extern PrepareDefaultTypeInternal _Prepare_default_instance_;
class Promotion;
struct PromotionDefaultTypeInternal;
extern PromotionDefaultTypeInternal _Promotion_default_instance_;
}  // namespace payment
PROTOBUF_NAMESPACE_OPEN
template<> ::payment::CancelHistory* Arena::CreateMaybeMessage<::payment::CancelHistory>(Arena*);
template<> ::payment::Payment* Arena::CreateMaybeMessage<::payment::Payment>(Arena*);
template<> ::payment::PaymentBalance* Arena::CreateMaybeMessage<::payment::PaymentBalance>(Arena*);
template<> ::payment::PaymentBalanceDetail* Arena::CreateMaybeMessage<::payment::PaymentBalanceDetail>(Arena*);
template<> ::payment::PaymentBalanceHistory* Arena::CreateMaybeMessage<::payment::PaymentBalanceHistory>(Arena*);
template<> ::payment::PaymentBalanceRequest* Arena::CreateMaybeMessage<::payment::PaymentBalanceRequest>(Arena*);
template<> ::payment::PaymentBalanceResponse* Arena::CreateMaybeMessage<::payment::PaymentBalanceResponse>(Arena*);
template<> ::payment::PaymentCancelRequest* Arena::CreateMaybeMessage<::payment::PaymentCancelRequest>(Arena*);
template<> ::payment::PaymentCancelResponse* Arena::CreateMaybeMessage<::payment::PaymentCancelResponse>(Arena*);
template<> ::payment::PaymentGetPrepareRequest* Arena::CreateMaybeMessage<::payment::PaymentGetPrepareRequest>(Arena*);
template<> ::payment::PaymentMerchantUidRequest* Arena::CreateMaybeMessage<::payment::PaymentMerchantUidRequest>(Arena*);
template<> ::payment::PaymentMerchantUidResponse* Arena::CreateMaybeMessage<::payment::PaymentMerchantUidResponse>(Arena*);
template<> ::payment::PaymentPage* Arena::CreateMaybeMessage<::payment::PaymentPage>(Arena*);
template<> ::payment::PaymentPrepareRequest* Arena::CreateMaybeMessage<::payment::PaymentPrepareRequest>(Arena*);
template<> ::payment::PaymentPrepareResponse* Arena::CreateMaybeMessage<::payment::PaymentPrepareResponse>(Arena*);
template<> ::payment::PaymentRequest* Arena::CreateMaybeMessage<::payment::PaymentRequest>(Arena*);
template<> ::payment::PaymentResponse* Arena::CreateMaybeMessage<::payment::PaymentResponse>(Arena*);
template<> ::payment::PaymentStatusRequest* Arena::CreateMaybeMessage<::payment::PaymentStatusRequest>(Arena*);
template<> ::payment::PaymentStatusResponse* Arena::CreateMaybeMessage<::payment::PaymentStatusResponse>(Arena*);
template<> ::payment::PaymentsMerchantUidRequest* Arena::CreateMaybeMessage<::payment::PaymentsMerchantUidRequest>(Arena*);
template<> ::payment::PaymentsMerchantUidResponse* Arena::CreateMaybeMessage<::payment::PaymentsMerchantUidResponse>(Arena*);
template<> ::payment::PaymentsRequest* Arena::CreateMaybeMessage<::payment::PaymentsRequest>(Arena*);
template<> ::payment::PaymentsResponse* Arena::CreateMaybeMessage<::payment::PaymentsResponse>(Arena*);
template<> ::payment::Prepare* Arena::CreateMaybeMessage<::payment::Prepare>(Arena*);
template<> ::payment::Promotion* Arena::CreateMaybeMessage<::payment::Promotion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace payment {

// ===================================================================

class Payment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.Payment) */ {
 public:
  inline Payment() : Payment(nullptr) {}
  ~Payment() override;
  explicit constexpr Payment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Payment(const Payment& from);
  Payment(Payment&& from) noexcept
    : Payment() {
    *this = ::std::move(from);
  }

  inline Payment& operator=(const Payment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payment& operator=(Payment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Payment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Payment* internal_default_instance() {
    return reinterpret_cast<const Payment*>(
               &_Payment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Payment& a, Payment& b) {
    a.Swap(&b);
  }
  inline void Swap(Payment* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payment* New() const final {
    return new Payment();
  }

  Payment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Payment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Payment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.Payment";
  }
  protected:
  explicit Payment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCancelHistoryFieldNumber = 11,
    kCancelReceiptUrlsFieldNumber = 13,
    kApplyNumFieldNumber = 2,
    kBankNameFieldNumber = 4,
    kBuyerAddrFieldNumber = 5,
    kBuyerEmailFieldNumber = 6,
    kBuyerNameFieldNumber = 7,
    kBuyerPostcodeFieldNumber = 8,
    kBuyerTelFieldNumber = 9,
    kCancelReasonFieldNumber = 12,
    kCardCodeFieldNumber = 15,
    kCardNameFieldNumber = 16,
    kCardNumberFieldNumber = 17,
    kChannelFieldNumber = 21,
    kCurrencyFieldNumber = 22,
    kCustomDataFieldNumber = 23,
    kCustomerUidFieldNumber = 24,
    kCustomerUidUsageFieldNumber = 25,
    kFailReasonFieldNumber = 27,
    kImpUidFieldNumber = 29,
    kMerchantUidFieldNumber = 30,
    kNameFieldNumber = 31,
    kPayMethodFieldNumber = 33,
    kPgIdFieldNumber = 34,
    kPgProviderFieldNumber = 35,
    kPgTidFieldNumber = 36,
    kReceiptUrlFieldNumber = 37,
    kStatusFieldNumber = 39,
    kUserAgentFieldNumber = 40,
    kVbankCodeFieldNumber = 41,
    kVbankHolderFieldNumber = 43,
    kVbankNameFieldNumber = 45,
    kVbankNumFieldNumber = 46,
    kEmbPgProviderFieldNumber = 48,
    kPromotionFieldNumber = 47,
    kAmountFieldNumber = 1,
    kBankCodeFieldNumber = 3,
    kCancelAmountFieldNumber = 10,
    kCancelledAtFieldNumber = 14,
    kCardQuotaFieldNumber = 18,
    kCardTypeFieldNumber = 19,
    kCashReceiptIssuedFieldNumber = 20,
    kEscrowFieldNumber = 26,
    kFailedAtFieldNumber = 28,
    kPaidAtFieldNumber = 32,
    kStartedAtFieldNumber = 38,
    kVbankDateFieldNumber = 42,
    kVbankIssuedAtFieldNumber = 44,
  };
  // repeated .payment.CancelHistory cancel_history = 11;
  int cancel_history_size() const;
  private:
  int _internal_cancel_history_size() const;
  public:
  void clear_cancel_history();
  ::payment::CancelHistory* mutable_cancel_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::CancelHistory >*
      mutable_cancel_history();
  private:
  const ::payment::CancelHistory& _internal_cancel_history(int index) const;
  ::payment::CancelHistory* _internal_add_cancel_history();
  public:
  const ::payment::CancelHistory& cancel_history(int index) const;
  ::payment::CancelHistory* add_cancel_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::CancelHistory >&
      cancel_history() const;

  // repeated string cancel_receipt_urls = 13;
  int cancel_receipt_urls_size() const;
  private:
  int _internal_cancel_receipt_urls_size() const;
  public:
  void clear_cancel_receipt_urls();
  const std::string& cancel_receipt_urls(int index) const;
  std::string* mutable_cancel_receipt_urls(int index);
  void set_cancel_receipt_urls(int index, const std::string& value);
  void set_cancel_receipt_urls(int index, std::string&& value);
  void set_cancel_receipt_urls(int index, const char* value);
  void set_cancel_receipt_urls(int index, const char* value, size_t size);
  std::string* add_cancel_receipt_urls();
  void add_cancel_receipt_urls(const std::string& value);
  void add_cancel_receipt_urls(std::string&& value);
  void add_cancel_receipt_urls(const char* value);
  void add_cancel_receipt_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cancel_receipt_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cancel_receipt_urls();
  private:
  const std::string& _internal_cancel_receipt_urls(int index) const;
  std::string* _internal_add_cancel_receipt_urls();
  public:

  // string apply_num = 2;
  void clear_apply_num();
  const std::string& apply_num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apply_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apply_num();
  PROTOBUF_MUST_USE_RESULT std::string* release_apply_num();
  void set_allocated_apply_num(std::string* apply_num);
  private:
  const std::string& _internal_apply_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apply_num(const std::string& value);
  std::string* _internal_mutable_apply_num();
  public:

  // string bank_name = 4;
  void clear_bank_name();
  const std::string& bank_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bank_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bank_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_bank_name();
  void set_allocated_bank_name(std::string* bank_name);
  private:
  const std::string& _internal_bank_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bank_name(const std::string& value);
  std::string* _internal_mutable_bank_name();
  public:

  // string buyer_addr = 5;
  void clear_buyer_addr();
  const std::string& buyer_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_addr();
  void set_allocated_buyer_addr(std::string* buyer_addr);
  private:
  const std::string& _internal_buyer_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_addr(const std::string& value);
  std::string* _internal_mutable_buyer_addr();
  public:

  // string buyer_email = 6;
  void clear_buyer_email();
  const std::string& buyer_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_email();
  void set_allocated_buyer_email(std::string* buyer_email);
  private:
  const std::string& _internal_buyer_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_email(const std::string& value);
  std::string* _internal_mutable_buyer_email();
  public:

  // string buyer_name = 7;
  void clear_buyer_name();
  const std::string& buyer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_name();
  void set_allocated_buyer_name(std::string* buyer_name);
  private:
  const std::string& _internal_buyer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_name(const std::string& value);
  std::string* _internal_mutable_buyer_name();
  public:

  // string buyer_postcode = 8;
  void clear_buyer_postcode();
  const std::string& buyer_postcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_postcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_postcode();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_postcode();
  void set_allocated_buyer_postcode(std::string* buyer_postcode);
  private:
  const std::string& _internal_buyer_postcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_postcode(const std::string& value);
  std::string* _internal_mutable_buyer_postcode();
  public:

  // string buyer_tel = 9;
  void clear_buyer_tel();
  const std::string& buyer_tel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buyer_tel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buyer_tel();
  PROTOBUF_MUST_USE_RESULT std::string* release_buyer_tel();
  void set_allocated_buyer_tel(std::string* buyer_tel);
  private:
  const std::string& _internal_buyer_tel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buyer_tel(const std::string& value);
  std::string* _internal_mutable_buyer_tel();
  public:

  // string cancel_reason = 12;
  void clear_cancel_reason();
  const std::string& cancel_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cancel_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cancel_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_cancel_reason();
  void set_allocated_cancel_reason(std::string* cancel_reason);
  private:
  const std::string& _internal_cancel_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cancel_reason(const std::string& value);
  std::string* _internal_mutable_cancel_reason();
  public:

  // string card_code = 15;
  void clear_card_code();
  const std::string& card_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_code();
  void set_allocated_card_code(std::string* card_code);
  private:
  const std::string& _internal_card_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_code(const std::string& value);
  std::string* _internal_mutable_card_code();
  public:

  // string card_name = 16;
  void clear_card_name();
  const std::string& card_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_name();
  void set_allocated_card_name(std::string* card_name);
  private:
  const std::string& _internal_card_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_name(const std::string& value);
  std::string* _internal_mutable_card_name();
  public:

  // string card_number = 17;
  void clear_card_number();
  const std::string& card_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_card_number();
  void set_allocated_card_number(std::string* card_number);
  private:
  const std::string& _internal_card_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_number(const std::string& value);
  std::string* _internal_mutable_card_number();
  public:

  // string channel = 21;
  void clear_channel();
  const std::string& channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel();
  PROTOBUF_MUST_USE_RESULT std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // string currency = 22;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_MUST_USE_RESULT std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string custom_data = 23;
  void clear_custom_data();
  const std::string& custom_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_custom_data();
  void set_allocated_custom_data(std::string* custom_data);
  private:
  const std::string& _internal_custom_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_data(const std::string& value);
  std::string* _internal_mutable_custom_data();
  public:

  // string customer_uid = 24;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // string customer_uid_usage = 25;
  void clear_customer_uid_usage();
  const std::string& customer_uid_usage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_uid_usage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_uid_usage();
  PROTOBUF_MUST_USE_RESULT std::string* release_customer_uid_usage();
  void set_allocated_customer_uid_usage(std::string* customer_uid_usage);
  private:
  const std::string& _internal_customer_uid_usage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_uid_usage(const std::string& value);
  std::string* _internal_mutable_customer_uid_usage();
  public:

  // string fail_reason = 27;
  void clear_fail_reason();
  const std::string& fail_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fail_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fail_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* fail_reason);
  private:
  const std::string& _internal_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_reason(const std::string& value);
  std::string* _internal_mutable_fail_reason();
  public:

  // string imp_uid = 29;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imp_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imp_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // string merchant_uid = 30;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string name = 31;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pay_method = 33;
  void clear_pay_method();
  const std::string& pay_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pay_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pay_method();
  PROTOBUF_MUST_USE_RESULT std::string* release_pay_method();
  void set_allocated_pay_method(std::string* pay_method);
  private:
  const std::string& _internal_pay_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pay_method(const std::string& value);
  std::string* _internal_mutable_pay_method();
  public:

  // string pg_id = 34;
  void clear_pg_id();
  const std::string& pg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_id();
  void set_allocated_pg_id(std::string* pg_id);
  private:
  const std::string& _internal_pg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_id(const std::string& value);
  std::string* _internal_mutable_pg_id();
  public:

  // string pg_provider = 35;
  void clear_pg_provider();
  const std::string& pg_provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_provider();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_provider();
  void set_allocated_pg_provider(std::string* pg_provider);
  private:
  const std::string& _internal_pg_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_provider(const std::string& value);
  std::string* _internal_mutable_pg_provider();
  public:

  // string pg_tid = 36;
  void clear_pg_tid();
  const std::string& pg_tid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_tid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_tid();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_tid();
  void set_allocated_pg_tid(std::string* pg_tid);
  private:
  const std::string& _internal_pg_tid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_tid(const std::string& value);
  std::string* _internal_mutable_pg_tid();
  public:

  // string receipt_url = 37;
  void clear_receipt_url();
  const std::string& receipt_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receipt_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receipt_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_receipt_url();
  void set_allocated_receipt_url(std::string* receipt_url);
  private:
  const std::string& _internal_receipt_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receipt_url(const std::string& value);
  std::string* _internal_mutable_receipt_url();
  public:

  // string status = 39;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string user_agent = 40;
  void clear_user_agent();
  const std::string& user_agent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_agent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_agent();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_agent();
  void set_allocated_user_agent(std::string* user_agent);
  private:
  const std::string& _internal_user_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_agent(const std::string& value);
  std::string* _internal_mutable_user_agent();
  public:

  // string vbank_code = 41;
  void clear_vbank_code();
  const std::string& vbank_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vbank_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vbank_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_vbank_code();
  void set_allocated_vbank_code(std::string* vbank_code);
  private:
  const std::string& _internal_vbank_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vbank_code(const std::string& value);
  std::string* _internal_mutable_vbank_code();
  public:

  // string vbank_holder = 43;
  void clear_vbank_holder();
  const std::string& vbank_holder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vbank_holder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vbank_holder();
  PROTOBUF_MUST_USE_RESULT std::string* release_vbank_holder();
  void set_allocated_vbank_holder(std::string* vbank_holder);
  private:
  const std::string& _internal_vbank_holder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vbank_holder(const std::string& value);
  std::string* _internal_mutable_vbank_holder();
  public:

  // string vbank_name = 45;
  void clear_vbank_name();
  const std::string& vbank_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vbank_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vbank_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_vbank_name();
  void set_allocated_vbank_name(std::string* vbank_name);
  private:
  const std::string& _internal_vbank_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vbank_name(const std::string& value);
  std::string* _internal_mutable_vbank_name();
  public:

  // string vbank_num = 46;
  void clear_vbank_num();
  const std::string& vbank_num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vbank_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vbank_num();
  PROTOBUF_MUST_USE_RESULT std::string* release_vbank_num();
  void set_allocated_vbank_num(std::string* vbank_num);
  private:
  const std::string& _internal_vbank_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vbank_num(const std::string& value);
  std::string* _internal_mutable_vbank_num();
  public:

  // string emb_pg_provider = 48;
  void clear_emb_pg_provider();
  const std::string& emb_pg_provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_emb_pg_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_emb_pg_provider();
  PROTOBUF_MUST_USE_RESULT std::string* release_emb_pg_provider();
  void set_allocated_emb_pg_provider(std::string* emb_pg_provider);
  private:
  const std::string& _internal_emb_pg_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emb_pg_provider(const std::string& value);
  std::string* _internal_mutable_emb_pg_provider();
  public:

  // .payment.Promotion promotion = 47;
  bool has_promotion() const;
  private:
  bool _internal_has_promotion() const;
  public:
  void clear_promotion();
  const ::payment::Promotion& promotion() const;
  PROTOBUF_MUST_USE_RESULT ::payment::Promotion* release_promotion();
  ::payment::Promotion* mutable_promotion();
  void set_allocated_promotion(::payment::Promotion* promotion);
  private:
  const ::payment::Promotion& _internal_promotion() const;
  ::payment::Promotion* _internal_mutable_promotion();
  public:
  void unsafe_arena_set_allocated_promotion(
      ::payment::Promotion* promotion);
  ::payment::Promotion* unsafe_arena_release_promotion();

  // int32 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bank_code = 3;
  void clear_bank_code();
  ::PROTOBUF_NAMESPACE_ID::int32 bank_code() const;
  void set_bank_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bank_code() const;
  void _internal_set_bank_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cancel_amount = 10;
  void clear_cancel_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 cancel_amount() const;
  void set_cancel_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cancel_amount() const;
  void _internal_set_cancel_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cancelled_at = 14;
  void clear_cancelled_at();
  ::PROTOBUF_NAMESPACE_ID::int32 cancelled_at() const;
  void set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cancelled_at() const;
  void _internal_set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_quota = 18;
  void clear_card_quota();
  ::PROTOBUF_NAMESPACE_ID::int32 card_quota() const;
  void set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_quota() const;
  void _internal_set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_type = 19;
  void clear_card_type();
  ::PROTOBUF_NAMESPACE_ID::int32 card_type() const;
  void set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_type() const;
  void _internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool cash_receipt_issued = 20;
  void clear_cash_receipt_issued();
  bool cash_receipt_issued() const;
  void set_cash_receipt_issued(bool value);
  private:
  bool _internal_cash_receipt_issued() const;
  void _internal_set_cash_receipt_issued(bool value);
  public:

  // bool escrow = 26;
  void clear_escrow();
  bool escrow() const;
  void set_escrow(bool value);
  private:
  bool _internal_escrow() const;
  void _internal_set_escrow(bool value);
  public:

  // int32 failed_at = 28;
  void clear_failed_at();
  ::PROTOBUF_NAMESPACE_ID::int32 failed_at() const;
  void set_failed_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_failed_at() const;
  void _internal_set_failed_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 paid_at = 32;
  void clear_paid_at();
  ::PROTOBUF_NAMESPACE_ID::int32 paid_at() const;
  void set_paid_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_paid_at() const;
  void _internal_set_paid_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 started_at = 38;
  void clear_started_at();
  ::PROTOBUF_NAMESPACE_ID::int32 started_at() const;
  void set_started_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_started_at() const;
  void _internal_set_started_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vbank_date = 42;
  void clear_vbank_date();
  ::PROTOBUF_NAMESPACE_ID::int32 vbank_date() const;
  void set_vbank_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vbank_date() const;
  void _internal_set_vbank_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vbank_issued_at = 44;
  void clear_vbank_issued_at();
  ::PROTOBUF_NAMESPACE_ID::int32 vbank_issued_at() const;
  void set_vbank_issued_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vbank_issued_at() const;
  void _internal_set_vbank_issued_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.Payment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::CancelHistory > cancel_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cancel_receipt_urls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_usage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pay_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_tid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receipt_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vbank_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vbank_holder_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vbank_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vbank_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr emb_pg_provider_;
  ::payment::Promotion* promotion_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 bank_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 cancel_amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 cancelled_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_quota_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_type_;
  bool cash_receipt_issued_;
  bool escrow_;
  ::PROTOBUF_NAMESPACE_ID::int32 failed_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 paid_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 started_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 vbank_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 vbank_issued_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class CancelHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.CancelHistory) */ {
 public:
  inline CancelHistory() : CancelHistory(nullptr) {}
  ~CancelHistory() override;
  explicit constexpr CancelHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelHistory(const CancelHistory& from);
  CancelHistory(CancelHistory&& from) noexcept
    : CancelHistory() {
    *this = ::std::move(from);
  }

  inline CancelHistory& operator=(const CancelHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelHistory& operator=(CancelHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelHistory* internal_default_instance() {
    return reinterpret_cast<const CancelHistory*>(
               &_CancelHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CancelHistory& a, CancelHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelHistory* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelHistory* New() const final {
    return new CancelHistory();
  }

  CancelHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.CancelHistory";
  }
  protected:
  explicit CancelHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPgTidFieldNumber = 1,
    kReasonFieldNumber = 4,
    kReceiptUrlFieldNumber = 5,
    kAmountFieldNumber = 2,
    kCancelledAtFieldNumber = 3,
  };
  // string pg_tid = 1;
  void clear_pg_tid();
  const std::string& pg_tid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pg_tid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pg_tid();
  PROTOBUF_MUST_USE_RESULT std::string* release_pg_tid();
  void set_allocated_pg_tid(std::string* pg_tid);
  private:
  const std::string& _internal_pg_tid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pg_tid(const std::string& value);
  std::string* _internal_mutable_pg_tid();
  public:

  // string reason = 4;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string receipt_url = 5;
  void clear_receipt_url();
  const std::string& receipt_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receipt_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receipt_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_receipt_url();
  void set_allocated_receipt_url(std::string* receipt_url);
  private:
  const std::string& _internal_receipt_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receipt_url(const std::string& value);
  std::string* _internal_mutable_receipt_url();
  public:

  // int32 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cancelled_at = 3;
  void clear_cancelled_at();
  ::PROTOBUF_NAMESPACE_ID::int32 cancelled_at() const;
  void set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cancelled_at() const;
  void _internal_set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.CancelHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_tid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receipt_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 cancelled_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentPage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentPage) */ {
 public:
  inline PaymentPage() : PaymentPage(nullptr) {}
  ~PaymentPage() override;
  explicit constexpr PaymentPage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentPage(const PaymentPage& from);
  PaymentPage(PaymentPage&& from) noexcept
    : PaymentPage() {
    *this = ::std::move(from);
  }

  inline PaymentPage& operator=(const PaymentPage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentPage& operator=(PaymentPage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentPage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentPage* internal_default_instance() {
    return reinterpret_cast<const PaymentPage*>(
               &_PaymentPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PaymentPage& a, PaymentPage& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentPage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentPage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentPage* New() const final {
    return new PaymentPage();
  }

  PaymentPage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentPage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentPage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentPage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentPage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentPage";
  }
  protected:
  explicit PaymentPage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 4,
    kTotalFieldNumber = 1,
    kPreviousFieldNumber = 2,
    kNextFieldNumber = 3,
  };
  // repeated .payment.Payment list = 4;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::payment::Payment* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >*
      mutable_list();
  private:
  const ::payment::Payment& _internal_list(int index) const;
  ::payment::Payment* _internal_add_list();
  public:
  const ::payment::Payment& list(int index) const;
  ::payment::Payment* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >&
      list() const;

  // int32 total = 1;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 previous = 2;
  void clear_previous();
  ::PROTOBUF_NAMESPACE_ID::int32 previous() const;
  void set_previous(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_previous() const;
  void _internal_set_previous(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 next = 3;
  void clear_next();
  ::PROTOBUF_NAMESPACE_ID::int32 next() const;
  void set_next(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_next() const;
  void _internal_set_next(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentPage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 previous_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentBalanceDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentBalanceDetail) */ {
 public:
  inline PaymentBalanceDetail() : PaymentBalanceDetail(nullptr) {}
  ~PaymentBalanceDetail() override;
  explicit constexpr PaymentBalanceDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentBalanceDetail(const PaymentBalanceDetail& from);
  PaymentBalanceDetail(PaymentBalanceDetail&& from) noexcept
    : PaymentBalanceDetail() {
    *this = ::std::move(from);
  }

  inline PaymentBalanceDetail& operator=(const PaymentBalanceDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentBalanceDetail& operator=(PaymentBalanceDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentBalanceDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentBalanceDetail* internal_default_instance() {
    return reinterpret_cast<const PaymentBalanceDetail*>(
               &_PaymentBalanceDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PaymentBalanceDetail& a, PaymentBalanceDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentBalanceDetail* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentBalanceDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentBalanceDetail* New() const final {
    return new PaymentBalanceDetail();
  }

  PaymentBalanceDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentBalanceDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentBalanceDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentBalanceDetail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentBalanceDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentBalanceDetail";
  }
  protected:
  explicit PaymentBalanceDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaxFreeFieldNumber = 1,
    kSupplyFieldNumber = 2,
    kVatFieldNumber = 3,
    kServiceFieldNumber = 4,
  };
  // int32 tax_free = 1;
  void clear_tax_free();
  ::PROTOBUF_NAMESPACE_ID::int32 tax_free() const;
  void set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tax_free() const;
  void _internal_set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 supply = 2;
  void clear_supply();
  ::PROTOBUF_NAMESPACE_ID::int32 supply() const;
  void set_supply(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_supply() const;
  void _internal_set_supply(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vat = 3;
  void clear_vat();
  ::PROTOBUF_NAMESPACE_ID::int32 vat() const;
  void set_vat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vat() const;
  void _internal_set_vat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 service = 4;
  void clear_service();
  ::PROTOBUF_NAMESPACE_ID::int32 service() const;
  void set_service(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_service() const;
  void _internal_set_service(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentBalanceDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 tax_free_;
  ::PROTOBUF_NAMESPACE_ID::int32 supply_;
  ::PROTOBUF_NAMESPACE_ID::int32 vat_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentBalance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentBalance) */ {
 public:
  inline PaymentBalance() : PaymentBalance(nullptr) {}
  ~PaymentBalance() override;
  explicit constexpr PaymentBalance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentBalance(const PaymentBalance& from);
  PaymentBalance(PaymentBalance&& from) noexcept
    : PaymentBalance() {
    *this = ::std::move(from);
  }

  inline PaymentBalance& operator=(const PaymentBalance& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentBalance& operator=(PaymentBalance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentBalance& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentBalance* internal_default_instance() {
    return reinterpret_cast<const PaymentBalance*>(
               &_PaymentBalance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PaymentBalance& a, PaymentBalance& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentBalance* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentBalance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentBalance* New() const final {
    return new PaymentBalance();
  }

  PaymentBalance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentBalance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentBalance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentBalance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentBalance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentBalance";
  }
  protected:
  explicit PaymentBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoriesFieldNumber = 6,
    kCashReceiptFieldNumber = 2,
    kPrimaryFieldNumber = 3,
    kSecondaryFieldNumber = 4,
    kDiscountFieldNumber = 5,
    kAmountFieldNumber = 1,
  };
  // repeated .payment.PaymentBalanceHistory histories = 6;
  int histories_size() const;
  private:
  int _internal_histories_size() const;
  public:
  void clear_histories();
  ::payment::PaymentBalanceHistory* mutable_histories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::PaymentBalanceHistory >*
      mutable_histories();
  private:
  const ::payment::PaymentBalanceHistory& _internal_histories(int index) const;
  ::payment::PaymentBalanceHistory* _internal_add_histories();
  public:
  const ::payment::PaymentBalanceHistory& histories(int index) const;
  ::payment::PaymentBalanceHistory* add_histories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::PaymentBalanceHistory >&
      histories() const;

  // .payment.PaymentBalanceDetail cash_receipt = 2;
  bool has_cash_receipt() const;
  private:
  bool _internal_has_cash_receipt() const;
  public:
  void clear_cash_receipt();
  const ::payment::PaymentBalanceDetail& cash_receipt() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentBalanceDetail* release_cash_receipt();
  ::payment::PaymentBalanceDetail* mutable_cash_receipt();
  void set_allocated_cash_receipt(::payment::PaymentBalanceDetail* cash_receipt);
  private:
  const ::payment::PaymentBalanceDetail& _internal_cash_receipt() const;
  ::payment::PaymentBalanceDetail* _internal_mutable_cash_receipt();
  public:
  void unsafe_arena_set_allocated_cash_receipt(
      ::payment::PaymentBalanceDetail* cash_receipt);
  ::payment::PaymentBalanceDetail* unsafe_arena_release_cash_receipt();

  // .payment.PaymentBalanceDetail primary = 3;
  bool has_primary() const;
  private:
  bool _internal_has_primary() const;
  public:
  void clear_primary();
  const ::payment::PaymentBalanceDetail& primary() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentBalanceDetail* release_primary();
  ::payment::PaymentBalanceDetail* mutable_primary();
  void set_allocated_primary(::payment::PaymentBalanceDetail* primary);
  private:
  const ::payment::PaymentBalanceDetail& _internal_primary() const;
  ::payment::PaymentBalanceDetail* _internal_mutable_primary();
  public:
  void unsafe_arena_set_allocated_primary(
      ::payment::PaymentBalanceDetail* primary);
  ::payment::PaymentBalanceDetail* unsafe_arena_release_primary();

  // .payment.PaymentBalanceDetail secondary = 4;
  bool has_secondary() const;
  private:
  bool _internal_has_secondary() const;
  public:
  void clear_secondary();
  const ::payment::PaymentBalanceDetail& secondary() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentBalanceDetail* release_secondary();
  ::payment::PaymentBalanceDetail* mutable_secondary();
  void set_allocated_secondary(::payment::PaymentBalanceDetail* secondary);
  private:
  const ::payment::PaymentBalanceDetail& _internal_secondary() const;
  ::payment::PaymentBalanceDetail* _internal_mutable_secondary();
  public:
  void unsafe_arena_set_allocated_secondary(
      ::payment::PaymentBalanceDetail* secondary);
  ::payment::PaymentBalanceDetail* unsafe_arena_release_secondary();

  // .payment.PaymentBalanceDetail discount = 5;
  bool has_discount() const;
  private:
  bool _internal_has_discount() const;
  public:
  void clear_discount();
  const ::payment::PaymentBalanceDetail& discount() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentBalanceDetail* release_discount();
  ::payment::PaymentBalanceDetail* mutable_discount();
  void set_allocated_discount(::payment::PaymentBalanceDetail* discount);
  private:
  const ::payment::PaymentBalanceDetail& _internal_discount() const;
  ::payment::PaymentBalanceDetail* _internal_mutable_discount();
  public:
  void unsafe_arena_set_allocated_discount(
      ::payment::PaymentBalanceDetail* discount);
  ::payment::PaymentBalanceDetail* unsafe_arena_release_discount();

  // int32 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentBalance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::PaymentBalanceHistory > histories_;
  ::payment::PaymentBalanceDetail* cash_receipt_;
  ::payment::PaymentBalanceDetail* primary_;
  ::payment::PaymentBalanceDetail* secondary_;
  ::payment::PaymentBalanceDetail* discount_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentBalanceHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentBalanceHistory) */ {
 public:
  inline PaymentBalanceHistory() : PaymentBalanceHistory(nullptr) {}
  ~PaymentBalanceHistory() override;
  explicit constexpr PaymentBalanceHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentBalanceHistory(const PaymentBalanceHistory& from);
  PaymentBalanceHistory(PaymentBalanceHistory&& from) noexcept
    : PaymentBalanceHistory() {
    *this = ::std::move(from);
  }

  inline PaymentBalanceHistory& operator=(const PaymentBalanceHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentBalanceHistory& operator=(PaymentBalanceHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentBalanceHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentBalanceHistory* internal_default_instance() {
    return reinterpret_cast<const PaymentBalanceHistory*>(
               &_PaymentBalanceHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PaymentBalanceHistory& a, PaymentBalanceHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentBalanceHistory* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentBalanceHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentBalanceHistory* New() const final {
    return new PaymentBalanceHistory();
  }

  PaymentBalanceHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentBalanceHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentBalanceHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentBalanceHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentBalanceHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentBalanceHistory";
  }
  protected:
  explicit PaymentBalanceHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCashReceiptFieldNumber = 1,
    kPrimaryFieldNumber = 2,
    kSecondaryFieldNumber = 3,
    kDiscountFieldNumber = 4,
    kCreatedFieldNumber = 5,
  };
  // .payment.PaymentBalanceDetail cash_receipt = 1;
  bool has_cash_receipt() const;
  private:
  bool _internal_has_cash_receipt() const;
  public:
  void clear_cash_receipt();
  const ::payment::PaymentBalanceDetail& cash_receipt() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentBalanceDetail* release_cash_receipt();
  ::payment::PaymentBalanceDetail* mutable_cash_receipt();
  void set_allocated_cash_receipt(::payment::PaymentBalanceDetail* cash_receipt);
  private:
  const ::payment::PaymentBalanceDetail& _internal_cash_receipt() const;
  ::payment::PaymentBalanceDetail* _internal_mutable_cash_receipt();
  public:
  void unsafe_arena_set_allocated_cash_receipt(
      ::payment::PaymentBalanceDetail* cash_receipt);
  ::payment::PaymentBalanceDetail* unsafe_arena_release_cash_receipt();

  // .payment.PaymentBalanceDetail primary = 2;
  bool has_primary() const;
  private:
  bool _internal_has_primary() const;
  public:
  void clear_primary();
  const ::payment::PaymentBalanceDetail& primary() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentBalanceDetail* release_primary();
  ::payment::PaymentBalanceDetail* mutable_primary();
  void set_allocated_primary(::payment::PaymentBalanceDetail* primary);
  private:
  const ::payment::PaymentBalanceDetail& _internal_primary() const;
  ::payment::PaymentBalanceDetail* _internal_mutable_primary();
  public:
  void unsafe_arena_set_allocated_primary(
      ::payment::PaymentBalanceDetail* primary);
  ::payment::PaymentBalanceDetail* unsafe_arena_release_primary();

  // .payment.PaymentBalanceDetail secondary = 3;
  bool has_secondary() const;
  private:
  bool _internal_has_secondary() const;
  public:
  void clear_secondary();
  const ::payment::PaymentBalanceDetail& secondary() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentBalanceDetail* release_secondary();
  ::payment::PaymentBalanceDetail* mutable_secondary();
  void set_allocated_secondary(::payment::PaymentBalanceDetail* secondary);
  private:
  const ::payment::PaymentBalanceDetail& _internal_secondary() const;
  ::payment::PaymentBalanceDetail* _internal_mutable_secondary();
  public:
  void unsafe_arena_set_allocated_secondary(
      ::payment::PaymentBalanceDetail* secondary);
  ::payment::PaymentBalanceDetail* unsafe_arena_release_secondary();

  // .payment.PaymentBalanceDetail discount = 4;
  bool has_discount() const;
  private:
  bool _internal_has_discount() const;
  public:
  void clear_discount();
  const ::payment::PaymentBalanceDetail& discount() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentBalanceDetail* release_discount();
  ::payment::PaymentBalanceDetail* mutable_discount();
  void set_allocated_discount(::payment::PaymentBalanceDetail* discount);
  private:
  const ::payment::PaymentBalanceDetail& _internal_discount() const;
  ::payment::PaymentBalanceDetail* _internal_mutable_discount();
  public:
  void unsafe_arena_set_allocated_discount(
      ::payment::PaymentBalanceDetail* discount);
  ::payment::PaymentBalanceDetail* unsafe_arena_release_discount();

  // int32 created = 5;
  void clear_created();
  ::PROTOBUF_NAMESPACE_ID::int32 created() const;
  void set_created(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_created() const;
  void _internal_set_created(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentBalanceHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::payment::PaymentBalanceDetail* cash_receipt_;
  ::payment::PaymentBalanceDetail* primary_;
  ::payment::PaymentBalanceDetail* secondary_;
  ::payment::PaymentBalanceDetail* discount_;
  ::PROTOBUF_NAMESPACE_ID::int32 created_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentRequest) */ {
 public:
  inline PaymentRequest() : PaymentRequest(nullptr) {}
  ~PaymentRequest() override;
  explicit constexpr PaymentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentRequest(const PaymentRequest& from);
  PaymentRequest(PaymentRequest&& from) noexcept
    : PaymentRequest() {
    *this = ::std::move(from);
  }

  inline PaymentRequest& operator=(const PaymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentRequest& operator=(PaymentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentRequest* internal_default_instance() {
    return reinterpret_cast<const PaymentRequest*>(
               &_PaymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PaymentRequest& a, PaymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentRequest* New() const final {
    return new PaymentRequest();
  }

  PaymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentRequest";
  }
  protected:
  explicit PaymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpUidFieldNumber = 1,
  };
  // string imp_uid = 1;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imp_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imp_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentResponse) */ {
 public:
  inline PaymentResponse() : PaymentResponse(nullptr) {}
  ~PaymentResponse() override;
  explicit constexpr PaymentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentResponse(const PaymentResponse& from);
  PaymentResponse(PaymentResponse&& from) noexcept
    : PaymentResponse() {
    *this = ::std::move(from);
  }

  inline PaymentResponse& operator=(const PaymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentResponse& operator=(PaymentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentResponse* internal_default_instance() {
    return reinterpret_cast<const PaymentResponse*>(
               &_PaymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PaymentResponse& a, PaymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentResponse* New() const final {
    return new PaymentResponse();
  }

  PaymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentResponse";
  }
  protected:
  explicit PaymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .payment.Payment response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::payment::Payment& response() const;
  PROTOBUF_MUST_USE_RESULT ::payment::Payment* release_response();
  ::payment::Payment* mutable_response();
  void set_allocated_response(::payment::Payment* response);
  private:
  const ::payment::Payment& _internal_response() const;
  ::payment::Payment* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::payment::Payment* response);
  ::payment::Payment* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::payment::Payment* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentsRequest) */ {
 public:
  inline PaymentsRequest() : PaymentsRequest(nullptr) {}
  ~PaymentsRequest() override;
  explicit constexpr PaymentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentsRequest(const PaymentsRequest& from);
  PaymentsRequest(PaymentsRequest&& from) noexcept
    : PaymentsRequest() {
    *this = ::std::move(from);
  }

  inline PaymentsRequest& operator=(const PaymentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentsRequest& operator=(PaymentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentsRequest* internal_default_instance() {
    return reinterpret_cast<const PaymentsRequest*>(
               &_PaymentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PaymentsRequest& a, PaymentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentsRequest* New() const final {
    return new PaymentsRequest();
  }

  PaymentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentsRequest";
  }
  protected:
  explicit PaymentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpUidFieldNumber = 1,
  };
  // repeated string imp_uid = 1;
  int imp_uid_size() const;
  private:
  int _internal_imp_uid_size() const;
  public:
  void clear_imp_uid();
  const std::string& imp_uid(int index) const;
  std::string* mutable_imp_uid(int index);
  void set_imp_uid(int index, const std::string& value);
  void set_imp_uid(int index, std::string&& value);
  void set_imp_uid(int index, const char* value);
  void set_imp_uid(int index, const char* value, size_t size);
  std::string* add_imp_uid();
  void add_imp_uid(const std::string& value);
  void add_imp_uid(std::string&& value);
  void add_imp_uid(const char* value);
  void add_imp_uid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& imp_uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_imp_uid();
  private:
  const std::string& _internal_imp_uid(int index) const;
  std::string* _internal_add_imp_uid();
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> imp_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentsResponse) */ {
 public:
  inline PaymentsResponse() : PaymentsResponse(nullptr) {}
  ~PaymentsResponse() override;
  explicit constexpr PaymentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentsResponse(const PaymentsResponse& from);
  PaymentsResponse(PaymentsResponse&& from) noexcept
    : PaymentsResponse() {
    *this = ::std::move(from);
  }

  inline PaymentsResponse& operator=(const PaymentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentsResponse& operator=(PaymentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentsResponse* internal_default_instance() {
    return reinterpret_cast<const PaymentsResponse*>(
               &_PaymentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PaymentsResponse& a, PaymentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentsResponse* New() const final {
    return new PaymentsResponse();
  }

  PaymentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentsResponse";
  }
  protected:
  explicit PaymentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .payment.Payment response = 3;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::payment::Payment* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >*
      mutable_response();
  private:
  const ::payment::Payment& _internal_response(int index) const;
  ::payment::Payment* _internal_add_response();
  public:
  const ::payment::Payment& response(int index) const;
  ::payment::Payment* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >&
      response() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment > response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentsMerchantUidRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentsMerchantUidRequest) */ {
 public:
  inline PaymentsMerchantUidRequest() : PaymentsMerchantUidRequest(nullptr) {}
  ~PaymentsMerchantUidRequest() override;
  explicit constexpr PaymentsMerchantUidRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentsMerchantUidRequest(const PaymentsMerchantUidRequest& from);
  PaymentsMerchantUidRequest(PaymentsMerchantUidRequest&& from) noexcept
    : PaymentsMerchantUidRequest() {
    *this = ::std::move(from);
  }

  inline PaymentsMerchantUidRequest& operator=(const PaymentsMerchantUidRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentsMerchantUidRequest& operator=(PaymentsMerchantUidRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentsMerchantUidRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentsMerchantUidRequest* internal_default_instance() {
    return reinterpret_cast<const PaymentsMerchantUidRequest*>(
               &_PaymentsMerchantUidRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PaymentsMerchantUidRequest& a, PaymentsMerchantUidRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentsMerchantUidRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentsMerchantUidRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentsMerchantUidRequest* New() const final {
    return new PaymentsMerchantUidRequest();
  }

  PaymentsMerchantUidRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentsMerchantUidRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentsMerchantUidRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentsMerchantUidRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentsMerchantUidRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentsMerchantUidRequest";
  }
  protected:
  explicit PaymentsMerchantUidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerchantUidFieldNumber = 1,
    kStatusFieldNumber = 2,
    kSortingFieldNumber = 4,
    kPageFieldNumber = 3,
  };
  // string merchant_uid = 1;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string sorting = 4;
  void clear_sorting();
  const std::string& sorting() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sorting(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sorting();
  PROTOBUF_MUST_USE_RESULT std::string* release_sorting();
  void set_allocated_sorting(std::string* sorting);
  private:
  const std::string& _internal_sorting() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sorting(const std::string& value);
  std::string* _internal_mutable_sorting();
  public:

  // int32 page = 3;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentsMerchantUidRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sorting_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentsMerchantUidResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentsMerchantUidResponse) */ {
 public:
  inline PaymentsMerchantUidResponse() : PaymentsMerchantUidResponse(nullptr) {}
  ~PaymentsMerchantUidResponse() override;
  explicit constexpr PaymentsMerchantUidResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentsMerchantUidResponse(const PaymentsMerchantUidResponse& from);
  PaymentsMerchantUidResponse(PaymentsMerchantUidResponse&& from) noexcept
    : PaymentsMerchantUidResponse() {
    *this = ::std::move(from);
  }

  inline PaymentsMerchantUidResponse& operator=(const PaymentsMerchantUidResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentsMerchantUidResponse& operator=(PaymentsMerchantUidResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentsMerchantUidResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentsMerchantUidResponse* internal_default_instance() {
    return reinterpret_cast<const PaymentsMerchantUidResponse*>(
               &_PaymentsMerchantUidResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PaymentsMerchantUidResponse& a, PaymentsMerchantUidResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentsMerchantUidResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentsMerchantUidResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentsMerchantUidResponse* New() const final {
    return new PaymentsMerchantUidResponse();
  }

  PaymentsMerchantUidResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentsMerchantUidResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentsMerchantUidResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentsMerchantUidResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentsMerchantUidResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentsMerchantUidResponse";
  }
  protected:
  explicit PaymentsMerchantUidResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .payment.PaymentPage response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::payment::PaymentPage& response() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentPage* release_response();
  ::payment::PaymentPage* mutable_response();
  void set_allocated_response(::payment::PaymentPage* response);
  private:
  const ::payment::PaymentPage& _internal_response() const;
  ::payment::PaymentPage* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::payment::PaymentPage* response);
  ::payment::PaymentPage* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentsMerchantUidResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::payment::PaymentPage* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentStatusRequest) */ {
 public:
  inline PaymentStatusRequest() : PaymentStatusRequest(nullptr) {}
  ~PaymentStatusRequest() override;
  explicit constexpr PaymentStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentStatusRequest(const PaymentStatusRequest& from);
  PaymentStatusRequest(PaymentStatusRequest&& from) noexcept
    : PaymentStatusRequest() {
    *this = ::std::move(from);
  }

  inline PaymentStatusRequest& operator=(const PaymentStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentStatusRequest& operator=(PaymentStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentStatusRequest* internal_default_instance() {
    return reinterpret_cast<const PaymentStatusRequest*>(
               &_PaymentStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PaymentStatusRequest& a, PaymentStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentStatusRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentStatusRequest* New() const final {
    return new PaymentStatusRequest();
  }

  PaymentStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentStatusRequest";
  }
  protected:
  explicit PaymentStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kSortingFieldNumber = 6,
    kPageFieldNumber = 2,
    kLimitFieldNumber = 3,
    kFromFieldNumber = 4,
    kToFieldNumber = 5,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string sorting = 6;
  void clear_sorting();
  const std::string& sorting() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sorting(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sorting();
  PROTOBUF_MUST_USE_RESULT std::string* release_sorting();
  void set_allocated_sorting(std::string* sorting);
  private:
  const std::string& _internal_sorting() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sorting(const std::string& value);
  std::string* _internal_mutable_sorting();
  public:

  // int32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 from = 4;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to = 5;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sorting_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentStatusResponse) */ {
 public:
  inline PaymentStatusResponse() : PaymentStatusResponse(nullptr) {}
  ~PaymentStatusResponse() override;
  explicit constexpr PaymentStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentStatusResponse(const PaymentStatusResponse& from);
  PaymentStatusResponse(PaymentStatusResponse&& from) noexcept
    : PaymentStatusResponse() {
    *this = ::std::move(from);
  }

  inline PaymentStatusResponse& operator=(const PaymentStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentStatusResponse& operator=(PaymentStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentStatusResponse* internal_default_instance() {
    return reinterpret_cast<const PaymentStatusResponse*>(
               &_PaymentStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PaymentStatusResponse& a, PaymentStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentStatusResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentStatusResponse* New() const final {
    return new PaymentStatusResponse();
  }

  PaymentStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentStatusResponse";
  }
  protected:
  explicit PaymentStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .payment.PaymentPage response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::payment::PaymentPage& response() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentPage* release_response();
  ::payment::PaymentPage* mutable_response();
  void set_allocated_response(::payment::PaymentPage* response);
  private:
  const ::payment::PaymentPage& _internal_response() const;
  ::payment::PaymentPage* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::payment::PaymentPage* response);
  ::payment::PaymentPage* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::payment::PaymentPage* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentMerchantUidRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentMerchantUidRequest) */ {
 public:
  inline PaymentMerchantUidRequest() : PaymentMerchantUidRequest(nullptr) {}
  ~PaymentMerchantUidRequest() override;
  explicit constexpr PaymentMerchantUidRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentMerchantUidRequest(const PaymentMerchantUidRequest& from);
  PaymentMerchantUidRequest(PaymentMerchantUidRequest&& from) noexcept
    : PaymentMerchantUidRequest() {
    *this = ::std::move(from);
  }

  inline PaymentMerchantUidRequest& operator=(const PaymentMerchantUidRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentMerchantUidRequest& operator=(PaymentMerchantUidRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentMerchantUidRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentMerchantUidRequest* internal_default_instance() {
    return reinterpret_cast<const PaymentMerchantUidRequest*>(
               &_PaymentMerchantUidRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PaymentMerchantUidRequest& a, PaymentMerchantUidRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentMerchantUidRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentMerchantUidRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentMerchantUidRequest* New() const final {
    return new PaymentMerchantUidRequest();
  }

  PaymentMerchantUidRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentMerchantUidRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentMerchantUidRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentMerchantUidRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentMerchantUidRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentMerchantUidRequest";
  }
  protected:
  explicit PaymentMerchantUidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerchantUidFieldNumber = 1,
    kStatusFieldNumber = 2,
    kSortingFieldNumber = 3,
  };
  // string merchant_uid = 1;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string sorting = 3;
  void clear_sorting();
  const std::string& sorting() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sorting(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sorting();
  PROTOBUF_MUST_USE_RESULT std::string* release_sorting();
  void set_allocated_sorting(std::string* sorting);
  private:
  const std::string& _internal_sorting() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sorting(const std::string& value);
  std::string* _internal_mutable_sorting();
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentMerchantUidRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sorting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentMerchantUidResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentMerchantUidResponse) */ {
 public:
  inline PaymentMerchantUidResponse() : PaymentMerchantUidResponse(nullptr) {}
  ~PaymentMerchantUidResponse() override;
  explicit constexpr PaymentMerchantUidResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentMerchantUidResponse(const PaymentMerchantUidResponse& from);
  PaymentMerchantUidResponse(PaymentMerchantUidResponse&& from) noexcept
    : PaymentMerchantUidResponse() {
    *this = ::std::move(from);
  }

  inline PaymentMerchantUidResponse& operator=(const PaymentMerchantUidResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentMerchantUidResponse& operator=(PaymentMerchantUidResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentMerchantUidResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentMerchantUidResponse* internal_default_instance() {
    return reinterpret_cast<const PaymentMerchantUidResponse*>(
               &_PaymentMerchantUidResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PaymentMerchantUidResponse& a, PaymentMerchantUidResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentMerchantUidResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentMerchantUidResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentMerchantUidResponse* New() const final {
    return new PaymentMerchantUidResponse();
  }

  PaymentMerchantUidResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentMerchantUidResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentMerchantUidResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentMerchantUidResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentMerchantUidResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentMerchantUidResponse";
  }
  protected:
  explicit PaymentMerchantUidResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .payment.Payment response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::payment::Payment& response() const;
  PROTOBUF_MUST_USE_RESULT ::payment::Payment* release_response();
  ::payment::Payment* mutable_response();
  void set_allocated_response(::payment::Payment* response);
  private:
  const ::payment::Payment& _internal_response() const;
  ::payment::Payment* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::payment::Payment* response);
  ::payment::Payment* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentMerchantUidResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::payment::Payment* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentCancelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentCancelRequest) */ {
 public:
  inline PaymentCancelRequest() : PaymentCancelRequest(nullptr) {}
  ~PaymentCancelRequest() override;
  explicit constexpr PaymentCancelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentCancelRequest(const PaymentCancelRequest& from);
  PaymentCancelRequest(PaymentCancelRequest&& from) noexcept
    : PaymentCancelRequest() {
    *this = ::std::move(from);
  }

  inline PaymentCancelRequest& operator=(const PaymentCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentCancelRequest& operator=(PaymentCancelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentCancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentCancelRequest* internal_default_instance() {
    return reinterpret_cast<const PaymentCancelRequest*>(
               &_PaymentCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PaymentCancelRequest& a, PaymentCancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentCancelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentCancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentCancelRequest* New() const final {
    return new PaymentCancelRequest();
  }

  PaymentCancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentCancelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentCancelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentCancelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentCancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentCancelRequest";
  }
  protected:
  explicit PaymentCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpUidFieldNumber = 1,
    kMerchantUidFieldNumber = 2,
    kReasonFieldNumber = 6,
    kRefundHolderFieldNumber = 7,
    kRefundBankFieldNumber = 8,
    kRefundAccountFieldNumber = 9,
    kAmountFieldNumber = 3,
    kTaxFreeFieldNumber = 4,
    kChecksumFieldNumber = 5,
  };
  // string imp_uid = 1;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imp_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imp_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // string merchant_uid = 2;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string reason = 6;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string refund_holder = 7;
  void clear_refund_holder();
  const std::string& refund_holder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_refund_holder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_refund_holder();
  PROTOBUF_MUST_USE_RESULT std::string* release_refund_holder();
  void set_allocated_refund_holder(std::string* refund_holder);
  private:
  const std::string& _internal_refund_holder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refund_holder(const std::string& value);
  std::string* _internal_mutable_refund_holder();
  public:

  // string refund_bank = 8;
  void clear_refund_bank();
  const std::string& refund_bank() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_refund_bank(ArgT0&& arg0, ArgT... args);
  std::string* mutable_refund_bank();
  PROTOBUF_MUST_USE_RESULT std::string* release_refund_bank();
  void set_allocated_refund_bank(std::string* refund_bank);
  private:
  const std::string& _internal_refund_bank() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refund_bank(const std::string& value);
  std::string* _internal_mutable_refund_bank();
  public:

  // string refund_account = 9;
  void clear_refund_account();
  const std::string& refund_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_refund_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_refund_account();
  PROTOBUF_MUST_USE_RESULT std::string* release_refund_account();
  void set_allocated_refund_account(std::string* refund_account);
  private:
  const std::string& _internal_refund_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refund_account(const std::string& value);
  std::string* _internal_mutable_refund_account();
  public:

  // double amount = 3;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // double tax_free = 4;
  void clear_tax_free();
  double tax_free() const;
  void set_tax_free(double value);
  private:
  double _internal_tax_free() const;
  void _internal_set_tax_free(double value);
  public:

  // double checksum = 5;
  void clear_checksum();
  double checksum() const;
  void set_checksum(double value);
  private:
  double _internal_checksum() const;
  void _internal_set_checksum(double value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentCancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refund_holder_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refund_bank_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refund_account_;
  double amount_;
  double tax_free_;
  double checksum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentCancelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentCancelResponse) */ {
 public:
  inline PaymentCancelResponse() : PaymentCancelResponse(nullptr) {}
  ~PaymentCancelResponse() override;
  explicit constexpr PaymentCancelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentCancelResponse(const PaymentCancelResponse& from);
  PaymentCancelResponse(PaymentCancelResponse&& from) noexcept
    : PaymentCancelResponse() {
    *this = ::std::move(from);
  }

  inline PaymentCancelResponse& operator=(const PaymentCancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentCancelResponse& operator=(PaymentCancelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentCancelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentCancelResponse* internal_default_instance() {
    return reinterpret_cast<const PaymentCancelResponse*>(
               &_PaymentCancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PaymentCancelResponse& a, PaymentCancelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentCancelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentCancelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentCancelResponse* New() const final {
    return new PaymentCancelResponse();
  }

  PaymentCancelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentCancelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentCancelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentCancelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentCancelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentCancelResponse";
  }
  protected:
  explicit PaymentCancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .payment.Payment response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::payment::Payment& response() const;
  PROTOBUF_MUST_USE_RESULT ::payment::Payment* release_response();
  ::payment::Payment* mutable_response();
  void set_allocated_response(::payment::Payment* response);
  private:
  const ::payment::Payment& _internal_response() const;
  ::payment::Payment* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::payment::Payment* response);
  ::payment::Payment* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentCancelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::payment::Payment* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentBalanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentBalanceRequest) */ {
 public:
  inline PaymentBalanceRequest() : PaymentBalanceRequest(nullptr) {}
  ~PaymentBalanceRequest() override;
  explicit constexpr PaymentBalanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentBalanceRequest(const PaymentBalanceRequest& from);
  PaymentBalanceRequest(PaymentBalanceRequest&& from) noexcept
    : PaymentBalanceRequest() {
    *this = ::std::move(from);
  }

  inline PaymentBalanceRequest& operator=(const PaymentBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentBalanceRequest& operator=(PaymentBalanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentBalanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const PaymentBalanceRequest*>(
               &_PaymentBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PaymentBalanceRequest& a, PaymentBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentBalanceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentBalanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentBalanceRequest* New() const final {
    return new PaymentBalanceRequest();
  }

  PaymentBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentBalanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentBalanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentBalanceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentBalanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentBalanceRequest";
  }
  protected:
  explicit PaymentBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpUidFieldNumber = 1,
  };
  // string imp_uid = 1;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imp_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imp_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentBalanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentBalanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentBalanceResponse) */ {
 public:
  inline PaymentBalanceResponse() : PaymentBalanceResponse(nullptr) {}
  ~PaymentBalanceResponse() override;
  explicit constexpr PaymentBalanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentBalanceResponse(const PaymentBalanceResponse& from);
  PaymentBalanceResponse(PaymentBalanceResponse&& from) noexcept
    : PaymentBalanceResponse() {
    *this = ::std::move(from);
  }

  inline PaymentBalanceResponse& operator=(const PaymentBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentBalanceResponse& operator=(PaymentBalanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentBalanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const PaymentBalanceResponse*>(
               &_PaymentBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PaymentBalanceResponse& a, PaymentBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentBalanceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentBalanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentBalanceResponse* New() const final {
    return new PaymentBalanceResponse();
  }

  PaymentBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentBalanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentBalanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentBalanceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentBalanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentBalanceResponse";
  }
  protected:
  explicit PaymentBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .payment.PaymentBalance response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::payment::PaymentBalance& response() const;
  PROTOBUF_MUST_USE_RESULT ::payment::PaymentBalance* release_response();
  ::payment::PaymentBalance* mutable_response();
  void set_allocated_response(::payment::PaymentBalance* response);
  private:
  const ::payment::PaymentBalance& _internal_response() const;
  ::payment::PaymentBalance* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::payment::PaymentBalance* response);
  ::payment::PaymentBalance* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentBalanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::payment::PaymentBalance* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class Prepare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.Prepare) */ {
 public:
  inline Prepare() : Prepare(nullptr) {}
  ~Prepare() override;
  explicit constexpr Prepare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Prepare(const Prepare& from);
  Prepare(Prepare&& from) noexcept
    : Prepare() {
    *this = ::std::move(from);
  }

  inline Prepare& operator=(const Prepare& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prepare& operator=(Prepare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Prepare& default_instance() {
    return *internal_default_instance();
  }
  static inline const Prepare* internal_default_instance() {
    return reinterpret_cast<const Prepare*>(
               &_Prepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Prepare& a, Prepare& b) {
    a.Swap(&b);
  }
  inline void Swap(Prepare* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prepare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prepare* New() const final {
    return new Prepare();
  }

  Prepare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prepare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Prepare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Prepare& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prepare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.Prepare";
  }
  protected:
  explicit Prepare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerchantUidFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string merchant_uid = 1;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // int32 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.Prepare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentPrepareRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentPrepareRequest) */ {
 public:
  inline PaymentPrepareRequest() : PaymentPrepareRequest(nullptr) {}
  ~PaymentPrepareRequest() override;
  explicit constexpr PaymentPrepareRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentPrepareRequest(const PaymentPrepareRequest& from);
  PaymentPrepareRequest(PaymentPrepareRequest&& from) noexcept
    : PaymentPrepareRequest() {
    *this = ::std::move(from);
  }

  inline PaymentPrepareRequest& operator=(const PaymentPrepareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentPrepareRequest& operator=(PaymentPrepareRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentPrepareRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentPrepareRequest* internal_default_instance() {
    return reinterpret_cast<const PaymentPrepareRequest*>(
               &_PaymentPrepareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PaymentPrepareRequest& a, PaymentPrepareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentPrepareRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentPrepareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentPrepareRequest* New() const final {
    return new PaymentPrepareRequest();
  }

  PaymentPrepareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentPrepareRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentPrepareRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentPrepareRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentPrepareRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentPrepareRequest";
  }
  protected:
  explicit PaymentPrepareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerchantUidFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string merchant_uid = 1;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // double amount = 2;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentPrepareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  double amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentPrepareResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentPrepareResponse) */ {
 public:
  inline PaymentPrepareResponse() : PaymentPrepareResponse(nullptr) {}
  ~PaymentPrepareResponse() override;
  explicit constexpr PaymentPrepareResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentPrepareResponse(const PaymentPrepareResponse& from);
  PaymentPrepareResponse(PaymentPrepareResponse&& from) noexcept
    : PaymentPrepareResponse() {
    *this = ::std::move(from);
  }

  inline PaymentPrepareResponse& operator=(const PaymentPrepareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentPrepareResponse& operator=(PaymentPrepareResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentPrepareResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentPrepareResponse* internal_default_instance() {
    return reinterpret_cast<const PaymentPrepareResponse*>(
               &_PaymentPrepareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PaymentPrepareResponse& a, PaymentPrepareResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentPrepareResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentPrepareResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentPrepareResponse* New() const final {
    return new PaymentPrepareResponse();
  }

  PaymentPrepareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentPrepareResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentPrepareResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentPrepareResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentPrepareResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentPrepareResponse";
  }
  protected:
  explicit PaymentPrepareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .payment.Prepare response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::payment::Prepare& response() const;
  PROTOBUF_MUST_USE_RESULT ::payment::Prepare* release_response();
  ::payment::Prepare* mutable_response();
  void set_allocated_response(::payment::Prepare* response);
  private:
  const ::payment::Prepare& _internal_response() const;
  ::payment::Prepare* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::payment::Prepare* response);
  ::payment::Prepare* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentPrepareResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::payment::Prepare* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class PaymentGetPrepareRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.PaymentGetPrepareRequest) */ {
 public:
  inline PaymentGetPrepareRequest() : PaymentGetPrepareRequest(nullptr) {}
  ~PaymentGetPrepareRequest() override;
  explicit constexpr PaymentGetPrepareRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentGetPrepareRequest(const PaymentGetPrepareRequest& from);
  PaymentGetPrepareRequest(PaymentGetPrepareRequest&& from) noexcept
    : PaymentGetPrepareRequest() {
    *this = ::std::move(from);
  }

  inline PaymentGetPrepareRequest& operator=(const PaymentGetPrepareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentGetPrepareRequest& operator=(PaymentGetPrepareRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentGetPrepareRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentGetPrepareRequest* internal_default_instance() {
    return reinterpret_cast<const PaymentGetPrepareRequest*>(
               &_PaymentGetPrepareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PaymentGetPrepareRequest& a, PaymentGetPrepareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentGetPrepareRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentGetPrepareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentGetPrepareRequest* New() const final {
    return new PaymentGetPrepareRequest();
  }

  PaymentGetPrepareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentGetPrepareRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentGetPrepareRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentGetPrepareRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentGetPrepareRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.PaymentGetPrepareRequest";
  }
  protected:
  explicit PaymentGetPrepareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerchantUidFieldNumber = 1,
  };
  // string merchant_uid = 1;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merchant_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merchant_uid();
  PROTOBUF_MUST_USE_RESULT std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // @@protoc_insertion_point(class_scope:payment.PaymentGetPrepareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// -------------------------------------------------------------------

class Promotion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:payment.Promotion) */ {
 public:
  inline Promotion() : Promotion(nullptr) {}
  ~Promotion() override;
  explicit constexpr Promotion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Promotion(const Promotion& from);
  Promotion(Promotion&& from) noexcept
    : Promotion() {
    *this = ::std::move(from);
  }

  inline Promotion& operator=(const Promotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Promotion& operator=(Promotion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Promotion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Promotion* internal_default_instance() {
    return reinterpret_cast<const Promotion*>(
               &_Promotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Promotion& a, Promotion& b) {
    a.Swap(&b);
  }
  inline void Swap(Promotion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Promotion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Promotion* New() const final {
    return new Promotion();
  }

  Promotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Promotion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Promotion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Promotion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Promotion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "payment.Promotion";
  }
  protected:
  explicit Promotion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDiscountFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 discount = 2;
  void clear_discount();
  ::PROTOBUF_NAMESPACE_ID::int32 discount() const;
  void set_discount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_discount() const;
  void _internal_set_discount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:payment.Promotion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 discount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fpayment_2fpayment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Payment

// int32 amount = 1;
inline void Payment::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::amount() const {
  // @@protoc_insertion_point(field_get:payment.Payment.amount)
  return _internal_amount();
}
inline void Payment::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void Payment::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:payment.Payment.amount)
}

// string apply_num = 2;
inline void Payment::clear_apply_num() {
  apply_num_.ClearToEmpty();
}
inline const std::string& Payment::apply_num() const {
  // @@protoc_insertion_point(field_get:payment.Payment.apply_num)
  return _internal_apply_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_apply_num(ArgT0&& arg0, ArgT... args) {
 
 apply_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.apply_num)
}
inline std::string* Payment::mutable_apply_num() {
  std::string* _s = _internal_mutable_apply_num();
  // @@protoc_insertion_point(field_mutable:payment.Payment.apply_num)
  return _s;
}
inline const std::string& Payment::_internal_apply_num() const {
  return apply_num_.Get();
}
inline void Payment::_internal_set_apply_num(const std::string& value) {
  
  apply_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_apply_num() {
  
  return apply_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_apply_num() {
  // @@protoc_insertion_point(field_release:payment.Payment.apply_num)
  return apply_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_apply_num(std::string* apply_num) {
  if (apply_num != nullptr) {
    
  } else {
    
  }
  apply_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apply_num,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.apply_num)
}

// int32 bank_code = 3;
inline void Payment::clear_bank_code() {
  bank_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_bank_code() const {
  return bank_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::bank_code() const {
  // @@protoc_insertion_point(field_get:payment.Payment.bank_code)
  return _internal_bank_code();
}
inline void Payment::_internal_set_bank_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bank_code_ = value;
}
inline void Payment::set_bank_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bank_code(value);
  // @@protoc_insertion_point(field_set:payment.Payment.bank_code)
}

// string bank_name = 4;
inline void Payment::clear_bank_name() {
  bank_name_.ClearToEmpty();
}
inline const std::string& Payment::bank_name() const {
  // @@protoc_insertion_point(field_get:payment.Payment.bank_name)
  return _internal_bank_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_bank_name(ArgT0&& arg0, ArgT... args) {
 
 bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.bank_name)
}
inline std::string* Payment::mutable_bank_name() {
  std::string* _s = _internal_mutable_bank_name();
  // @@protoc_insertion_point(field_mutable:payment.Payment.bank_name)
  return _s;
}
inline const std::string& Payment::_internal_bank_name() const {
  return bank_name_.Get();
}
inline void Payment::_internal_set_bank_name(const std::string& value) {
  
  bank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_bank_name() {
  
  return bank_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_bank_name() {
  // @@protoc_insertion_point(field_release:payment.Payment.bank_name)
  return bank_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_bank_name(std::string* bank_name) {
  if (bank_name != nullptr) {
    
  } else {
    
  }
  bank_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.bank_name)
}

// string buyer_addr = 5;
inline void Payment::clear_buyer_addr() {
  buyer_addr_.ClearToEmpty();
}
inline const std::string& Payment::buyer_addr() const {
  // @@protoc_insertion_point(field_get:payment.Payment.buyer_addr)
  return _internal_buyer_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_buyer_addr(ArgT0&& arg0, ArgT... args) {
 
 buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.buyer_addr)
}
inline std::string* Payment::mutable_buyer_addr() {
  std::string* _s = _internal_mutable_buyer_addr();
  // @@protoc_insertion_point(field_mutable:payment.Payment.buyer_addr)
  return _s;
}
inline const std::string& Payment::_internal_buyer_addr() const {
  return buyer_addr_.Get();
}
inline void Payment::_internal_set_buyer_addr(const std::string& value) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_buyer_addr() {
  
  return buyer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_buyer_addr() {
  // @@protoc_insertion_point(field_release:payment.Payment.buyer_addr)
  return buyer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_buyer_addr(std::string* buyer_addr) {
  if (buyer_addr != nullptr) {
    
  } else {
    
  }
  buyer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.buyer_addr)
}

// string buyer_email = 6;
inline void Payment::clear_buyer_email() {
  buyer_email_.ClearToEmpty();
}
inline const std::string& Payment::buyer_email() const {
  // @@protoc_insertion_point(field_get:payment.Payment.buyer_email)
  return _internal_buyer_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_buyer_email(ArgT0&& arg0, ArgT... args) {
 
 buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.buyer_email)
}
inline std::string* Payment::mutable_buyer_email() {
  std::string* _s = _internal_mutable_buyer_email();
  // @@protoc_insertion_point(field_mutable:payment.Payment.buyer_email)
  return _s;
}
inline const std::string& Payment::_internal_buyer_email() const {
  return buyer_email_.Get();
}
inline void Payment::_internal_set_buyer_email(const std::string& value) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_buyer_email() {
  
  return buyer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_buyer_email() {
  // @@protoc_insertion_point(field_release:payment.Payment.buyer_email)
  return buyer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_buyer_email(std::string* buyer_email) {
  if (buyer_email != nullptr) {
    
  } else {
    
  }
  buyer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.buyer_email)
}

// string buyer_name = 7;
inline void Payment::clear_buyer_name() {
  buyer_name_.ClearToEmpty();
}
inline const std::string& Payment::buyer_name() const {
  // @@protoc_insertion_point(field_get:payment.Payment.buyer_name)
  return _internal_buyer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_buyer_name(ArgT0&& arg0, ArgT... args) {
 
 buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.buyer_name)
}
inline std::string* Payment::mutable_buyer_name() {
  std::string* _s = _internal_mutable_buyer_name();
  // @@protoc_insertion_point(field_mutable:payment.Payment.buyer_name)
  return _s;
}
inline const std::string& Payment::_internal_buyer_name() const {
  return buyer_name_.Get();
}
inline void Payment::_internal_set_buyer_name(const std::string& value) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_buyer_name() {
  
  return buyer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_buyer_name() {
  // @@protoc_insertion_point(field_release:payment.Payment.buyer_name)
  return buyer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_buyer_name(std::string* buyer_name) {
  if (buyer_name != nullptr) {
    
  } else {
    
  }
  buyer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.buyer_name)
}

// string buyer_postcode = 8;
inline void Payment::clear_buyer_postcode() {
  buyer_postcode_.ClearToEmpty();
}
inline const std::string& Payment::buyer_postcode() const {
  // @@protoc_insertion_point(field_get:payment.Payment.buyer_postcode)
  return _internal_buyer_postcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_buyer_postcode(ArgT0&& arg0, ArgT... args) {
 
 buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.buyer_postcode)
}
inline std::string* Payment::mutable_buyer_postcode() {
  std::string* _s = _internal_mutable_buyer_postcode();
  // @@protoc_insertion_point(field_mutable:payment.Payment.buyer_postcode)
  return _s;
}
inline const std::string& Payment::_internal_buyer_postcode() const {
  return buyer_postcode_.Get();
}
inline void Payment::_internal_set_buyer_postcode(const std::string& value) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_buyer_postcode() {
  
  return buyer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_buyer_postcode() {
  // @@protoc_insertion_point(field_release:payment.Payment.buyer_postcode)
  return buyer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_buyer_postcode(std::string* buyer_postcode) {
  if (buyer_postcode != nullptr) {
    
  } else {
    
  }
  buyer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_postcode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.buyer_postcode)
}

// string buyer_tel = 9;
inline void Payment::clear_buyer_tel() {
  buyer_tel_.ClearToEmpty();
}
inline const std::string& Payment::buyer_tel() const {
  // @@protoc_insertion_point(field_get:payment.Payment.buyer_tel)
  return _internal_buyer_tel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_buyer_tel(ArgT0&& arg0, ArgT... args) {
 
 buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.buyer_tel)
}
inline std::string* Payment::mutable_buyer_tel() {
  std::string* _s = _internal_mutable_buyer_tel();
  // @@protoc_insertion_point(field_mutable:payment.Payment.buyer_tel)
  return _s;
}
inline const std::string& Payment::_internal_buyer_tel() const {
  return buyer_tel_.Get();
}
inline void Payment::_internal_set_buyer_tel(const std::string& value) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_buyer_tel() {
  
  return buyer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_buyer_tel() {
  // @@protoc_insertion_point(field_release:payment.Payment.buyer_tel)
  return buyer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_buyer_tel(std::string* buyer_tel) {
  if (buyer_tel != nullptr) {
    
  } else {
    
  }
  buyer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_tel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.buyer_tel)
}

// int32 cancel_amount = 10;
inline void Payment::clear_cancel_amount() {
  cancel_amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_cancel_amount() const {
  return cancel_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::cancel_amount() const {
  // @@protoc_insertion_point(field_get:payment.Payment.cancel_amount)
  return _internal_cancel_amount();
}
inline void Payment::_internal_set_cancel_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cancel_amount_ = value;
}
inline void Payment::set_cancel_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cancel_amount(value);
  // @@protoc_insertion_point(field_set:payment.Payment.cancel_amount)
}

// repeated .payment.CancelHistory cancel_history = 11;
inline int Payment::_internal_cancel_history_size() const {
  return cancel_history_.size();
}
inline int Payment::cancel_history_size() const {
  return _internal_cancel_history_size();
}
inline void Payment::clear_cancel_history() {
  cancel_history_.Clear();
}
inline ::payment::CancelHistory* Payment::mutable_cancel_history(int index) {
  // @@protoc_insertion_point(field_mutable:payment.Payment.cancel_history)
  return cancel_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::CancelHistory >*
Payment::mutable_cancel_history() {
  // @@protoc_insertion_point(field_mutable_list:payment.Payment.cancel_history)
  return &cancel_history_;
}
inline const ::payment::CancelHistory& Payment::_internal_cancel_history(int index) const {
  return cancel_history_.Get(index);
}
inline const ::payment::CancelHistory& Payment::cancel_history(int index) const {
  // @@protoc_insertion_point(field_get:payment.Payment.cancel_history)
  return _internal_cancel_history(index);
}
inline ::payment::CancelHistory* Payment::_internal_add_cancel_history() {
  return cancel_history_.Add();
}
inline ::payment::CancelHistory* Payment::add_cancel_history() {
  ::payment::CancelHistory* _add = _internal_add_cancel_history();
  // @@protoc_insertion_point(field_add:payment.Payment.cancel_history)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::CancelHistory >&
Payment::cancel_history() const {
  // @@protoc_insertion_point(field_list:payment.Payment.cancel_history)
  return cancel_history_;
}

// string cancel_reason = 12;
inline void Payment::clear_cancel_reason() {
  cancel_reason_.ClearToEmpty();
}
inline const std::string& Payment::cancel_reason() const {
  // @@protoc_insertion_point(field_get:payment.Payment.cancel_reason)
  return _internal_cancel_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_cancel_reason(ArgT0&& arg0, ArgT... args) {
 
 cancel_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.cancel_reason)
}
inline std::string* Payment::mutable_cancel_reason() {
  std::string* _s = _internal_mutable_cancel_reason();
  // @@protoc_insertion_point(field_mutable:payment.Payment.cancel_reason)
  return _s;
}
inline const std::string& Payment::_internal_cancel_reason() const {
  return cancel_reason_.Get();
}
inline void Payment::_internal_set_cancel_reason(const std::string& value) {
  
  cancel_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_cancel_reason() {
  
  return cancel_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_cancel_reason() {
  // @@protoc_insertion_point(field_release:payment.Payment.cancel_reason)
  return cancel_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_cancel_reason(std::string* cancel_reason) {
  if (cancel_reason != nullptr) {
    
  } else {
    
  }
  cancel_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cancel_reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.cancel_reason)
}

// repeated string cancel_receipt_urls = 13;
inline int Payment::_internal_cancel_receipt_urls_size() const {
  return cancel_receipt_urls_.size();
}
inline int Payment::cancel_receipt_urls_size() const {
  return _internal_cancel_receipt_urls_size();
}
inline void Payment::clear_cancel_receipt_urls() {
  cancel_receipt_urls_.Clear();
}
inline std::string* Payment::add_cancel_receipt_urls() {
  std::string* _s = _internal_add_cancel_receipt_urls();
  // @@protoc_insertion_point(field_add_mutable:payment.Payment.cancel_receipt_urls)
  return _s;
}
inline const std::string& Payment::_internal_cancel_receipt_urls(int index) const {
  return cancel_receipt_urls_.Get(index);
}
inline const std::string& Payment::cancel_receipt_urls(int index) const {
  // @@protoc_insertion_point(field_get:payment.Payment.cancel_receipt_urls)
  return _internal_cancel_receipt_urls(index);
}
inline std::string* Payment::mutable_cancel_receipt_urls(int index) {
  // @@protoc_insertion_point(field_mutable:payment.Payment.cancel_receipt_urls)
  return cancel_receipt_urls_.Mutable(index);
}
inline void Payment::set_cancel_receipt_urls(int index, const std::string& value) {
  cancel_receipt_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:payment.Payment.cancel_receipt_urls)
}
inline void Payment::set_cancel_receipt_urls(int index, std::string&& value) {
  cancel_receipt_urls_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:payment.Payment.cancel_receipt_urls)
}
inline void Payment::set_cancel_receipt_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cancel_receipt_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:payment.Payment.cancel_receipt_urls)
}
inline void Payment::set_cancel_receipt_urls(int index, const char* value, size_t size) {
  cancel_receipt_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:payment.Payment.cancel_receipt_urls)
}
inline std::string* Payment::_internal_add_cancel_receipt_urls() {
  return cancel_receipt_urls_.Add();
}
inline void Payment::add_cancel_receipt_urls(const std::string& value) {
  cancel_receipt_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:payment.Payment.cancel_receipt_urls)
}
inline void Payment::add_cancel_receipt_urls(std::string&& value) {
  cancel_receipt_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:payment.Payment.cancel_receipt_urls)
}
inline void Payment::add_cancel_receipt_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cancel_receipt_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:payment.Payment.cancel_receipt_urls)
}
inline void Payment::add_cancel_receipt_urls(const char* value, size_t size) {
  cancel_receipt_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:payment.Payment.cancel_receipt_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Payment::cancel_receipt_urls() const {
  // @@protoc_insertion_point(field_list:payment.Payment.cancel_receipt_urls)
  return cancel_receipt_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Payment::mutable_cancel_receipt_urls() {
  // @@protoc_insertion_point(field_mutable_list:payment.Payment.cancel_receipt_urls)
  return &cancel_receipt_urls_;
}

// int32 cancelled_at = 14;
inline void Payment::clear_cancelled_at() {
  cancelled_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_cancelled_at() const {
  return cancelled_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::cancelled_at() const {
  // @@protoc_insertion_point(field_get:payment.Payment.cancelled_at)
  return _internal_cancelled_at();
}
inline void Payment::_internal_set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cancelled_at_ = value;
}
inline void Payment::set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cancelled_at(value);
  // @@protoc_insertion_point(field_set:payment.Payment.cancelled_at)
}

// string card_code = 15;
inline void Payment::clear_card_code() {
  card_code_.ClearToEmpty();
}
inline const std::string& Payment::card_code() const {
  // @@protoc_insertion_point(field_get:payment.Payment.card_code)
  return _internal_card_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_card_code(ArgT0&& arg0, ArgT... args) {
 
 card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.card_code)
}
inline std::string* Payment::mutable_card_code() {
  std::string* _s = _internal_mutable_card_code();
  // @@protoc_insertion_point(field_mutable:payment.Payment.card_code)
  return _s;
}
inline const std::string& Payment::_internal_card_code() const {
  return card_code_.Get();
}
inline void Payment::_internal_set_card_code(const std::string& value) {
  
  card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_card_code() {
  
  return card_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_card_code() {
  // @@protoc_insertion_point(field_release:payment.Payment.card_code)
  return card_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_card_code(std::string* card_code) {
  if (card_code != nullptr) {
    
  } else {
    
  }
  card_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.card_code)
}

// string card_name = 16;
inline void Payment::clear_card_name() {
  card_name_.ClearToEmpty();
}
inline const std::string& Payment::card_name() const {
  // @@protoc_insertion_point(field_get:payment.Payment.card_name)
  return _internal_card_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_card_name(ArgT0&& arg0, ArgT... args) {
 
 card_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.card_name)
}
inline std::string* Payment::mutable_card_name() {
  std::string* _s = _internal_mutable_card_name();
  // @@protoc_insertion_point(field_mutable:payment.Payment.card_name)
  return _s;
}
inline const std::string& Payment::_internal_card_name() const {
  return card_name_.Get();
}
inline void Payment::_internal_set_card_name(const std::string& value) {
  
  card_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_card_name() {
  
  return card_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_card_name() {
  // @@protoc_insertion_point(field_release:payment.Payment.card_name)
  return card_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_card_name(std::string* card_name) {
  if (card_name != nullptr) {
    
  } else {
    
  }
  card_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.card_name)
}

// string card_number = 17;
inline void Payment::clear_card_number() {
  card_number_.ClearToEmpty();
}
inline const std::string& Payment::card_number() const {
  // @@protoc_insertion_point(field_get:payment.Payment.card_number)
  return _internal_card_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_card_number(ArgT0&& arg0, ArgT... args) {
 
 card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.card_number)
}
inline std::string* Payment::mutable_card_number() {
  std::string* _s = _internal_mutable_card_number();
  // @@protoc_insertion_point(field_mutable:payment.Payment.card_number)
  return _s;
}
inline const std::string& Payment::_internal_card_number() const {
  return card_number_.Get();
}
inline void Payment::_internal_set_card_number(const std::string& value) {
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_card_number() {
  
  return card_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_card_number() {
  // @@protoc_insertion_point(field_release:payment.Payment.card_number)
  return card_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_card_number(std::string* card_number) {
  if (card_number != nullptr) {
    
  } else {
    
  }
  card_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.card_number)
}

// int32 card_quota = 18;
inline void Payment::clear_card_quota() {
  card_quota_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_card_quota() const {
  return card_quota_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::card_quota() const {
  // @@protoc_insertion_point(field_get:payment.Payment.card_quota)
  return _internal_card_quota();
}
inline void Payment::_internal_set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_quota_ = value;
}
inline void Payment::set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_quota(value);
  // @@protoc_insertion_point(field_set:payment.Payment.card_quota)
}

// int32 card_type = 19;
inline void Payment::clear_card_type() {
  card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_card_type() const {
  return card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::card_type() const {
  // @@protoc_insertion_point(field_get:payment.Payment.card_type)
  return _internal_card_type();
}
inline void Payment::_internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_type_ = value;
}
inline void Payment::set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_type(value);
  // @@protoc_insertion_point(field_set:payment.Payment.card_type)
}

// bool cash_receipt_issued = 20;
inline void Payment::clear_cash_receipt_issued() {
  cash_receipt_issued_ = false;
}
inline bool Payment::_internal_cash_receipt_issued() const {
  return cash_receipt_issued_;
}
inline bool Payment::cash_receipt_issued() const {
  // @@protoc_insertion_point(field_get:payment.Payment.cash_receipt_issued)
  return _internal_cash_receipt_issued();
}
inline void Payment::_internal_set_cash_receipt_issued(bool value) {
  
  cash_receipt_issued_ = value;
}
inline void Payment::set_cash_receipt_issued(bool value) {
  _internal_set_cash_receipt_issued(value);
  // @@protoc_insertion_point(field_set:payment.Payment.cash_receipt_issued)
}

// string channel = 21;
inline void Payment::clear_channel() {
  channel_.ClearToEmpty();
}
inline const std::string& Payment::channel() const {
  // @@protoc_insertion_point(field_get:payment.Payment.channel)
  return _internal_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_channel(ArgT0&& arg0, ArgT... args) {
 
 channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.channel)
}
inline std::string* Payment::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:payment.Payment.channel)
  return _s;
}
inline const std::string& Payment::_internal_channel() const {
  return channel_.Get();
}
inline void Payment::_internal_set_channel(const std::string& value) {
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_channel() {
  
  return channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_channel() {
  // @@protoc_insertion_point(field_release:payment.Payment.channel)
  return channel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.channel)
}

// string currency = 22;
inline void Payment::clear_currency() {
  currency_.ClearToEmpty();
}
inline const std::string& Payment::currency() const {
  // @@protoc_insertion_point(field_get:payment.Payment.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_currency(ArgT0&& arg0, ArgT... args) {
 
 currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.currency)
}
inline std::string* Payment::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:payment.Payment.currency)
  return _s;
}
inline const std::string& Payment::_internal_currency() const {
  return currency_.Get();
}
inline void Payment::_internal_set_currency(const std::string& value) {
  
  currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_currency() {
  
  return currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_currency() {
  // @@protoc_insertion_point(field_release:payment.Payment.currency)
  return currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.currency)
}

// string custom_data = 23;
inline void Payment::clear_custom_data() {
  custom_data_.ClearToEmpty();
}
inline const std::string& Payment::custom_data() const {
  // @@protoc_insertion_point(field_get:payment.Payment.custom_data)
  return _internal_custom_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_custom_data(ArgT0&& arg0, ArgT... args) {
 
 custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.custom_data)
}
inline std::string* Payment::mutable_custom_data() {
  std::string* _s = _internal_mutable_custom_data();
  // @@protoc_insertion_point(field_mutable:payment.Payment.custom_data)
  return _s;
}
inline const std::string& Payment::_internal_custom_data() const {
  return custom_data_.Get();
}
inline void Payment::_internal_set_custom_data(const std::string& value) {
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_custom_data() {
  
  return custom_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_custom_data() {
  // @@protoc_insertion_point(field_release:payment.Payment.custom_data)
  return custom_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_custom_data(std::string* custom_data) {
  if (custom_data != nullptr) {
    
  } else {
    
  }
  custom_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.custom_data)
}

// string customer_uid = 24;
inline void Payment::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& Payment::customer_uid() const {
  // @@protoc_insertion_point(field_get:payment.Payment.customer_uid)
  return _internal_customer_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_customer_uid(ArgT0&& arg0, ArgT... args) {
 
 customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.customer_uid)
}
inline std::string* Payment::mutable_customer_uid() {
  std::string* _s = _internal_mutable_customer_uid();
  // @@protoc_insertion_point(field_mutable:payment.Payment.customer_uid)
  return _s;
}
inline const std::string& Payment::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void Payment::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_customer_uid() {
  // @@protoc_insertion_point(field_release:payment.Payment.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.customer_uid)
}

// string customer_uid_usage = 25;
inline void Payment::clear_customer_uid_usage() {
  customer_uid_usage_.ClearToEmpty();
}
inline const std::string& Payment::customer_uid_usage() const {
  // @@protoc_insertion_point(field_get:payment.Payment.customer_uid_usage)
  return _internal_customer_uid_usage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_customer_uid_usage(ArgT0&& arg0, ArgT... args) {
 
 customer_uid_usage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.customer_uid_usage)
}
inline std::string* Payment::mutable_customer_uid_usage() {
  std::string* _s = _internal_mutable_customer_uid_usage();
  // @@protoc_insertion_point(field_mutable:payment.Payment.customer_uid_usage)
  return _s;
}
inline const std::string& Payment::_internal_customer_uid_usage() const {
  return customer_uid_usage_.Get();
}
inline void Payment::_internal_set_customer_uid_usage(const std::string& value) {
  
  customer_uid_usage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_customer_uid_usage() {
  
  return customer_uid_usage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_customer_uid_usage() {
  // @@protoc_insertion_point(field_release:payment.Payment.customer_uid_usage)
  return customer_uid_usage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_customer_uid_usage(std::string* customer_uid_usage) {
  if (customer_uid_usage != nullptr) {
    
  } else {
    
  }
  customer_uid_usage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid_usage,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.customer_uid_usage)
}

// bool escrow = 26;
inline void Payment::clear_escrow() {
  escrow_ = false;
}
inline bool Payment::_internal_escrow() const {
  return escrow_;
}
inline bool Payment::escrow() const {
  // @@protoc_insertion_point(field_get:payment.Payment.escrow)
  return _internal_escrow();
}
inline void Payment::_internal_set_escrow(bool value) {
  
  escrow_ = value;
}
inline void Payment::set_escrow(bool value) {
  _internal_set_escrow(value);
  // @@protoc_insertion_point(field_set:payment.Payment.escrow)
}

// string fail_reason = 27;
inline void Payment::clear_fail_reason() {
  fail_reason_.ClearToEmpty();
}
inline const std::string& Payment::fail_reason() const {
  // @@protoc_insertion_point(field_get:payment.Payment.fail_reason)
  return _internal_fail_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_fail_reason(ArgT0&& arg0, ArgT... args) {
 
 fail_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.fail_reason)
}
inline std::string* Payment::mutable_fail_reason() {
  std::string* _s = _internal_mutable_fail_reason();
  // @@protoc_insertion_point(field_mutable:payment.Payment.fail_reason)
  return _s;
}
inline const std::string& Payment::_internal_fail_reason() const {
  return fail_reason_.Get();
}
inline void Payment::_internal_set_fail_reason(const std::string& value) {
  
  fail_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_fail_reason() {
  
  return fail_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_fail_reason() {
  // @@protoc_insertion_point(field_release:payment.Payment.fail_reason)
  return fail_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_fail_reason(std::string* fail_reason) {
  if (fail_reason != nullptr) {
    
  } else {
    
  }
  fail_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fail_reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.fail_reason)
}

// int32 failed_at = 28;
inline void Payment::clear_failed_at() {
  failed_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_failed_at() const {
  return failed_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::failed_at() const {
  // @@protoc_insertion_point(field_get:payment.Payment.failed_at)
  return _internal_failed_at();
}
inline void Payment::_internal_set_failed_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  failed_at_ = value;
}
inline void Payment::set_failed_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_failed_at(value);
  // @@protoc_insertion_point(field_set:payment.Payment.failed_at)
}

// string imp_uid = 29;
inline void Payment::clear_imp_uid() {
  imp_uid_.ClearToEmpty();
}
inline const std::string& Payment::imp_uid() const {
  // @@protoc_insertion_point(field_get:payment.Payment.imp_uid)
  return _internal_imp_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_imp_uid(ArgT0&& arg0, ArgT... args) {
 
 imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.imp_uid)
}
inline std::string* Payment::mutable_imp_uid() {
  std::string* _s = _internal_mutable_imp_uid();
  // @@protoc_insertion_point(field_mutable:payment.Payment.imp_uid)
  return _s;
}
inline const std::string& Payment::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void Payment::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_imp_uid() {
  // @@protoc_insertion_point(field_release:payment.Payment.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.imp_uid)
}

// string merchant_uid = 30;
inline void Payment::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& Payment::merchant_uid() const {
  // @@protoc_insertion_point(field_get:payment.Payment.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.merchant_uid)
}
inline std::string* Payment::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:payment.Payment.merchant_uid)
  return _s;
}
inline const std::string& Payment::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void Payment::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:payment.Payment.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.merchant_uid)
}

// string name = 31;
inline void Payment::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Payment::name() const {
  // @@protoc_insertion_point(field_get:payment.Payment.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.name)
}
inline std::string* Payment::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:payment.Payment.name)
  return _s;
}
inline const std::string& Payment::_internal_name() const {
  return name_.Get();
}
inline void Payment::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_name() {
  // @@protoc_insertion_point(field_release:payment.Payment.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.name)
}

// int32 paid_at = 32;
inline void Payment::clear_paid_at() {
  paid_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_paid_at() const {
  return paid_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::paid_at() const {
  // @@protoc_insertion_point(field_get:payment.Payment.paid_at)
  return _internal_paid_at();
}
inline void Payment::_internal_set_paid_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  paid_at_ = value;
}
inline void Payment::set_paid_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_paid_at(value);
  // @@protoc_insertion_point(field_set:payment.Payment.paid_at)
}

// string pay_method = 33;
inline void Payment::clear_pay_method() {
  pay_method_.ClearToEmpty();
}
inline const std::string& Payment::pay_method() const {
  // @@protoc_insertion_point(field_get:payment.Payment.pay_method)
  return _internal_pay_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_pay_method(ArgT0&& arg0, ArgT... args) {
 
 pay_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.pay_method)
}
inline std::string* Payment::mutable_pay_method() {
  std::string* _s = _internal_mutable_pay_method();
  // @@protoc_insertion_point(field_mutable:payment.Payment.pay_method)
  return _s;
}
inline const std::string& Payment::_internal_pay_method() const {
  return pay_method_.Get();
}
inline void Payment::_internal_set_pay_method(const std::string& value) {
  
  pay_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_pay_method() {
  
  return pay_method_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_pay_method() {
  // @@protoc_insertion_point(field_release:payment.Payment.pay_method)
  return pay_method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_pay_method(std::string* pay_method) {
  if (pay_method != nullptr) {
    
  } else {
    
  }
  pay_method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pay_method,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.pay_method)
}

// string pg_id = 34;
inline void Payment::clear_pg_id() {
  pg_id_.ClearToEmpty();
}
inline const std::string& Payment::pg_id() const {
  // @@protoc_insertion_point(field_get:payment.Payment.pg_id)
  return _internal_pg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_pg_id(ArgT0&& arg0, ArgT... args) {
 
 pg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.pg_id)
}
inline std::string* Payment::mutable_pg_id() {
  std::string* _s = _internal_mutable_pg_id();
  // @@protoc_insertion_point(field_mutable:payment.Payment.pg_id)
  return _s;
}
inline const std::string& Payment::_internal_pg_id() const {
  return pg_id_.Get();
}
inline void Payment::_internal_set_pg_id(const std::string& value) {
  
  pg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_pg_id() {
  
  return pg_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_pg_id() {
  // @@protoc_insertion_point(field_release:payment.Payment.pg_id)
  return pg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_pg_id(std::string* pg_id) {
  if (pg_id != nullptr) {
    
  } else {
    
  }
  pg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.pg_id)
}

// string pg_provider = 35;
inline void Payment::clear_pg_provider() {
  pg_provider_.ClearToEmpty();
}
inline const std::string& Payment::pg_provider() const {
  // @@protoc_insertion_point(field_get:payment.Payment.pg_provider)
  return _internal_pg_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_pg_provider(ArgT0&& arg0, ArgT... args) {
 
 pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.pg_provider)
}
inline std::string* Payment::mutable_pg_provider() {
  std::string* _s = _internal_mutable_pg_provider();
  // @@protoc_insertion_point(field_mutable:payment.Payment.pg_provider)
  return _s;
}
inline const std::string& Payment::_internal_pg_provider() const {
  return pg_provider_.Get();
}
inline void Payment::_internal_set_pg_provider(const std::string& value) {
  
  pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_pg_provider() {
  
  return pg_provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_pg_provider() {
  // @@protoc_insertion_point(field_release:payment.Payment.pg_provider)
  return pg_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_pg_provider(std::string* pg_provider) {
  if (pg_provider != nullptr) {
    
  } else {
    
  }
  pg_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_provider,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.pg_provider)
}

// string pg_tid = 36;
inline void Payment::clear_pg_tid() {
  pg_tid_.ClearToEmpty();
}
inline const std::string& Payment::pg_tid() const {
  // @@protoc_insertion_point(field_get:payment.Payment.pg_tid)
  return _internal_pg_tid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_pg_tid(ArgT0&& arg0, ArgT... args) {
 
 pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.pg_tid)
}
inline std::string* Payment::mutable_pg_tid() {
  std::string* _s = _internal_mutable_pg_tid();
  // @@protoc_insertion_point(field_mutable:payment.Payment.pg_tid)
  return _s;
}
inline const std::string& Payment::_internal_pg_tid() const {
  return pg_tid_.Get();
}
inline void Payment::_internal_set_pg_tid(const std::string& value) {
  
  pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_pg_tid() {
  
  return pg_tid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_pg_tid() {
  // @@protoc_insertion_point(field_release:payment.Payment.pg_tid)
  return pg_tid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_pg_tid(std::string* pg_tid) {
  if (pg_tid != nullptr) {
    
  } else {
    
  }
  pg_tid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_tid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.pg_tid)
}

// string receipt_url = 37;
inline void Payment::clear_receipt_url() {
  receipt_url_.ClearToEmpty();
}
inline const std::string& Payment::receipt_url() const {
  // @@protoc_insertion_point(field_get:payment.Payment.receipt_url)
  return _internal_receipt_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_receipt_url(ArgT0&& arg0, ArgT... args) {
 
 receipt_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.receipt_url)
}
inline std::string* Payment::mutable_receipt_url() {
  std::string* _s = _internal_mutable_receipt_url();
  // @@protoc_insertion_point(field_mutable:payment.Payment.receipt_url)
  return _s;
}
inline const std::string& Payment::_internal_receipt_url() const {
  return receipt_url_.Get();
}
inline void Payment::_internal_set_receipt_url(const std::string& value) {
  
  receipt_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_receipt_url() {
  
  return receipt_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_receipt_url() {
  // @@protoc_insertion_point(field_release:payment.Payment.receipt_url)
  return receipt_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_receipt_url(std::string* receipt_url) {
  if (receipt_url != nullptr) {
    
  } else {
    
  }
  receipt_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receipt_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.receipt_url)
}

// int32 started_at = 38;
inline void Payment::clear_started_at() {
  started_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_started_at() const {
  return started_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::started_at() const {
  // @@protoc_insertion_point(field_get:payment.Payment.started_at)
  return _internal_started_at();
}
inline void Payment::_internal_set_started_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  started_at_ = value;
}
inline void Payment::set_started_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_started_at(value);
  // @@protoc_insertion_point(field_set:payment.Payment.started_at)
}

// string status = 39;
inline void Payment::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Payment::status() const {
  // @@protoc_insertion_point(field_get:payment.Payment.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.status)
}
inline std::string* Payment::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:payment.Payment.status)
  return _s;
}
inline const std::string& Payment::_internal_status() const {
  return status_.Get();
}
inline void Payment::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_status() {
  // @@protoc_insertion_point(field_release:payment.Payment.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.status)
}

// string user_agent = 40;
inline void Payment::clear_user_agent() {
  user_agent_.ClearToEmpty();
}
inline const std::string& Payment::user_agent() const {
  // @@protoc_insertion_point(field_get:payment.Payment.user_agent)
  return _internal_user_agent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_user_agent(ArgT0&& arg0, ArgT... args) {
 
 user_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.user_agent)
}
inline std::string* Payment::mutable_user_agent() {
  std::string* _s = _internal_mutable_user_agent();
  // @@protoc_insertion_point(field_mutable:payment.Payment.user_agent)
  return _s;
}
inline const std::string& Payment::_internal_user_agent() const {
  return user_agent_.Get();
}
inline void Payment::_internal_set_user_agent(const std::string& value) {
  
  user_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_user_agent() {
  
  return user_agent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_user_agent() {
  // @@protoc_insertion_point(field_release:payment.Payment.user_agent)
  return user_agent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_user_agent(std::string* user_agent) {
  if (user_agent != nullptr) {
    
  } else {
    
  }
  user_agent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_agent,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.user_agent)
}

// string vbank_code = 41;
inline void Payment::clear_vbank_code() {
  vbank_code_.ClearToEmpty();
}
inline const std::string& Payment::vbank_code() const {
  // @@protoc_insertion_point(field_get:payment.Payment.vbank_code)
  return _internal_vbank_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_vbank_code(ArgT0&& arg0, ArgT... args) {
 
 vbank_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.vbank_code)
}
inline std::string* Payment::mutable_vbank_code() {
  std::string* _s = _internal_mutable_vbank_code();
  // @@protoc_insertion_point(field_mutable:payment.Payment.vbank_code)
  return _s;
}
inline const std::string& Payment::_internal_vbank_code() const {
  return vbank_code_.Get();
}
inline void Payment::_internal_set_vbank_code(const std::string& value) {
  
  vbank_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_vbank_code() {
  
  return vbank_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_vbank_code() {
  // @@protoc_insertion_point(field_release:payment.Payment.vbank_code)
  return vbank_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_vbank_code(std::string* vbank_code) {
  if (vbank_code != nullptr) {
    
  } else {
    
  }
  vbank_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vbank_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.vbank_code)
}

// int32 vbank_date = 42;
inline void Payment::clear_vbank_date() {
  vbank_date_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_vbank_date() const {
  return vbank_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::vbank_date() const {
  // @@protoc_insertion_point(field_get:payment.Payment.vbank_date)
  return _internal_vbank_date();
}
inline void Payment::_internal_set_vbank_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vbank_date_ = value;
}
inline void Payment::set_vbank_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vbank_date(value);
  // @@protoc_insertion_point(field_set:payment.Payment.vbank_date)
}

// string vbank_holder = 43;
inline void Payment::clear_vbank_holder() {
  vbank_holder_.ClearToEmpty();
}
inline const std::string& Payment::vbank_holder() const {
  // @@protoc_insertion_point(field_get:payment.Payment.vbank_holder)
  return _internal_vbank_holder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_vbank_holder(ArgT0&& arg0, ArgT... args) {
 
 vbank_holder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.vbank_holder)
}
inline std::string* Payment::mutable_vbank_holder() {
  std::string* _s = _internal_mutable_vbank_holder();
  // @@protoc_insertion_point(field_mutable:payment.Payment.vbank_holder)
  return _s;
}
inline const std::string& Payment::_internal_vbank_holder() const {
  return vbank_holder_.Get();
}
inline void Payment::_internal_set_vbank_holder(const std::string& value) {
  
  vbank_holder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_vbank_holder() {
  
  return vbank_holder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_vbank_holder() {
  // @@protoc_insertion_point(field_release:payment.Payment.vbank_holder)
  return vbank_holder_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_vbank_holder(std::string* vbank_holder) {
  if (vbank_holder != nullptr) {
    
  } else {
    
  }
  vbank_holder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vbank_holder,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.vbank_holder)
}

// int32 vbank_issued_at = 44;
inline void Payment::clear_vbank_issued_at() {
  vbank_issued_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::_internal_vbank_issued_at() const {
  return vbank_issued_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Payment::vbank_issued_at() const {
  // @@protoc_insertion_point(field_get:payment.Payment.vbank_issued_at)
  return _internal_vbank_issued_at();
}
inline void Payment::_internal_set_vbank_issued_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vbank_issued_at_ = value;
}
inline void Payment::set_vbank_issued_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vbank_issued_at(value);
  // @@protoc_insertion_point(field_set:payment.Payment.vbank_issued_at)
}

// string vbank_name = 45;
inline void Payment::clear_vbank_name() {
  vbank_name_.ClearToEmpty();
}
inline const std::string& Payment::vbank_name() const {
  // @@protoc_insertion_point(field_get:payment.Payment.vbank_name)
  return _internal_vbank_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_vbank_name(ArgT0&& arg0, ArgT... args) {
 
 vbank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.vbank_name)
}
inline std::string* Payment::mutable_vbank_name() {
  std::string* _s = _internal_mutable_vbank_name();
  // @@protoc_insertion_point(field_mutable:payment.Payment.vbank_name)
  return _s;
}
inline const std::string& Payment::_internal_vbank_name() const {
  return vbank_name_.Get();
}
inline void Payment::_internal_set_vbank_name(const std::string& value) {
  
  vbank_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_vbank_name() {
  
  return vbank_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_vbank_name() {
  // @@protoc_insertion_point(field_release:payment.Payment.vbank_name)
  return vbank_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_vbank_name(std::string* vbank_name) {
  if (vbank_name != nullptr) {
    
  } else {
    
  }
  vbank_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vbank_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.vbank_name)
}

// string vbank_num = 46;
inline void Payment::clear_vbank_num() {
  vbank_num_.ClearToEmpty();
}
inline const std::string& Payment::vbank_num() const {
  // @@protoc_insertion_point(field_get:payment.Payment.vbank_num)
  return _internal_vbank_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_vbank_num(ArgT0&& arg0, ArgT... args) {
 
 vbank_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.vbank_num)
}
inline std::string* Payment::mutable_vbank_num() {
  std::string* _s = _internal_mutable_vbank_num();
  // @@protoc_insertion_point(field_mutable:payment.Payment.vbank_num)
  return _s;
}
inline const std::string& Payment::_internal_vbank_num() const {
  return vbank_num_.Get();
}
inline void Payment::_internal_set_vbank_num(const std::string& value) {
  
  vbank_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_vbank_num() {
  
  return vbank_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_vbank_num() {
  // @@protoc_insertion_point(field_release:payment.Payment.vbank_num)
  return vbank_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_vbank_num(std::string* vbank_num) {
  if (vbank_num != nullptr) {
    
  } else {
    
  }
  vbank_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vbank_num,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.vbank_num)
}

// .payment.Promotion promotion = 47;
inline bool Payment::_internal_has_promotion() const {
  return this != internal_default_instance() && promotion_ != nullptr;
}
inline bool Payment::has_promotion() const {
  return _internal_has_promotion();
}
inline void Payment::clear_promotion() {
  if (GetArenaForAllocation() == nullptr && promotion_ != nullptr) {
    delete promotion_;
  }
  promotion_ = nullptr;
}
inline const ::payment::Promotion& Payment::_internal_promotion() const {
  const ::payment::Promotion* p = promotion_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::Promotion&>(
      ::payment::_Promotion_default_instance_);
}
inline const ::payment::Promotion& Payment::promotion() const {
  // @@protoc_insertion_point(field_get:payment.Payment.promotion)
  return _internal_promotion();
}
inline void Payment::unsafe_arena_set_allocated_promotion(
    ::payment::Promotion* promotion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(promotion_);
  }
  promotion_ = promotion;
  if (promotion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.Payment.promotion)
}
inline ::payment::Promotion* Payment::release_promotion() {
  
  ::payment::Promotion* temp = promotion_;
  promotion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::Promotion* Payment::unsafe_arena_release_promotion() {
  // @@protoc_insertion_point(field_release:payment.Payment.promotion)
  
  ::payment::Promotion* temp = promotion_;
  promotion_ = nullptr;
  return temp;
}
inline ::payment::Promotion* Payment::_internal_mutable_promotion() {
  
  if (promotion_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::Promotion>(GetArenaForAllocation());
    promotion_ = p;
  }
  return promotion_;
}
inline ::payment::Promotion* Payment::mutable_promotion() {
  ::payment::Promotion* _msg = _internal_mutable_promotion();
  // @@protoc_insertion_point(field_mutable:payment.Payment.promotion)
  return _msg;
}
inline void Payment::set_allocated_promotion(::payment::Promotion* promotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete promotion_;
  }
  if (promotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::Promotion>::GetOwningArena(promotion);
    if (message_arena != submessage_arena) {
      promotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, promotion, submessage_arena);
    }
    
  } else {
    
  }
  promotion_ = promotion;
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.promotion)
}

// string emb_pg_provider = 48;
inline void Payment::clear_emb_pg_provider() {
  emb_pg_provider_.ClearToEmpty();
}
inline const std::string& Payment::emb_pg_provider() const {
  // @@protoc_insertion_point(field_get:payment.Payment.emb_pg_provider)
  return _internal_emb_pg_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Payment::set_emb_pg_provider(ArgT0&& arg0, ArgT... args) {
 
 emb_pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Payment.emb_pg_provider)
}
inline std::string* Payment::mutable_emb_pg_provider() {
  std::string* _s = _internal_mutable_emb_pg_provider();
  // @@protoc_insertion_point(field_mutable:payment.Payment.emb_pg_provider)
  return _s;
}
inline const std::string& Payment::_internal_emb_pg_provider() const {
  return emb_pg_provider_.Get();
}
inline void Payment::_internal_set_emb_pg_provider(const std::string& value) {
  
  emb_pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Payment::_internal_mutable_emb_pg_provider() {
  
  return emb_pg_provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Payment::release_emb_pg_provider() {
  // @@protoc_insertion_point(field_release:payment.Payment.emb_pg_provider)
  return emb_pg_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Payment::set_allocated_emb_pg_provider(std::string* emb_pg_provider) {
  if (emb_pg_provider != nullptr) {
    
  } else {
    
  }
  emb_pg_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), emb_pg_provider,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Payment.emb_pg_provider)
}

// -------------------------------------------------------------------

// CancelHistory

// string pg_tid = 1;
inline void CancelHistory::clear_pg_tid() {
  pg_tid_.ClearToEmpty();
}
inline const std::string& CancelHistory::pg_tid() const {
  // @@protoc_insertion_point(field_get:payment.CancelHistory.pg_tid)
  return _internal_pg_tid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelHistory::set_pg_tid(ArgT0&& arg0, ArgT... args) {
 
 pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.CancelHistory.pg_tid)
}
inline std::string* CancelHistory::mutable_pg_tid() {
  std::string* _s = _internal_mutable_pg_tid();
  // @@protoc_insertion_point(field_mutable:payment.CancelHistory.pg_tid)
  return _s;
}
inline const std::string& CancelHistory::_internal_pg_tid() const {
  return pg_tid_.Get();
}
inline void CancelHistory::_internal_set_pg_tid(const std::string& value) {
  
  pg_tid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelHistory::_internal_mutable_pg_tid() {
  
  return pg_tid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelHistory::release_pg_tid() {
  // @@protoc_insertion_point(field_release:payment.CancelHistory.pg_tid)
  return pg_tid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelHistory::set_allocated_pg_tid(std::string* pg_tid) {
  if (pg_tid != nullptr) {
    
  } else {
    
  }
  pg_tid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_tid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.CancelHistory.pg_tid)
}

// int32 amount = 2;
inline void CancelHistory::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelHistory::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelHistory::amount() const {
  // @@protoc_insertion_point(field_get:payment.CancelHistory.amount)
  return _internal_amount();
}
inline void CancelHistory::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void CancelHistory::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:payment.CancelHistory.amount)
}

// int32 cancelled_at = 3;
inline void CancelHistory::clear_cancelled_at() {
  cancelled_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelHistory::_internal_cancelled_at() const {
  return cancelled_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelHistory::cancelled_at() const {
  // @@protoc_insertion_point(field_get:payment.CancelHistory.cancelled_at)
  return _internal_cancelled_at();
}
inline void CancelHistory::_internal_set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cancelled_at_ = value;
}
inline void CancelHistory::set_cancelled_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cancelled_at(value);
  // @@protoc_insertion_point(field_set:payment.CancelHistory.cancelled_at)
}

// string reason = 4;
inline void CancelHistory::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& CancelHistory::reason() const {
  // @@protoc_insertion_point(field_get:payment.CancelHistory.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelHistory::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.CancelHistory.reason)
}
inline std::string* CancelHistory::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:payment.CancelHistory.reason)
  return _s;
}
inline const std::string& CancelHistory::_internal_reason() const {
  return reason_.Get();
}
inline void CancelHistory::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelHistory::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelHistory::release_reason() {
  // @@protoc_insertion_point(field_release:payment.CancelHistory.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelHistory::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.CancelHistory.reason)
}

// string receipt_url = 5;
inline void CancelHistory::clear_receipt_url() {
  receipt_url_.ClearToEmpty();
}
inline const std::string& CancelHistory::receipt_url() const {
  // @@protoc_insertion_point(field_get:payment.CancelHistory.receipt_url)
  return _internal_receipt_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelHistory::set_receipt_url(ArgT0&& arg0, ArgT... args) {
 
 receipt_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.CancelHistory.receipt_url)
}
inline std::string* CancelHistory::mutable_receipt_url() {
  std::string* _s = _internal_mutable_receipt_url();
  // @@protoc_insertion_point(field_mutable:payment.CancelHistory.receipt_url)
  return _s;
}
inline const std::string& CancelHistory::_internal_receipt_url() const {
  return receipt_url_.Get();
}
inline void CancelHistory::_internal_set_receipt_url(const std::string& value) {
  
  receipt_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelHistory::_internal_mutable_receipt_url() {
  
  return receipt_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelHistory::release_receipt_url() {
  // @@protoc_insertion_point(field_release:payment.CancelHistory.receipt_url)
  return receipt_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelHistory::set_allocated_receipt_url(std::string* receipt_url) {
  if (receipt_url != nullptr) {
    
  } else {
    
  }
  receipt_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receipt_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.CancelHistory.receipt_url)
}

// -------------------------------------------------------------------

// PaymentPage

// int32 total = 1;
inline void PaymentPage::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentPage::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentPage::total() const {
  // @@protoc_insertion_point(field_get:payment.PaymentPage.total)
  return _internal_total();
}
inline void PaymentPage::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void PaymentPage::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:payment.PaymentPage.total)
}

// int32 previous = 2;
inline void PaymentPage::clear_previous() {
  previous_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentPage::_internal_previous() const {
  return previous_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentPage::previous() const {
  // @@protoc_insertion_point(field_get:payment.PaymentPage.previous)
  return _internal_previous();
}
inline void PaymentPage::_internal_set_previous(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  previous_ = value;
}
inline void PaymentPage::set_previous(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_previous(value);
  // @@protoc_insertion_point(field_set:payment.PaymentPage.previous)
}

// int32 next = 3;
inline void PaymentPage::clear_next() {
  next_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentPage::_internal_next() const {
  return next_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentPage::next() const {
  // @@protoc_insertion_point(field_get:payment.PaymentPage.next)
  return _internal_next();
}
inline void PaymentPage::_internal_set_next(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_ = value;
}
inline void PaymentPage::set_next(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:payment.PaymentPage.next)
}

// repeated .payment.Payment list = 4;
inline int PaymentPage::_internal_list_size() const {
  return list_.size();
}
inline int PaymentPage::list_size() const {
  return _internal_list_size();
}
inline void PaymentPage::clear_list() {
  list_.Clear();
}
inline ::payment::Payment* PaymentPage::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:payment.PaymentPage.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >*
PaymentPage::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:payment.PaymentPage.list)
  return &list_;
}
inline const ::payment::Payment& PaymentPage::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::payment::Payment& PaymentPage::list(int index) const {
  // @@protoc_insertion_point(field_get:payment.PaymentPage.list)
  return _internal_list(index);
}
inline ::payment::Payment* PaymentPage::_internal_add_list() {
  return list_.Add();
}
inline ::payment::Payment* PaymentPage::add_list() {
  ::payment::Payment* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:payment.PaymentPage.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >&
PaymentPage::list() const {
  // @@protoc_insertion_point(field_list:payment.PaymentPage.list)
  return list_;
}

// -------------------------------------------------------------------

// PaymentBalanceDetail

// int32 tax_free = 1;
inline void PaymentBalanceDetail::clear_tax_free() {
  tax_free_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceDetail::_internal_tax_free() const {
  return tax_free_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceDetail::tax_free() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceDetail.tax_free)
  return _internal_tax_free();
}
inline void PaymentBalanceDetail::_internal_set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tax_free_ = value;
}
inline void PaymentBalanceDetail::set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tax_free(value);
  // @@protoc_insertion_point(field_set:payment.PaymentBalanceDetail.tax_free)
}

// int32 supply = 2;
inline void PaymentBalanceDetail::clear_supply() {
  supply_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceDetail::_internal_supply() const {
  return supply_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceDetail::supply() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceDetail.supply)
  return _internal_supply();
}
inline void PaymentBalanceDetail::_internal_set_supply(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  supply_ = value;
}
inline void PaymentBalanceDetail::set_supply(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_supply(value);
  // @@protoc_insertion_point(field_set:payment.PaymentBalanceDetail.supply)
}

// int32 vat = 3;
inline void PaymentBalanceDetail::clear_vat() {
  vat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceDetail::_internal_vat() const {
  return vat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceDetail::vat() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceDetail.vat)
  return _internal_vat();
}
inline void PaymentBalanceDetail::_internal_set_vat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vat_ = value;
}
inline void PaymentBalanceDetail::set_vat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vat(value);
  // @@protoc_insertion_point(field_set:payment.PaymentBalanceDetail.vat)
}

// int32 service = 4;
inline void PaymentBalanceDetail::clear_service() {
  service_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceDetail::_internal_service() const {
  return service_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceDetail::service() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceDetail.service)
  return _internal_service();
}
inline void PaymentBalanceDetail::_internal_set_service(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  service_ = value;
}
inline void PaymentBalanceDetail::set_service(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:payment.PaymentBalanceDetail.service)
}

// -------------------------------------------------------------------

// PaymentBalance

// int32 amount = 1;
inline void PaymentBalance::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalance::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalance::amount() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalance.amount)
  return _internal_amount();
}
inline void PaymentBalance::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void PaymentBalance::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:payment.PaymentBalance.amount)
}

// .payment.PaymentBalanceDetail cash_receipt = 2;
inline bool PaymentBalance::_internal_has_cash_receipt() const {
  return this != internal_default_instance() && cash_receipt_ != nullptr;
}
inline bool PaymentBalance::has_cash_receipt() const {
  return _internal_has_cash_receipt();
}
inline void PaymentBalance::clear_cash_receipt() {
  if (GetArenaForAllocation() == nullptr && cash_receipt_ != nullptr) {
    delete cash_receipt_;
  }
  cash_receipt_ = nullptr;
}
inline const ::payment::PaymentBalanceDetail& PaymentBalance::_internal_cash_receipt() const {
  const ::payment::PaymentBalanceDetail* p = cash_receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentBalanceDetail&>(
      ::payment::_PaymentBalanceDetail_default_instance_);
}
inline const ::payment::PaymentBalanceDetail& PaymentBalance::cash_receipt() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalance.cash_receipt)
  return _internal_cash_receipt();
}
inline void PaymentBalance::unsafe_arena_set_allocated_cash_receipt(
    ::payment::PaymentBalanceDetail* cash_receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cash_receipt_);
  }
  cash_receipt_ = cash_receipt;
  if (cash_receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentBalance.cash_receipt)
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::release_cash_receipt() {
  
  ::payment::PaymentBalanceDetail* temp = cash_receipt_;
  cash_receipt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::unsafe_arena_release_cash_receipt() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalance.cash_receipt)
  
  ::payment::PaymentBalanceDetail* temp = cash_receipt_;
  cash_receipt_ = nullptr;
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::_internal_mutable_cash_receipt() {
  
  if (cash_receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentBalanceDetail>(GetArenaForAllocation());
    cash_receipt_ = p;
  }
  return cash_receipt_;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::mutable_cash_receipt() {
  ::payment::PaymentBalanceDetail* _msg = _internal_mutable_cash_receipt();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalance.cash_receipt)
  return _msg;
}
inline void PaymentBalance::set_allocated_cash_receipt(::payment::PaymentBalanceDetail* cash_receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cash_receipt_;
  }
  if (cash_receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentBalanceDetail>::GetOwningArena(cash_receipt);
    if (message_arena != submessage_arena) {
      cash_receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cash_receipt, submessage_arena);
    }
    
  } else {
    
  }
  cash_receipt_ = cash_receipt;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalance.cash_receipt)
}

// .payment.PaymentBalanceDetail primary = 3;
inline bool PaymentBalance::_internal_has_primary() const {
  return this != internal_default_instance() && primary_ != nullptr;
}
inline bool PaymentBalance::has_primary() const {
  return _internal_has_primary();
}
inline void PaymentBalance::clear_primary() {
  if (GetArenaForAllocation() == nullptr && primary_ != nullptr) {
    delete primary_;
  }
  primary_ = nullptr;
}
inline const ::payment::PaymentBalanceDetail& PaymentBalance::_internal_primary() const {
  const ::payment::PaymentBalanceDetail* p = primary_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentBalanceDetail&>(
      ::payment::_PaymentBalanceDetail_default_instance_);
}
inline const ::payment::PaymentBalanceDetail& PaymentBalance::primary() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalance.primary)
  return _internal_primary();
}
inline void PaymentBalance::unsafe_arena_set_allocated_primary(
    ::payment::PaymentBalanceDetail* primary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_);
  }
  primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentBalance.primary)
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::release_primary() {
  
  ::payment::PaymentBalanceDetail* temp = primary_;
  primary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::unsafe_arena_release_primary() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalance.primary)
  
  ::payment::PaymentBalanceDetail* temp = primary_;
  primary_ = nullptr;
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::_internal_mutable_primary() {
  
  if (primary_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentBalanceDetail>(GetArenaForAllocation());
    primary_ = p;
  }
  return primary_;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::mutable_primary() {
  ::payment::PaymentBalanceDetail* _msg = _internal_mutable_primary();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalance.primary)
  return _msg;
}
inline void PaymentBalance::set_allocated_primary(::payment::PaymentBalanceDetail* primary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete primary_;
  }
  if (primary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentBalanceDetail>::GetOwningArena(primary);
    if (message_arena != submessage_arena) {
      primary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary, submessage_arena);
    }
    
  } else {
    
  }
  primary_ = primary;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalance.primary)
}

// .payment.PaymentBalanceDetail secondary = 4;
inline bool PaymentBalance::_internal_has_secondary() const {
  return this != internal_default_instance() && secondary_ != nullptr;
}
inline bool PaymentBalance::has_secondary() const {
  return _internal_has_secondary();
}
inline void PaymentBalance::clear_secondary() {
  if (GetArenaForAllocation() == nullptr && secondary_ != nullptr) {
    delete secondary_;
  }
  secondary_ = nullptr;
}
inline const ::payment::PaymentBalanceDetail& PaymentBalance::_internal_secondary() const {
  const ::payment::PaymentBalanceDetail* p = secondary_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentBalanceDetail&>(
      ::payment::_PaymentBalanceDetail_default_instance_);
}
inline const ::payment::PaymentBalanceDetail& PaymentBalance::secondary() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalance.secondary)
  return _internal_secondary();
}
inline void PaymentBalance::unsafe_arena_set_allocated_secondary(
    ::payment::PaymentBalanceDetail* secondary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_);
  }
  secondary_ = secondary;
  if (secondary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentBalance.secondary)
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::release_secondary() {
  
  ::payment::PaymentBalanceDetail* temp = secondary_;
  secondary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::unsafe_arena_release_secondary() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalance.secondary)
  
  ::payment::PaymentBalanceDetail* temp = secondary_;
  secondary_ = nullptr;
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::_internal_mutable_secondary() {
  
  if (secondary_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentBalanceDetail>(GetArenaForAllocation());
    secondary_ = p;
  }
  return secondary_;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::mutable_secondary() {
  ::payment::PaymentBalanceDetail* _msg = _internal_mutable_secondary();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalance.secondary)
  return _msg;
}
inline void PaymentBalance::set_allocated_secondary(::payment::PaymentBalanceDetail* secondary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete secondary_;
  }
  if (secondary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentBalanceDetail>::GetOwningArena(secondary);
    if (message_arena != submessage_arena) {
      secondary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary, submessage_arena);
    }
    
  } else {
    
  }
  secondary_ = secondary;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalance.secondary)
}

// .payment.PaymentBalanceDetail discount = 5;
inline bool PaymentBalance::_internal_has_discount() const {
  return this != internal_default_instance() && discount_ != nullptr;
}
inline bool PaymentBalance::has_discount() const {
  return _internal_has_discount();
}
inline void PaymentBalance::clear_discount() {
  if (GetArenaForAllocation() == nullptr && discount_ != nullptr) {
    delete discount_;
  }
  discount_ = nullptr;
}
inline const ::payment::PaymentBalanceDetail& PaymentBalance::_internal_discount() const {
  const ::payment::PaymentBalanceDetail* p = discount_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentBalanceDetail&>(
      ::payment::_PaymentBalanceDetail_default_instance_);
}
inline const ::payment::PaymentBalanceDetail& PaymentBalance::discount() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalance.discount)
  return _internal_discount();
}
inline void PaymentBalance::unsafe_arena_set_allocated_discount(
    ::payment::PaymentBalanceDetail* discount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discount_);
  }
  discount_ = discount;
  if (discount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentBalance.discount)
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::release_discount() {
  
  ::payment::PaymentBalanceDetail* temp = discount_;
  discount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::unsafe_arena_release_discount() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalance.discount)
  
  ::payment::PaymentBalanceDetail* temp = discount_;
  discount_ = nullptr;
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::_internal_mutable_discount() {
  
  if (discount_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentBalanceDetail>(GetArenaForAllocation());
    discount_ = p;
  }
  return discount_;
}
inline ::payment::PaymentBalanceDetail* PaymentBalance::mutable_discount() {
  ::payment::PaymentBalanceDetail* _msg = _internal_mutable_discount();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalance.discount)
  return _msg;
}
inline void PaymentBalance::set_allocated_discount(::payment::PaymentBalanceDetail* discount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete discount_;
  }
  if (discount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentBalanceDetail>::GetOwningArena(discount);
    if (message_arena != submessage_arena) {
      discount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discount, submessage_arena);
    }
    
  } else {
    
  }
  discount_ = discount;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalance.discount)
}

// repeated .payment.PaymentBalanceHistory histories = 6;
inline int PaymentBalance::_internal_histories_size() const {
  return histories_.size();
}
inline int PaymentBalance::histories_size() const {
  return _internal_histories_size();
}
inline void PaymentBalance::clear_histories() {
  histories_.Clear();
}
inline ::payment::PaymentBalanceHistory* PaymentBalance::mutable_histories(int index) {
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalance.histories)
  return histories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::PaymentBalanceHistory >*
PaymentBalance::mutable_histories() {
  // @@protoc_insertion_point(field_mutable_list:payment.PaymentBalance.histories)
  return &histories_;
}
inline const ::payment::PaymentBalanceHistory& PaymentBalance::_internal_histories(int index) const {
  return histories_.Get(index);
}
inline const ::payment::PaymentBalanceHistory& PaymentBalance::histories(int index) const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalance.histories)
  return _internal_histories(index);
}
inline ::payment::PaymentBalanceHistory* PaymentBalance::_internal_add_histories() {
  return histories_.Add();
}
inline ::payment::PaymentBalanceHistory* PaymentBalance::add_histories() {
  ::payment::PaymentBalanceHistory* _add = _internal_add_histories();
  // @@protoc_insertion_point(field_add:payment.PaymentBalance.histories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::PaymentBalanceHistory >&
PaymentBalance::histories() const {
  // @@protoc_insertion_point(field_list:payment.PaymentBalance.histories)
  return histories_;
}

// -------------------------------------------------------------------

// PaymentBalanceHistory

// .payment.PaymentBalanceDetail cash_receipt = 1;
inline bool PaymentBalanceHistory::_internal_has_cash_receipt() const {
  return this != internal_default_instance() && cash_receipt_ != nullptr;
}
inline bool PaymentBalanceHistory::has_cash_receipt() const {
  return _internal_has_cash_receipt();
}
inline void PaymentBalanceHistory::clear_cash_receipt() {
  if (GetArenaForAllocation() == nullptr && cash_receipt_ != nullptr) {
    delete cash_receipt_;
  }
  cash_receipt_ = nullptr;
}
inline const ::payment::PaymentBalanceDetail& PaymentBalanceHistory::_internal_cash_receipt() const {
  const ::payment::PaymentBalanceDetail* p = cash_receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentBalanceDetail&>(
      ::payment::_PaymentBalanceDetail_default_instance_);
}
inline const ::payment::PaymentBalanceDetail& PaymentBalanceHistory::cash_receipt() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceHistory.cash_receipt)
  return _internal_cash_receipt();
}
inline void PaymentBalanceHistory::unsafe_arena_set_allocated_cash_receipt(
    ::payment::PaymentBalanceDetail* cash_receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cash_receipt_);
  }
  cash_receipt_ = cash_receipt;
  if (cash_receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentBalanceHistory.cash_receipt)
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::release_cash_receipt() {
  
  ::payment::PaymentBalanceDetail* temp = cash_receipt_;
  cash_receipt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::unsafe_arena_release_cash_receipt() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalanceHistory.cash_receipt)
  
  ::payment::PaymentBalanceDetail* temp = cash_receipt_;
  cash_receipt_ = nullptr;
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::_internal_mutable_cash_receipt() {
  
  if (cash_receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentBalanceDetail>(GetArenaForAllocation());
    cash_receipt_ = p;
  }
  return cash_receipt_;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::mutable_cash_receipt() {
  ::payment::PaymentBalanceDetail* _msg = _internal_mutable_cash_receipt();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalanceHistory.cash_receipt)
  return _msg;
}
inline void PaymentBalanceHistory::set_allocated_cash_receipt(::payment::PaymentBalanceDetail* cash_receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cash_receipt_;
  }
  if (cash_receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentBalanceDetail>::GetOwningArena(cash_receipt);
    if (message_arena != submessage_arena) {
      cash_receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cash_receipt, submessage_arena);
    }
    
  } else {
    
  }
  cash_receipt_ = cash_receipt;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalanceHistory.cash_receipt)
}

// .payment.PaymentBalanceDetail primary = 2;
inline bool PaymentBalanceHistory::_internal_has_primary() const {
  return this != internal_default_instance() && primary_ != nullptr;
}
inline bool PaymentBalanceHistory::has_primary() const {
  return _internal_has_primary();
}
inline void PaymentBalanceHistory::clear_primary() {
  if (GetArenaForAllocation() == nullptr && primary_ != nullptr) {
    delete primary_;
  }
  primary_ = nullptr;
}
inline const ::payment::PaymentBalanceDetail& PaymentBalanceHistory::_internal_primary() const {
  const ::payment::PaymentBalanceDetail* p = primary_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentBalanceDetail&>(
      ::payment::_PaymentBalanceDetail_default_instance_);
}
inline const ::payment::PaymentBalanceDetail& PaymentBalanceHistory::primary() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceHistory.primary)
  return _internal_primary();
}
inline void PaymentBalanceHistory::unsafe_arena_set_allocated_primary(
    ::payment::PaymentBalanceDetail* primary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_);
  }
  primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentBalanceHistory.primary)
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::release_primary() {
  
  ::payment::PaymentBalanceDetail* temp = primary_;
  primary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::unsafe_arena_release_primary() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalanceHistory.primary)
  
  ::payment::PaymentBalanceDetail* temp = primary_;
  primary_ = nullptr;
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::_internal_mutable_primary() {
  
  if (primary_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentBalanceDetail>(GetArenaForAllocation());
    primary_ = p;
  }
  return primary_;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::mutable_primary() {
  ::payment::PaymentBalanceDetail* _msg = _internal_mutable_primary();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalanceHistory.primary)
  return _msg;
}
inline void PaymentBalanceHistory::set_allocated_primary(::payment::PaymentBalanceDetail* primary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete primary_;
  }
  if (primary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentBalanceDetail>::GetOwningArena(primary);
    if (message_arena != submessage_arena) {
      primary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary, submessage_arena);
    }
    
  } else {
    
  }
  primary_ = primary;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalanceHistory.primary)
}

// .payment.PaymentBalanceDetail secondary = 3;
inline bool PaymentBalanceHistory::_internal_has_secondary() const {
  return this != internal_default_instance() && secondary_ != nullptr;
}
inline bool PaymentBalanceHistory::has_secondary() const {
  return _internal_has_secondary();
}
inline void PaymentBalanceHistory::clear_secondary() {
  if (GetArenaForAllocation() == nullptr && secondary_ != nullptr) {
    delete secondary_;
  }
  secondary_ = nullptr;
}
inline const ::payment::PaymentBalanceDetail& PaymentBalanceHistory::_internal_secondary() const {
  const ::payment::PaymentBalanceDetail* p = secondary_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentBalanceDetail&>(
      ::payment::_PaymentBalanceDetail_default_instance_);
}
inline const ::payment::PaymentBalanceDetail& PaymentBalanceHistory::secondary() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceHistory.secondary)
  return _internal_secondary();
}
inline void PaymentBalanceHistory::unsafe_arena_set_allocated_secondary(
    ::payment::PaymentBalanceDetail* secondary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_);
  }
  secondary_ = secondary;
  if (secondary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentBalanceHistory.secondary)
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::release_secondary() {
  
  ::payment::PaymentBalanceDetail* temp = secondary_;
  secondary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::unsafe_arena_release_secondary() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalanceHistory.secondary)
  
  ::payment::PaymentBalanceDetail* temp = secondary_;
  secondary_ = nullptr;
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::_internal_mutable_secondary() {
  
  if (secondary_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentBalanceDetail>(GetArenaForAllocation());
    secondary_ = p;
  }
  return secondary_;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::mutable_secondary() {
  ::payment::PaymentBalanceDetail* _msg = _internal_mutable_secondary();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalanceHistory.secondary)
  return _msg;
}
inline void PaymentBalanceHistory::set_allocated_secondary(::payment::PaymentBalanceDetail* secondary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete secondary_;
  }
  if (secondary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentBalanceDetail>::GetOwningArena(secondary);
    if (message_arena != submessage_arena) {
      secondary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary, submessage_arena);
    }
    
  } else {
    
  }
  secondary_ = secondary;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalanceHistory.secondary)
}

// .payment.PaymentBalanceDetail discount = 4;
inline bool PaymentBalanceHistory::_internal_has_discount() const {
  return this != internal_default_instance() && discount_ != nullptr;
}
inline bool PaymentBalanceHistory::has_discount() const {
  return _internal_has_discount();
}
inline void PaymentBalanceHistory::clear_discount() {
  if (GetArenaForAllocation() == nullptr && discount_ != nullptr) {
    delete discount_;
  }
  discount_ = nullptr;
}
inline const ::payment::PaymentBalanceDetail& PaymentBalanceHistory::_internal_discount() const {
  const ::payment::PaymentBalanceDetail* p = discount_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentBalanceDetail&>(
      ::payment::_PaymentBalanceDetail_default_instance_);
}
inline const ::payment::PaymentBalanceDetail& PaymentBalanceHistory::discount() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceHistory.discount)
  return _internal_discount();
}
inline void PaymentBalanceHistory::unsafe_arena_set_allocated_discount(
    ::payment::PaymentBalanceDetail* discount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discount_);
  }
  discount_ = discount;
  if (discount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentBalanceHistory.discount)
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::release_discount() {
  
  ::payment::PaymentBalanceDetail* temp = discount_;
  discount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::unsafe_arena_release_discount() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalanceHistory.discount)
  
  ::payment::PaymentBalanceDetail* temp = discount_;
  discount_ = nullptr;
  return temp;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::_internal_mutable_discount() {
  
  if (discount_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentBalanceDetail>(GetArenaForAllocation());
    discount_ = p;
  }
  return discount_;
}
inline ::payment::PaymentBalanceDetail* PaymentBalanceHistory::mutable_discount() {
  ::payment::PaymentBalanceDetail* _msg = _internal_mutable_discount();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalanceHistory.discount)
  return _msg;
}
inline void PaymentBalanceHistory::set_allocated_discount(::payment::PaymentBalanceDetail* discount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete discount_;
  }
  if (discount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentBalanceDetail>::GetOwningArena(discount);
    if (message_arena != submessage_arena) {
      discount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discount, submessage_arena);
    }
    
  } else {
    
  }
  discount_ = discount;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalanceHistory.discount)
}

// int32 created = 5;
inline void PaymentBalanceHistory::clear_created() {
  created_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceHistory::_internal_created() const {
  return created_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceHistory::created() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceHistory.created)
  return _internal_created();
}
inline void PaymentBalanceHistory::_internal_set_created(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  created_ = value;
}
inline void PaymentBalanceHistory::set_created(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:payment.PaymentBalanceHistory.created)
}

// -------------------------------------------------------------------

// PaymentRequest

// string imp_uid = 1;
inline void PaymentRequest::clear_imp_uid() {
  imp_uid_.ClearToEmpty();
}
inline const std::string& PaymentRequest::imp_uid() const {
  // @@protoc_insertion_point(field_get:payment.PaymentRequest.imp_uid)
  return _internal_imp_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentRequest::set_imp_uid(ArgT0&& arg0, ArgT... args) {
 
 imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentRequest.imp_uid)
}
inline std::string* PaymentRequest::mutable_imp_uid() {
  std::string* _s = _internal_mutable_imp_uid();
  // @@protoc_insertion_point(field_mutable:payment.PaymentRequest.imp_uid)
  return _s;
}
inline const std::string& PaymentRequest::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void PaymentRequest::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentRequest::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentRequest::release_imp_uid() {
  // @@protoc_insertion_point(field_release:payment.PaymentRequest.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentRequest::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentRequest.imp_uid)
}

// -------------------------------------------------------------------

// PaymentResponse

// int32 code = 1;
inline void PaymentResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentResponse::code() const {
  // @@protoc_insertion_point(field_get:payment.PaymentResponse.code)
  return _internal_code();
}
inline void PaymentResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PaymentResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:payment.PaymentResponse.code)
}

// string message = 2;
inline void PaymentResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PaymentResponse::message() const {
  // @@protoc_insertion_point(field_get:payment.PaymentResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentResponse.message)
}
inline std::string* PaymentResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:payment.PaymentResponse.message)
  return _s;
}
inline const std::string& PaymentResponse::_internal_message() const {
  return message_.Get();
}
inline void PaymentResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentResponse::release_message() {
  // @@protoc_insertion_point(field_release:payment.PaymentResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentResponse.message)
}

// .payment.Payment response = 3;
inline bool PaymentResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool PaymentResponse::has_response() const {
  return _internal_has_response();
}
inline void PaymentResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::payment::Payment& PaymentResponse::_internal_response() const {
  const ::payment::Payment* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::Payment&>(
      ::payment::_Payment_default_instance_);
}
inline const ::payment::Payment& PaymentResponse::response() const {
  // @@protoc_insertion_point(field_get:payment.PaymentResponse.response)
  return _internal_response();
}
inline void PaymentResponse::unsafe_arena_set_allocated_response(
    ::payment::Payment* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentResponse.response)
}
inline ::payment::Payment* PaymentResponse::release_response() {
  
  ::payment::Payment* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::Payment* PaymentResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:payment.PaymentResponse.response)
  
  ::payment::Payment* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::payment::Payment* PaymentResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::Payment>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::payment::Payment* PaymentResponse::mutable_response() {
  ::payment::Payment* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:payment.PaymentResponse.response)
  return _msg;
}
inline void PaymentResponse::set_allocated_response(::payment::Payment* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::Payment>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentResponse.response)
}

// -------------------------------------------------------------------

// PaymentsRequest

// repeated string imp_uid = 1;
inline int PaymentsRequest::_internal_imp_uid_size() const {
  return imp_uid_.size();
}
inline int PaymentsRequest::imp_uid_size() const {
  return _internal_imp_uid_size();
}
inline void PaymentsRequest::clear_imp_uid() {
  imp_uid_.Clear();
}
inline std::string* PaymentsRequest::add_imp_uid() {
  std::string* _s = _internal_add_imp_uid();
  // @@protoc_insertion_point(field_add_mutable:payment.PaymentsRequest.imp_uid)
  return _s;
}
inline const std::string& PaymentsRequest::_internal_imp_uid(int index) const {
  return imp_uid_.Get(index);
}
inline const std::string& PaymentsRequest::imp_uid(int index) const {
  // @@protoc_insertion_point(field_get:payment.PaymentsRequest.imp_uid)
  return _internal_imp_uid(index);
}
inline std::string* PaymentsRequest::mutable_imp_uid(int index) {
  // @@protoc_insertion_point(field_mutable:payment.PaymentsRequest.imp_uid)
  return imp_uid_.Mutable(index);
}
inline void PaymentsRequest::set_imp_uid(int index, const std::string& value) {
  imp_uid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:payment.PaymentsRequest.imp_uid)
}
inline void PaymentsRequest::set_imp_uid(int index, std::string&& value) {
  imp_uid_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:payment.PaymentsRequest.imp_uid)
}
inline void PaymentsRequest::set_imp_uid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  imp_uid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:payment.PaymentsRequest.imp_uid)
}
inline void PaymentsRequest::set_imp_uid(int index, const char* value, size_t size) {
  imp_uid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:payment.PaymentsRequest.imp_uid)
}
inline std::string* PaymentsRequest::_internal_add_imp_uid() {
  return imp_uid_.Add();
}
inline void PaymentsRequest::add_imp_uid(const std::string& value) {
  imp_uid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:payment.PaymentsRequest.imp_uid)
}
inline void PaymentsRequest::add_imp_uid(std::string&& value) {
  imp_uid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:payment.PaymentsRequest.imp_uid)
}
inline void PaymentsRequest::add_imp_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  imp_uid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:payment.PaymentsRequest.imp_uid)
}
inline void PaymentsRequest::add_imp_uid(const char* value, size_t size) {
  imp_uid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:payment.PaymentsRequest.imp_uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PaymentsRequest::imp_uid() const {
  // @@protoc_insertion_point(field_list:payment.PaymentsRequest.imp_uid)
  return imp_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PaymentsRequest::mutable_imp_uid() {
  // @@protoc_insertion_point(field_mutable_list:payment.PaymentsRequest.imp_uid)
  return &imp_uid_;
}

// -------------------------------------------------------------------

// PaymentsResponse

// int32 code = 1;
inline void PaymentsResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentsResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentsResponse::code() const {
  // @@protoc_insertion_point(field_get:payment.PaymentsResponse.code)
  return _internal_code();
}
inline void PaymentsResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PaymentsResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:payment.PaymentsResponse.code)
}

// string message = 2;
inline void PaymentsResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PaymentsResponse::message() const {
  // @@protoc_insertion_point(field_get:payment.PaymentsResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentsResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentsResponse.message)
}
inline std::string* PaymentsResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:payment.PaymentsResponse.message)
  return _s;
}
inline const std::string& PaymentsResponse::_internal_message() const {
  return message_.Get();
}
inline void PaymentsResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentsResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentsResponse::release_message() {
  // @@protoc_insertion_point(field_release:payment.PaymentsResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentsResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentsResponse.message)
}

// repeated .payment.Payment response = 3;
inline int PaymentsResponse::_internal_response_size() const {
  return response_.size();
}
inline int PaymentsResponse::response_size() const {
  return _internal_response_size();
}
inline void PaymentsResponse::clear_response() {
  response_.Clear();
}
inline ::payment::Payment* PaymentsResponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:payment.PaymentsResponse.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >*
PaymentsResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:payment.PaymentsResponse.response)
  return &response_;
}
inline const ::payment::Payment& PaymentsResponse::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::payment::Payment& PaymentsResponse::response(int index) const {
  // @@protoc_insertion_point(field_get:payment.PaymentsResponse.response)
  return _internal_response(index);
}
inline ::payment::Payment* PaymentsResponse::_internal_add_response() {
  return response_.Add();
}
inline ::payment::Payment* PaymentsResponse::add_response() {
  ::payment::Payment* _add = _internal_add_response();
  // @@protoc_insertion_point(field_add:payment.PaymentsResponse.response)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >&
PaymentsResponse::response() const {
  // @@protoc_insertion_point(field_list:payment.PaymentsResponse.response)
  return response_;
}

// -------------------------------------------------------------------

// PaymentsMerchantUidRequest

// string merchant_uid = 1;
inline void PaymentsMerchantUidRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& PaymentsMerchantUidRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:payment.PaymentsMerchantUidRequest.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentsMerchantUidRequest::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentsMerchantUidRequest.merchant_uid)
}
inline std::string* PaymentsMerchantUidRequest::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:payment.PaymentsMerchantUidRequest.merchant_uid)
  return _s;
}
inline const std::string& PaymentsMerchantUidRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void PaymentsMerchantUidRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentsMerchantUidRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentsMerchantUidRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:payment.PaymentsMerchantUidRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentsMerchantUidRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentsMerchantUidRequest.merchant_uid)
}

// string status = 2;
inline void PaymentsMerchantUidRequest::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& PaymentsMerchantUidRequest::status() const {
  // @@protoc_insertion_point(field_get:payment.PaymentsMerchantUidRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentsMerchantUidRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentsMerchantUidRequest.status)
}
inline std::string* PaymentsMerchantUidRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:payment.PaymentsMerchantUidRequest.status)
  return _s;
}
inline const std::string& PaymentsMerchantUidRequest::_internal_status() const {
  return status_.Get();
}
inline void PaymentsMerchantUidRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentsMerchantUidRequest::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentsMerchantUidRequest::release_status() {
  // @@protoc_insertion_point(field_release:payment.PaymentsMerchantUidRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentsMerchantUidRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentsMerchantUidRequest.status)
}

// int32 page = 3;
inline void PaymentsMerchantUidRequest::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentsMerchantUidRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentsMerchantUidRequest::page() const {
  // @@protoc_insertion_point(field_get:payment.PaymentsMerchantUidRequest.page)
  return _internal_page();
}
inline void PaymentsMerchantUidRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void PaymentsMerchantUidRequest::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:payment.PaymentsMerchantUidRequest.page)
}

// string sorting = 4;
inline void PaymentsMerchantUidRequest::clear_sorting() {
  sorting_.ClearToEmpty();
}
inline const std::string& PaymentsMerchantUidRequest::sorting() const {
  // @@protoc_insertion_point(field_get:payment.PaymentsMerchantUidRequest.sorting)
  return _internal_sorting();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentsMerchantUidRequest::set_sorting(ArgT0&& arg0, ArgT... args) {
 
 sorting_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentsMerchantUidRequest.sorting)
}
inline std::string* PaymentsMerchantUidRequest::mutable_sorting() {
  std::string* _s = _internal_mutable_sorting();
  // @@protoc_insertion_point(field_mutable:payment.PaymentsMerchantUidRequest.sorting)
  return _s;
}
inline const std::string& PaymentsMerchantUidRequest::_internal_sorting() const {
  return sorting_.Get();
}
inline void PaymentsMerchantUidRequest::_internal_set_sorting(const std::string& value) {
  
  sorting_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentsMerchantUidRequest::_internal_mutable_sorting() {
  
  return sorting_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentsMerchantUidRequest::release_sorting() {
  // @@protoc_insertion_point(field_release:payment.PaymentsMerchantUidRequest.sorting)
  return sorting_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentsMerchantUidRequest::set_allocated_sorting(std::string* sorting) {
  if (sorting != nullptr) {
    
  } else {
    
  }
  sorting_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sorting,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentsMerchantUidRequest.sorting)
}

// -------------------------------------------------------------------

// PaymentsMerchantUidResponse

// int32 code = 1;
inline void PaymentsMerchantUidResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentsMerchantUidResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentsMerchantUidResponse::code() const {
  // @@protoc_insertion_point(field_get:payment.PaymentsMerchantUidResponse.code)
  return _internal_code();
}
inline void PaymentsMerchantUidResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PaymentsMerchantUidResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:payment.PaymentsMerchantUidResponse.code)
}

// string message = 2;
inline void PaymentsMerchantUidResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PaymentsMerchantUidResponse::message() const {
  // @@protoc_insertion_point(field_get:payment.PaymentsMerchantUidResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentsMerchantUidResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentsMerchantUidResponse.message)
}
inline std::string* PaymentsMerchantUidResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:payment.PaymentsMerchantUidResponse.message)
  return _s;
}
inline const std::string& PaymentsMerchantUidResponse::_internal_message() const {
  return message_.Get();
}
inline void PaymentsMerchantUidResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentsMerchantUidResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentsMerchantUidResponse::release_message() {
  // @@protoc_insertion_point(field_release:payment.PaymentsMerchantUidResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentsMerchantUidResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentsMerchantUidResponse.message)
}

// .payment.PaymentPage response = 3;
inline bool PaymentsMerchantUidResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool PaymentsMerchantUidResponse::has_response() const {
  return _internal_has_response();
}
inline void PaymentsMerchantUidResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::payment::PaymentPage& PaymentsMerchantUidResponse::_internal_response() const {
  const ::payment::PaymentPage* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentPage&>(
      ::payment::_PaymentPage_default_instance_);
}
inline const ::payment::PaymentPage& PaymentsMerchantUidResponse::response() const {
  // @@protoc_insertion_point(field_get:payment.PaymentsMerchantUidResponse.response)
  return _internal_response();
}
inline void PaymentsMerchantUidResponse::unsafe_arena_set_allocated_response(
    ::payment::PaymentPage* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentsMerchantUidResponse.response)
}
inline ::payment::PaymentPage* PaymentsMerchantUidResponse::release_response() {
  
  ::payment::PaymentPage* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentPage* PaymentsMerchantUidResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:payment.PaymentsMerchantUidResponse.response)
  
  ::payment::PaymentPage* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::payment::PaymentPage* PaymentsMerchantUidResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentPage>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::payment::PaymentPage* PaymentsMerchantUidResponse::mutable_response() {
  ::payment::PaymentPage* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:payment.PaymentsMerchantUidResponse.response)
  return _msg;
}
inline void PaymentsMerchantUidResponse::set_allocated_response(::payment::PaymentPage* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentPage>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentsMerchantUidResponse.response)
}

// -------------------------------------------------------------------

// PaymentStatusRequest

// string status = 1;
inline void PaymentStatusRequest::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& PaymentStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:payment.PaymentStatusRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentStatusRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentStatusRequest.status)
}
inline std::string* PaymentStatusRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:payment.PaymentStatusRequest.status)
  return _s;
}
inline const std::string& PaymentStatusRequest::_internal_status() const {
  return status_.Get();
}
inline void PaymentStatusRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentStatusRequest::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentStatusRequest::release_status() {
  // @@protoc_insertion_point(field_release:payment.PaymentStatusRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentStatusRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentStatusRequest.status)
}

// int32 page = 2;
inline void PaymentStatusRequest::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentStatusRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentStatusRequest::page() const {
  // @@protoc_insertion_point(field_get:payment.PaymentStatusRequest.page)
  return _internal_page();
}
inline void PaymentStatusRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void PaymentStatusRequest::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:payment.PaymentStatusRequest.page)
}

// int32 limit = 3;
inline void PaymentStatusRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentStatusRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentStatusRequest::limit() const {
  // @@protoc_insertion_point(field_get:payment.PaymentStatusRequest.limit)
  return _internal_limit();
}
inline void PaymentStatusRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void PaymentStatusRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:payment.PaymentStatusRequest.limit)
}

// int32 from = 4;
inline void PaymentStatusRequest::clear_from() {
  from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentStatusRequest::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentStatusRequest::from() const {
  // @@protoc_insertion_point(field_get:payment.PaymentStatusRequest.from)
  return _internal_from();
}
inline void PaymentStatusRequest::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ = value;
}
inline void PaymentStatusRequest::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:payment.PaymentStatusRequest.from)
}

// int32 to = 5;
inline void PaymentStatusRequest::clear_to() {
  to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentStatusRequest::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentStatusRequest::to() const {
  // @@protoc_insertion_point(field_get:payment.PaymentStatusRequest.to)
  return _internal_to();
}
inline void PaymentStatusRequest::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ = value;
}
inline void PaymentStatusRequest::set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:payment.PaymentStatusRequest.to)
}

// string sorting = 6;
inline void PaymentStatusRequest::clear_sorting() {
  sorting_.ClearToEmpty();
}
inline const std::string& PaymentStatusRequest::sorting() const {
  // @@protoc_insertion_point(field_get:payment.PaymentStatusRequest.sorting)
  return _internal_sorting();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentStatusRequest::set_sorting(ArgT0&& arg0, ArgT... args) {
 
 sorting_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentStatusRequest.sorting)
}
inline std::string* PaymentStatusRequest::mutable_sorting() {
  std::string* _s = _internal_mutable_sorting();
  // @@protoc_insertion_point(field_mutable:payment.PaymentStatusRequest.sorting)
  return _s;
}
inline const std::string& PaymentStatusRequest::_internal_sorting() const {
  return sorting_.Get();
}
inline void PaymentStatusRequest::_internal_set_sorting(const std::string& value) {
  
  sorting_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentStatusRequest::_internal_mutable_sorting() {
  
  return sorting_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentStatusRequest::release_sorting() {
  // @@protoc_insertion_point(field_release:payment.PaymentStatusRequest.sorting)
  return sorting_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentStatusRequest::set_allocated_sorting(std::string* sorting) {
  if (sorting != nullptr) {
    
  } else {
    
  }
  sorting_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sorting,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentStatusRequest.sorting)
}

// -------------------------------------------------------------------

// PaymentStatusResponse

// int32 code = 1;
inline void PaymentStatusResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentStatusResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentStatusResponse::code() const {
  // @@protoc_insertion_point(field_get:payment.PaymentStatusResponse.code)
  return _internal_code();
}
inline void PaymentStatusResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PaymentStatusResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:payment.PaymentStatusResponse.code)
}

// string message = 2;
inline void PaymentStatusResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PaymentStatusResponse::message() const {
  // @@protoc_insertion_point(field_get:payment.PaymentStatusResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentStatusResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentStatusResponse.message)
}
inline std::string* PaymentStatusResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:payment.PaymentStatusResponse.message)
  return _s;
}
inline const std::string& PaymentStatusResponse::_internal_message() const {
  return message_.Get();
}
inline void PaymentStatusResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentStatusResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentStatusResponse::release_message() {
  // @@protoc_insertion_point(field_release:payment.PaymentStatusResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentStatusResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentStatusResponse.message)
}

// .payment.PaymentPage response = 3;
inline bool PaymentStatusResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool PaymentStatusResponse::has_response() const {
  return _internal_has_response();
}
inline void PaymentStatusResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::payment::PaymentPage& PaymentStatusResponse::_internal_response() const {
  const ::payment::PaymentPage* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentPage&>(
      ::payment::_PaymentPage_default_instance_);
}
inline const ::payment::PaymentPage& PaymentStatusResponse::response() const {
  // @@protoc_insertion_point(field_get:payment.PaymentStatusResponse.response)
  return _internal_response();
}
inline void PaymentStatusResponse::unsafe_arena_set_allocated_response(
    ::payment::PaymentPage* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentStatusResponse.response)
}
inline ::payment::PaymentPage* PaymentStatusResponse::release_response() {
  
  ::payment::PaymentPage* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentPage* PaymentStatusResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:payment.PaymentStatusResponse.response)
  
  ::payment::PaymentPage* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::payment::PaymentPage* PaymentStatusResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentPage>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::payment::PaymentPage* PaymentStatusResponse::mutable_response() {
  ::payment::PaymentPage* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:payment.PaymentStatusResponse.response)
  return _msg;
}
inline void PaymentStatusResponse::set_allocated_response(::payment::PaymentPage* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentPage>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentStatusResponse.response)
}

// -------------------------------------------------------------------

// PaymentMerchantUidRequest

// string merchant_uid = 1;
inline void PaymentMerchantUidRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& PaymentMerchantUidRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:payment.PaymentMerchantUidRequest.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentMerchantUidRequest::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentMerchantUidRequest.merchant_uid)
}
inline std::string* PaymentMerchantUidRequest::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:payment.PaymentMerchantUidRequest.merchant_uid)
  return _s;
}
inline const std::string& PaymentMerchantUidRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void PaymentMerchantUidRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentMerchantUidRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentMerchantUidRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:payment.PaymentMerchantUidRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentMerchantUidRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentMerchantUidRequest.merchant_uid)
}

// string status = 2;
inline void PaymentMerchantUidRequest::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& PaymentMerchantUidRequest::status() const {
  // @@protoc_insertion_point(field_get:payment.PaymentMerchantUidRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentMerchantUidRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentMerchantUidRequest.status)
}
inline std::string* PaymentMerchantUidRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:payment.PaymentMerchantUidRequest.status)
  return _s;
}
inline const std::string& PaymentMerchantUidRequest::_internal_status() const {
  return status_.Get();
}
inline void PaymentMerchantUidRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentMerchantUidRequest::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentMerchantUidRequest::release_status() {
  // @@protoc_insertion_point(field_release:payment.PaymentMerchantUidRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentMerchantUidRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentMerchantUidRequest.status)
}

// string sorting = 3;
inline void PaymentMerchantUidRequest::clear_sorting() {
  sorting_.ClearToEmpty();
}
inline const std::string& PaymentMerchantUidRequest::sorting() const {
  // @@protoc_insertion_point(field_get:payment.PaymentMerchantUidRequest.sorting)
  return _internal_sorting();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentMerchantUidRequest::set_sorting(ArgT0&& arg0, ArgT... args) {
 
 sorting_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentMerchantUidRequest.sorting)
}
inline std::string* PaymentMerchantUidRequest::mutable_sorting() {
  std::string* _s = _internal_mutable_sorting();
  // @@protoc_insertion_point(field_mutable:payment.PaymentMerchantUidRequest.sorting)
  return _s;
}
inline const std::string& PaymentMerchantUidRequest::_internal_sorting() const {
  return sorting_.Get();
}
inline void PaymentMerchantUidRequest::_internal_set_sorting(const std::string& value) {
  
  sorting_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentMerchantUidRequest::_internal_mutable_sorting() {
  
  return sorting_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentMerchantUidRequest::release_sorting() {
  // @@protoc_insertion_point(field_release:payment.PaymentMerchantUidRequest.sorting)
  return sorting_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentMerchantUidRequest::set_allocated_sorting(std::string* sorting) {
  if (sorting != nullptr) {
    
  } else {
    
  }
  sorting_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sorting,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentMerchantUidRequest.sorting)
}

// -------------------------------------------------------------------

// PaymentMerchantUidResponse

// int32 code = 1;
inline void PaymentMerchantUidResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentMerchantUidResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentMerchantUidResponse::code() const {
  // @@protoc_insertion_point(field_get:payment.PaymentMerchantUidResponse.code)
  return _internal_code();
}
inline void PaymentMerchantUidResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PaymentMerchantUidResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:payment.PaymentMerchantUidResponse.code)
}

// string message = 2;
inline void PaymentMerchantUidResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PaymentMerchantUidResponse::message() const {
  // @@protoc_insertion_point(field_get:payment.PaymentMerchantUidResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentMerchantUidResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentMerchantUidResponse.message)
}
inline std::string* PaymentMerchantUidResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:payment.PaymentMerchantUidResponse.message)
  return _s;
}
inline const std::string& PaymentMerchantUidResponse::_internal_message() const {
  return message_.Get();
}
inline void PaymentMerchantUidResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentMerchantUidResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentMerchantUidResponse::release_message() {
  // @@protoc_insertion_point(field_release:payment.PaymentMerchantUidResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentMerchantUidResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentMerchantUidResponse.message)
}

// .payment.Payment response = 3;
inline bool PaymentMerchantUidResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool PaymentMerchantUidResponse::has_response() const {
  return _internal_has_response();
}
inline void PaymentMerchantUidResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::payment::Payment& PaymentMerchantUidResponse::_internal_response() const {
  const ::payment::Payment* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::Payment&>(
      ::payment::_Payment_default_instance_);
}
inline const ::payment::Payment& PaymentMerchantUidResponse::response() const {
  // @@protoc_insertion_point(field_get:payment.PaymentMerchantUidResponse.response)
  return _internal_response();
}
inline void PaymentMerchantUidResponse::unsafe_arena_set_allocated_response(
    ::payment::Payment* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentMerchantUidResponse.response)
}
inline ::payment::Payment* PaymentMerchantUidResponse::release_response() {
  
  ::payment::Payment* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::Payment* PaymentMerchantUidResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:payment.PaymentMerchantUidResponse.response)
  
  ::payment::Payment* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::payment::Payment* PaymentMerchantUidResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::Payment>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::payment::Payment* PaymentMerchantUidResponse::mutable_response() {
  ::payment::Payment* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:payment.PaymentMerchantUidResponse.response)
  return _msg;
}
inline void PaymentMerchantUidResponse::set_allocated_response(::payment::Payment* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::Payment>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentMerchantUidResponse.response)
}

// -------------------------------------------------------------------

// PaymentCancelRequest

// string imp_uid = 1;
inline void PaymentCancelRequest::clear_imp_uid() {
  imp_uid_.ClearToEmpty();
}
inline const std::string& PaymentCancelRequest::imp_uid() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelRequest.imp_uid)
  return _internal_imp_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentCancelRequest::set_imp_uid(ArgT0&& arg0, ArgT... args) {
 
 imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentCancelRequest.imp_uid)
}
inline std::string* PaymentCancelRequest::mutable_imp_uid() {
  std::string* _s = _internal_mutable_imp_uid();
  // @@protoc_insertion_point(field_mutable:payment.PaymentCancelRequest.imp_uid)
  return _s;
}
inline const std::string& PaymentCancelRequest::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void PaymentCancelRequest::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::release_imp_uid() {
  // @@protoc_insertion_point(field_release:payment.PaymentCancelRequest.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentCancelRequest::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentCancelRequest.imp_uid)
}

// string merchant_uid = 2;
inline void PaymentCancelRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& PaymentCancelRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelRequest.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentCancelRequest::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentCancelRequest.merchant_uid)
}
inline std::string* PaymentCancelRequest::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:payment.PaymentCancelRequest.merchant_uid)
  return _s;
}
inline const std::string& PaymentCancelRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void PaymentCancelRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:payment.PaymentCancelRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentCancelRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentCancelRequest.merchant_uid)
}

// double amount = 3;
inline void PaymentCancelRequest::clear_amount() {
  amount_ = 0;
}
inline double PaymentCancelRequest::_internal_amount() const {
  return amount_;
}
inline double PaymentCancelRequest::amount() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelRequest.amount)
  return _internal_amount();
}
inline void PaymentCancelRequest::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void PaymentCancelRequest::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:payment.PaymentCancelRequest.amount)
}

// double tax_free = 4;
inline void PaymentCancelRequest::clear_tax_free() {
  tax_free_ = 0;
}
inline double PaymentCancelRequest::_internal_tax_free() const {
  return tax_free_;
}
inline double PaymentCancelRequest::tax_free() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelRequest.tax_free)
  return _internal_tax_free();
}
inline void PaymentCancelRequest::_internal_set_tax_free(double value) {
  
  tax_free_ = value;
}
inline void PaymentCancelRequest::set_tax_free(double value) {
  _internal_set_tax_free(value);
  // @@protoc_insertion_point(field_set:payment.PaymentCancelRequest.tax_free)
}

// double checksum = 5;
inline void PaymentCancelRequest::clear_checksum() {
  checksum_ = 0;
}
inline double PaymentCancelRequest::_internal_checksum() const {
  return checksum_;
}
inline double PaymentCancelRequest::checksum() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelRequest.checksum)
  return _internal_checksum();
}
inline void PaymentCancelRequest::_internal_set_checksum(double value) {
  
  checksum_ = value;
}
inline void PaymentCancelRequest::set_checksum(double value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:payment.PaymentCancelRequest.checksum)
}

// string reason = 6;
inline void PaymentCancelRequest::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& PaymentCancelRequest::reason() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelRequest.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentCancelRequest::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentCancelRequest.reason)
}
inline std::string* PaymentCancelRequest::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:payment.PaymentCancelRequest.reason)
  return _s;
}
inline const std::string& PaymentCancelRequest::_internal_reason() const {
  return reason_.Get();
}
inline void PaymentCancelRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::release_reason() {
  // @@protoc_insertion_point(field_release:payment.PaymentCancelRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentCancelRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentCancelRequest.reason)
}

// string refund_holder = 7;
inline void PaymentCancelRequest::clear_refund_holder() {
  refund_holder_.ClearToEmpty();
}
inline const std::string& PaymentCancelRequest::refund_holder() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelRequest.refund_holder)
  return _internal_refund_holder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentCancelRequest::set_refund_holder(ArgT0&& arg0, ArgT... args) {
 
 refund_holder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentCancelRequest.refund_holder)
}
inline std::string* PaymentCancelRequest::mutable_refund_holder() {
  std::string* _s = _internal_mutable_refund_holder();
  // @@protoc_insertion_point(field_mutable:payment.PaymentCancelRequest.refund_holder)
  return _s;
}
inline const std::string& PaymentCancelRequest::_internal_refund_holder() const {
  return refund_holder_.Get();
}
inline void PaymentCancelRequest::_internal_set_refund_holder(const std::string& value) {
  
  refund_holder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::_internal_mutable_refund_holder() {
  
  return refund_holder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::release_refund_holder() {
  // @@protoc_insertion_point(field_release:payment.PaymentCancelRequest.refund_holder)
  return refund_holder_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentCancelRequest::set_allocated_refund_holder(std::string* refund_holder) {
  if (refund_holder != nullptr) {
    
  } else {
    
  }
  refund_holder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refund_holder,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentCancelRequest.refund_holder)
}

// string refund_bank = 8;
inline void PaymentCancelRequest::clear_refund_bank() {
  refund_bank_.ClearToEmpty();
}
inline const std::string& PaymentCancelRequest::refund_bank() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelRequest.refund_bank)
  return _internal_refund_bank();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentCancelRequest::set_refund_bank(ArgT0&& arg0, ArgT... args) {
 
 refund_bank_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentCancelRequest.refund_bank)
}
inline std::string* PaymentCancelRequest::mutable_refund_bank() {
  std::string* _s = _internal_mutable_refund_bank();
  // @@protoc_insertion_point(field_mutable:payment.PaymentCancelRequest.refund_bank)
  return _s;
}
inline const std::string& PaymentCancelRequest::_internal_refund_bank() const {
  return refund_bank_.Get();
}
inline void PaymentCancelRequest::_internal_set_refund_bank(const std::string& value) {
  
  refund_bank_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::_internal_mutable_refund_bank() {
  
  return refund_bank_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::release_refund_bank() {
  // @@protoc_insertion_point(field_release:payment.PaymentCancelRequest.refund_bank)
  return refund_bank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentCancelRequest::set_allocated_refund_bank(std::string* refund_bank) {
  if (refund_bank != nullptr) {
    
  } else {
    
  }
  refund_bank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refund_bank,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentCancelRequest.refund_bank)
}

// string refund_account = 9;
inline void PaymentCancelRequest::clear_refund_account() {
  refund_account_.ClearToEmpty();
}
inline const std::string& PaymentCancelRequest::refund_account() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelRequest.refund_account)
  return _internal_refund_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentCancelRequest::set_refund_account(ArgT0&& arg0, ArgT... args) {
 
 refund_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentCancelRequest.refund_account)
}
inline std::string* PaymentCancelRequest::mutable_refund_account() {
  std::string* _s = _internal_mutable_refund_account();
  // @@protoc_insertion_point(field_mutable:payment.PaymentCancelRequest.refund_account)
  return _s;
}
inline const std::string& PaymentCancelRequest::_internal_refund_account() const {
  return refund_account_.Get();
}
inline void PaymentCancelRequest::_internal_set_refund_account(const std::string& value) {
  
  refund_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::_internal_mutable_refund_account() {
  
  return refund_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentCancelRequest::release_refund_account() {
  // @@protoc_insertion_point(field_release:payment.PaymentCancelRequest.refund_account)
  return refund_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentCancelRequest::set_allocated_refund_account(std::string* refund_account) {
  if (refund_account != nullptr) {
    
  } else {
    
  }
  refund_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refund_account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentCancelRequest.refund_account)
}

// -------------------------------------------------------------------

// PaymentCancelResponse

// int32 code = 1;
inline void PaymentCancelResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentCancelResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentCancelResponse::code() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelResponse.code)
  return _internal_code();
}
inline void PaymentCancelResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PaymentCancelResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:payment.PaymentCancelResponse.code)
}

// string message = 2;
inline void PaymentCancelResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PaymentCancelResponse::message() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentCancelResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentCancelResponse.message)
}
inline std::string* PaymentCancelResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:payment.PaymentCancelResponse.message)
  return _s;
}
inline const std::string& PaymentCancelResponse::_internal_message() const {
  return message_.Get();
}
inline void PaymentCancelResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentCancelResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentCancelResponse::release_message() {
  // @@protoc_insertion_point(field_release:payment.PaymentCancelResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentCancelResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentCancelResponse.message)
}

// .payment.Payment response = 3;
inline bool PaymentCancelResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool PaymentCancelResponse::has_response() const {
  return _internal_has_response();
}
inline void PaymentCancelResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::payment::Payment& PaymentCancelResponse::_internal_response() const {
  const ::payment::Payment* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::Payment&>(
      ::payment::_Payment_default_instance_);
}
inline const ::payment::Payment& PaymentCancelResponse::response() const {
  // @@protoc_insertion_point(field_get:payment.PaymentCancelResponse.response)
  return _internal_response();
}
inline void PaymentCancelResponse::unsafe_arena_set_allocated_response(
    ::payment::Payment* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentCancelResponse.response)
}
inline ::payment::Payment* PaymentCancelResponse::release_response() {
  
  ::payment::Payment* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::Payment* PaymentCancelResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:payment.PaymentCancelResponse.response)
  
  ::payment::Payment* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::payment::Payment* PaymentCancelResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::Payment>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::payment::Payment* PaymentCancelResponse::mutable_response() {
  ::payment::Payment* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:payment.PaymentCancelResponse.response)
  return _msg;
}
inline void PaymentCancelResponse::set_allocated_response(::payment::Payment* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::Payment>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentCancelResponse.response)
}

// -------------------------------------------------------------------

// PaymentBalanceRequest

// string imp_uid = 1;
inline void PaymentBalanceRequest::clear_imp_uid() {
  imp_uid_.ClearToEmpty();
}
inline const std::string& PaymentBalanceRequest::imp_uid() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceRequest.imp_uid)
  return _internal_imp_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentBalanceRequest::set_imp_uid(ArgT0&& arg0, ArgT... args) {
 
 imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentBalanceRequest.imp_uid)
}
inline std::string* PaymentBalanceRequest::mutable_imp_uid() {
  std::string* _s = _internal_mutable_imp_uid();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalanceRequest.imp_uid)
  return _s;
}
inline const std::string& PaymentBalanceRequest::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void PaymentBalanceRequest::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentBalanceRequest::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentBalanceRequest::release_imp_uid() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalanceRequest.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentBalanceRequest::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalanceRequest.imp_uid)
}

// -------------------------------------------------------------------

// PaymentBalanceResponse

// int32 code = 1;
inline void PaymentBalanceResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentBalanceResponse::code() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceResponse.code)
  return _internal_code();
}
inline void PaymentBalanceResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PaymentBalanceResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:payment.PaymentBalanceResponse.code)
}

// string message = 2;
inline void PaymentBalanceResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PaymentBalanceResponse::message() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentBalanceResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentBalanceResponse.message)
}
inline std::string* PaymentBalanceResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalanceResponse.message)
  return _s;
}
inline const std::string& PaymentBalanceResponse::_internal_message() const {
  return message_.Get();
}
inline void PaymentBalanceResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentBalanceResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentBalanceResponse::release_message() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalanceResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentBalanceResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalanceResponse.message)
}

// .payment.PaymentBalance response = 3;
inline bool PaymentBalanceResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool PaymentBalanceResponse::has_response() const {
  return _internal_has_response();
}
inline void PaymentBalanceResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::payment::PaymentBalance& PaymentBalanceResponse::_internal_response() const {
  const ::payment::PaymentBalance* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::PaymentBalance&>(
      ::payment::_PaymentBalance_default_instance_);
}
inline const ::payment::PaymentBalance& PaymentBalanceResponse::response() const {
  // @@protoc_insertion_point(field_get:payment.PaymentBalanceResponse.response)
  return _internal_response();
}
inline void PaymentBalanceResponse::unsafe_arena_set_allocated_response(
    ::payment::PaymentBalance* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentBalanceResponse.response)
}
inline ::payment::PaymentBalance* PaymentBalanceResponse::release_response() {
  
  ::payment::PaymentBalance* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::PaymentBalance* PaymentBalanceResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:payment.PaymentBalanceResponse.response)
  
  ::payment::PaymentBalance* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::payment::PaymentBalance* PaymentBalanceResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::PaymentBalance>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::payment::PaymentBalance* PaymentBalanceResponse::mutable_response() {
  ::payment::PaymentBalance* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:payment.PaymentBalanceResponse.response)
  return _msg;
}
inline void PaymentBalanceResponse::set_allocated_response(::payment::PaymentBalance* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::PaymentBalance>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentBalanceResponse.response)
}

// -------------------------------------------------------------------

// Prepare

// string merchant_uid = 1;
inline void Prepare::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& Prepare::merchant_uid() const {
  // @@protoc_insertion_point(field_get:payment.Prepare.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Prepare::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Prepare.merchant_uid)
}
inline std::string* Prepare::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:payment.Prepare.merchant_uid)
  return _s;
}
inline const std::string& Prepare::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void Prepare::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Prepare::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Prepare::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:payment.Prepare.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Prepare::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Prepare.merchant_uid)
}

// int32 amount = 2;
inline void Prepare::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prepare::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Prepare::amount() const {
  // @@protoc_insertion_point(field_get:payment.Prepare.amount)
  return _internal_amount();
}
inline void Prepare::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void Prepare::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:payment.Prepare.amount)
}

// -------------------------------------------------------------------

// PaymentPrepareRequest

// string merchant_uid = 1;
inline void PaymentPrepareRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& PaymentPrepareRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:payment.PaymentPrepareRequest.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentPrepareRequest::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentPrepareRequest.merchant_uid)
}
inline std::string* PaymentPrepareRequest::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:payment.PaymentPrepareRequest.merchant_uid)
  return _s;
}
inline const std::string& PaymentPrepareRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void PaymentPrepareRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentPrepareRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentPrepareRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:payment.PaymentPrepareRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentPrepareRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentPrepareRequest.merchant_uid)
}

// double amount = 2;
inline void PaymentPrepareRequest::clear_amount() {
  amount_ = 0;
}
inline double PaymentPrepareRequest::_internal_amount() const {
  return amount_;
}
inline double PaymentPrepareRequest::amount() const {
  // @@protoc_insertion_point(field_get:payment.PaymentPrepareRequest.amount)
  return _internal_amount();
}
inline void PaymentPrepareRequest::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void PaymentPrepareRequest::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:payment.PaymentPrepareRequest.amount)
}

// -------------------------------------------------------------------

// PaymentPrepareResponse

// int32 code = 1;
inline void PaymentPrepareResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentPrepareResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentPrepareResponse::code() const {
  // @@protoc_insertion_point(field_get:payment.PaymentPrepareResponse.code)
  return _internal_code();
}
inline void PaymentPrepareResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PaymentPrepareResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:payment.PaymentPrepareResponse.code)
}

// string message = 2;
inline void PaymentPrepareResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PaymentPrepareResponse::message() const {
  // @@protoc_insertion_point(field_get:payment.PaymentPrepareResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentPrepareResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentPrepareResponse.message)
}
inline std::string* PaymentPrepareResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:payment.PaymentPrepareResponse.message)
  return _s;
}
inline const std::string& PaymentPrepareResponse::_internal_message() const {
  return message_.Get();
}
inline void PaymentPrepareResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentPrepareResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentPrepareResponse::release_message() {
  // @@protoc_insertion_point(field_release:payment.PaymentPrepareResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentPrepareResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentPrepareResponse.message)
}

// .payment.Prepare response = 3;
inline bool PaymentPrepareResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool PaymentPrepareResponse::has_response() const {
  return _internal_has_response();
}
inline void PaymentPrepareResponse::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::payment::Prepare& PaymentPrepareResponse::_internal_response() const {
  const ::payment::Prepare* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::Prepare&>(
      ::payment::_Prepare_default_instance_);
}
inline const ::payment::Prepare& PaymentPrepareResponse::response() const {
  // @@protoc_insertion_point(field_get:payment.PaymentPrepareResponse.response)
  return _internal_response();
}
inline void PaymentPrepareResponse::unsafe_arena_set_allocated_response(
    ::payment::Prepare* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:payment.PaymentPrepareResponse.response)
}
inline ::payment::Prepare* PaymentPrepareResponse::release_response() {
  
  ::payment::Prepare* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::payment::Prepare* PaymentPrepareResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:payment.PaymentPrepareResponse.response)
  
  ::payment::Prepare* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::payment::Prepare* PaymentPrepareResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::Prepare>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::payment::Prepare* PaymentPrepareResponse::mutable_response() {
  ::payment::Prepare* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:payment.PaymentPrepareResponse.response)
  return _msg;
}
inline void PaymentPrepareResponse::set_allocated_response(::payment::Prepare* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::payment::Prepare>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentPrepareResponse.response)
}

// -------------------------------------------------------------------

// PaymentGetPrepareRequest

// string merchant_uid = 1;
inline void PaymentGetPrepareRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& PaymentGetPrepareRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:payment.PaymentGetPrepareRequest.merchant_uid)
  return _internal_merchant_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentGetPrepareRequest::set_merchant_uid(ArgT0&& arg0, ArgT... args) {
 
 merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.PaymentGetPrepareRequest.merchant_uid)
}
inline std::string* PaymentGetPrepareRequest::mutable_merchant_uid() {
  std::string* _s = _internal_mutable_merchant_uid();
  // @@protoc_insertion_point(field_mutable:payment.PaymentGetPrepareRequest.merchant_uid)
  return _s;
}
inline const std::string& PaymentGetPrepareRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void PaymentGetPrepareRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PaymentGetPrepareRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PaymentGetPrepareRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:payment.PaymentGetPrepareRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PaymentGetPrepareRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.PaymentGetPrepareRequest.merchant_uid)
}

// -------------------------------------------------------------------

// Promotion

// string id = 1;
inline void Promotion::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Promotion::id() const {
  // @@protoc_insertion_point(field_get:payment.Promotion.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Promotion::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:payment.Promotion.id)
}
inline std::string* Promotion::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:payment.Promotion.id)
  return _s;
}
inline const std::string& Promotion::_internal_id() const {
  return id_.Get();
}
inline void Promotion::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Promotion::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Promotion::release_id() {
  // @@protoc_insertion_point(field_release:payment.Promotion.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Promotion::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:payment.Promotion.id)
}

// int32 discount = 2;
inline void Promotion::clear_discount() {
  discount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Promotion::_internal_discount() const {
  return discount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Promotion::discount() const {
  // @@protoc_insertion_point(field_get:payment.Promotion.discount)
  return _internal_discount();
}
inline void Promotion::_internal_set_discount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  discount_ = value;
}
inline void Promotion::set_discount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:payment.Promotion.discount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace payment

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_v1_2fpayment_2fpayment_2eproto
