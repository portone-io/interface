// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/subscribe/subscribe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2fsubscribe_2fsubscribe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_v1_2fsubscribe_2fsubscribe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "v1/payment/payment.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_v1_2fsubscribe_2fsubscribe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2fsubscribe_2fsubscribe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto;
namespace subscribe {
class AgainPaymentRequest;
class AgainPaymentRequestDefaultTypeInternal;
extern AgainPaymentRequestDefaultTypeInternal _AgainPaymentRequest_default_instance_;
class AgainPaymentResponse;
class AgainPaymentResponseDefaultTypeInternal;
extern AgainPaymentResponseDefaultTypeInternal _AgainPaymentResponse_default_instance_;
class GetPaymentScheduleByCustomerRequest;
class GetPaymentScheduleByCustomerRequestDefaultTypeInternal;
extern GetPaymentScheduleByCustomerRequestDefaultTypeInternal _GetPaymentScheduleByCustomerRequest_default_instance_;
class GetPaymentScheduleByCustomerResponse;
class GetPaymentScheduleByCustomerResponseDefaultTypeInternal;
extern GetPaymentScheduleByCustomerResponseDefaultTypeInternal _GetPaymentScheduleByCustomerResponse_default_instance_;
class GetPaymentScheduleRequest;
class GetPaymentScheduleRequestDefaultTypeInternal;
extern GetPaymentScheduleRequestDefaultTypeInternal _GetPaymentScheduleRequest_default_instance_;
class GetPaymentScheduleResponse;
class GetPaymentScheduleResponseDefaultTypeInternal;
extern GetPaymentScheduleResponseDefaultTypeInternal _GetPaymentScheduleResponse_default_instance_;
class NestedGetPaymentScheduleByCustomerData;
class NestedGetPaymentScheduleByCustomerDataDefaultTypeInternal;
extern NestedGetPaymentScheduleByCustomerDataDefaultTypeInternal _NestedGetPaymentScheduleByCustomerData_default_instance_;
class OnetimePaymentRequest;
class OnetimePaymentRequestDefaultTypeInternal;
extern OnetimePaymentRequestDefaultTypeInternal _OnetimePaymentRequest_default_instance_;
class OnetimePaymentResponse;
class OnetimePaymentResponseDefaultTypeInternal;
extern OnetimePaymentResponseDefaultTypeInternal _OnetimePaymentResponse_default_instance_;
class PaymentScheduleParam;
class PaymentScheduleParamDefaultTypeInternal;
extern PaymentScheduleParamDefaultTypeInternal _PaymentScheduleParam_default_instance_;
class SchedulePayemntRequest;
class SchedulePayemntRequestDefaultTypeInternal;
extern SchedulePayemntRequestDefaultTypeInternal _SchedulePayemntRequest_default_instance_;
class SchedulePaymentResponse;
class SchedulePaymentResponseDefaultTypeInternal;
extern SchedulePaymentResponseDefaultTypeInternal _SchedulePaymentResponse_default_instance_;
class UnitSchedulePaymentResponse;
class UnitSchedulePaymentResponseDefaultTypeInternal;
extern UnitSchedulePaymentResponseDefaultTypeInternal _UnitSchedulePaymentResponse_default_instance_;
class UnschedulePaymentRequest;
class UnschedulePaymentRequestDefaultTypeInternal;
extern UnschedulePaymentRequestDefaultTypeInternal _UnschedulePaymentRequest_default_instance_;
class UnschedulePaymentResponse;
class UnschedulePaymentResponseDefaultTypeInternal;
extern UnschedulePaymentResponseDefaultTypeInternal _UnschedulePaymentResponse_default_instance_;
}  // namespace subscribe
PROTOBUF_NAMESPACE_OPEN
template<> ::subscribe::AgainPaymentRequest* Arena::CreateMaybeMessage<::subscribe::AgainPaymentRequest>(Arena*);
template<> ::subscribe::AgainPaymentResponse* Arena::CreateMaybeMessage<::subscribe::AgainPaymentResponse>(Arena*);
template<> ::subscribe::GetPaymentScheduleByCustomerRequest* Arena::CreateMaybeMessage<::subscribe::GetPaymentScheduleByCustomerRequest>(Arena*);
template<> ::subscribe::GetPaymentScheduleByCustomerResponse* Arena::CreateMaybeMessage<::subscribe::GetPaymentScheduleByCustomerResponse>(Arena*);
template<> ::subscribe::GetPaymentScheduleRequest* Arena::CreateMaybeMessage<::subscribe::GetPaymentScheduleRequest>(Arena*);
template<> ::subscribe::GetPaymentScheduleResponse* Arena::CreateMaybeMessage<::subscribe::GetPaymentScheduleResponse>(Arena*);
template<> ::subscribe::NestedGetPaymentScheduleByCustomerData* Arena::CreateMaybeMessage<::subscribe::NestedGetPaymentScheduleByCustomerData>(Arena*);
template<> ::subscribe::OnetimePaymentRequest* Arena::CreateMaybeMessage<::subscribe::OnetimePaymentRequest>(Arena*);
template<> ::subscribe::OnetimePaymentResponse* Arena::CreateMaybeMessage<::subscribe::OnetimePaymentResponse>(Arena*);
template<> ::subscribe::PaymentScheduleParam* Arena::CreateMaybeMessage<::subscribe::PaymentScheduleParam>(Arena*);
template<> ::subscribe::SchedulePayemntRequest* Arena::CreateMaybeMessage<::subscribe::SchedulePayemntRequest>(Arena*);
template<> ::subscribe::SchedulePaymentResponse* Arena::CreateMaybeMessage<::subscribe::SchedulePaymentResponse>(Arena*);
template<> ::subscribe::UnitSchedulePaymentResponse* Arena::CreateMaybeMessage<::subscribe::UnitSchedulePaymentResponse>(Arena*);
template<> ::subscribe::UnschedulePaymentRequest* Arena::CreateMaybeMessage<::subscribe::UnschedulePaymentRequest>(Arena*);
template<> ::subscribe::UnschedulePaymentResponse* Arena::CreateMaybeMessage<::subscribe::UnschedulePaymentResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace subscribe {

// ===================================================================

class OnetimePaymentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.OnetimePaymentRequest) */ {
 public:
  inline OnetimePaymentRequest() : OnetimePaymentRequest(nullptr) {}
  virtual ~OnetimePaymentRequest();

  OnetimePaymentRequest(const OnetimePaymentRequest& from);
  OnetimePaymentRequest(OnetimePaymentRequest&& from) noexcept
    : OnetimePaymentRequest() {
    *this = ::std::move(from);
  }

  inline OnetimePaymentRequest& operator=(const OnetimePaymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnetimePaymentRequest& operator=(OnetimePaymentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnetimePaymentRequest& default_instance();

  static inline const OnetimePaymentRequest* internal_default_instance() {
    return reinterpret_cast<const OnetimePaymentRequest*>(
               &_OnetimePaymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OnetimePaymentRequest& a, OnetimePaymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnetimePaymentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnetimePaymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnetimePaymentRequest* New() const final {
    return CreateMaybeMessage<OnetimePaymentRequest>(nullptr);
  }

  OnetimePaymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnetimePaymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnetimePaymentRequest& from);
  void MergeFrom(const OnetimePaymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnetimePaymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.OnetimePaymentRequest";
  }
  protected:
  explicit OnetimePaymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerchantUidFieldNumber = 1,
    kCardNumberFieldNumber = 4,
    kExpiryFieldNumber = 5,
    kBirthFieldNumber = 6,
    kPwd2DigitFieldNumber = 7,
    kCustomerUidFieldNumber = 8,
    kPgFieldNumber = 9,
    kNameFieldNumber = 10,
    kBuyerNameFieldNumber = 11,
    kBuyerEmailFieldNumber = 12,
    kBuyerTelFieldNumber = 13,
    kBuyerAddrFieldNumber = 14,
    kBuyerPostcodeFieldNumber = 15,
    kCustomDataFieldNumber = 18,
    kNoticeUrlFieldNumber = 19,
    kAmountFieldNumber = 2,
    kTaxFreeFieldNumber = 3,
    kCardQuotaFieldNumber = 16,
    kInterestFreeByMerchantFieldNumber = 17,
  };
  // string merchant_uid = 1;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  void set_merchant_uid(const std::string& value);
  void set_merchant_uid(std::string&& value);
  void set_merchant_uid(const char* value);
  void set_merchant_uid(const char* value, size_t size);
  std::string* mutable_merchant_uid();
  std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string card_number = 4;
  void clear_card_number();
  const std::string& card_number() const;
  void set_card_number(const std::string& value);
  void set_card_number(std::string&& value);
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  std::string* mutable_card_number();
  std::string* release_card_number();
  void set_allocated_card_number(std::string* card_number);
  private:
  const std::string& _internal_card_number() const;
  void _internal_set_card_number(const std::string& value);
  std::string* _internal_mutable_card_number();
  public:

  // string expiry = 5;
  void clear_expiry();
  const std::string& expiry() const;
  void set_expiry(const std::string& value);
  void set_expiry(std::string&& value);
  void set_expiry(const char* value);
  void set_expiry(const char* value, size_t size);
  std::string* mutable_expiry();
  std::string* release_expiry();
  void set_allocated_expiry(std::string* expiry);
  private:
  const std::string& _internal_expiry() const;
  void _internal_set_expiry(const std::string& value);
  std::string* _internal_mutable_expiry();
  public:

  // string birth = 6;
  void clear_birth();
  const std::string& birth() const;
  void set_birth(const std::string& value);
  void set_birth(std::string&& value);
  void set_birth(const char* value);
  void set_birth(const char* value, size_t size);
  std::string* mutable_birth();
  std::string* release_birth();
  void set_allocated_birth(std::string* birth);
  private:
  const std::string& _internal_birth() const;
  void _internal_set_birth(const std::string& value);
  std::string* _internal_mutable_birth();
  public:

  // string pwd_2digit = 7;
  void clear_pwd_2digit();
  const std::string& pwd_2digit() const;
  void set_pwd_2digit(const std::string& value);
  void set_pwd_2digit(std::string&& value);
  void set_pwd_2digit(const char* value);
  void set_pwd_2digit(const char* value, size_t size);
  std::string* mutable_pwd_2digit();
  std::string* release_pwd_2digit();
  void set_allocated_pwd_2digit(std::string* pwd_2digit);
  private:
  const std::string& _internal_pwd_2digit() const;
  void _internal_set_pwd_2digit(const std::string& value);
  std::string* _internal_mutable_pwd_2digit();
  public:

  // string customer_uid = 8;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // string pg = 9;
  void clear_pg();
  const std::string& pg() const;
  void set_pg(const std::string& value);
  void set_pg(std::string&& value);
  void set_pg(const char* value);
  void set_pg(const char* value, size_t size);
  std::string* mutable_pg();
  std::string* release_pg();
  void set_allocated_pg(std::string* pg);
  private:
  const std::string& _internal_pg() const;
  void _internal_set_pg(const std::string& value);
  std::string* _internal_mutable_pg();
  public:

  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string buyer_name = 11;
  void clear_buyer_name();
  const std::string& buyer_name() const;
  void set_buyer_name(const std::string& value);
  void set_buyer_name(std::string&& value);
  void set_buyer_name(const char* value);
  void set_buyer_name(const char* value, size_t size);
  std::string* mutable_buyer_name();
  std::string* release_buyer_name();
  void set_allocated_buyer_name(std::string* buyer_name);
  private:
  const std::string& _internal_buyer_name() const;
  void _internal_set_buyer_name(const std::string& value);
  std::string* _internal_mutable_buyer_name();
  public:

  // string buyer_email = 12;
  void clear_buyer_email();
  const std::string& buyer_email() const;
  void set_buyer_email(const std::string& value);
  void set_buyer_email(std::string&& value);
  void set_buyer_email(const char* value);
  void set_buyer_email(const char* value, size_t size);
  std::string* mutable_buyer_email();
  std::string* release_buyer_email();
  void set_allocated_buyer_email(std::string* buyer_email);
  private:
  const std::string& _internal_buyer_email() const;
  void _internal_set_buyer_email(const std::string& value);
  std::string* _internal_mutable_buyer_email();
  public:

  // string buyer_tel = 13;
  void clear_buyer_tel();
  const std::string& buyer_tel() const;
  void set_buyer_tel(const std::string& value);
  void set_buyer_tel(std::string&& value);
  void set_buyer_tel(const char* value);
  void set_buyer_tel(const char* value, size_t size);
  std::string* mutable_buyer_tel();
  std::string* release_buyer_tel();
  void set_allocated_buyer_tel(std::string* buyer_tel);
  private:
  const std::string& _internal_buyer_tel() const;
  void _internal_set_buyer_tel(const std::string& value);
  std::string* _internal_mutable_buyer_tel();
  public:

  // string buyer_addr = 14;
  void clear_buyer_addr();
  const std::string& buyer_addr() const;
  void set_buyer_addr(const std::string& value);
  void set_buyer_addr(std::string&& value);
  void set_buyer_addr(const char* value);
  void set_buyer_addr(const char* value, size_t size);
  std::string* mutable_buyer_addr();
  std::string* release_buyer_addr();
  void set_allocated_buyer_addr(std::string* buyer_addr);
  private:
  const std::string& _internal_buyer_addr() const;
  void _internal_set_buyer_addr(const std::string& value);
  std::string* _internal_mutable_buyer_addr();
  public:

  // string buyer_postcode = 15;
  void clear_buyer_postcode();
  const std::string& buyer_postcode() const;
  void set_buyer_postcode(const std::string& value);
  void set_buyer_postcode(std::string&& value);
  void set_buyer_postcode(const char* value);
  void set_buyer_postcode(const char* value, size_t size);
  std::string* mutable_buyer_postcode();
  std::string* release_buyer_postcode();
  void set_allocated_buyer_postcode(std::string* buyer_postcode);
  private:
  const std::string& _internal_buyer_postcode() const;
  void _internal_set_buyer_postcode(const std::string& value);
  std::string* _internal_mutable_buyer_postcode();
  public:

  // string custom_data = 18;
  void clear_custom_data();
  const std::string& custom_data() const;
  void set_custom_data(const std::string& value);
  void set_custom_data(std::string&& value);
  void set_custom_data(const char* value);
  void set_custom_data(const char* value, size_t size);
  std::string* mutable_custom_data();
  std::string* release_custom_data();
  void set_allocated_custom_data(std::string* custom_data);
  private:
  const std::string& _internal_custom_data() const;
  void _internal_set_custom_data(const std::string& value);
  std::string* _internal_mutable_custom_data();
  public:

  // string notice_url = 19;
  void clear_notice_url();
  const std::string& notice_url() const;
  void set_notice_url(const std::string& value);
  void set_notice_url(std::string&& value);
  void set_notice_url(const char* value);
  void set_notice_url(const char* value, size_t size);
  std::string* mutable_notice_url();
  std::string* release_notice_url();
  void set_allocated_notice_url(std::string* notice_url);
  private:
  const std::string& _internal_notice_url() const;
  void _internal_set_notice_url(const std::string& value);
  std::string* _internal_mutable_notice_url();
  public:

  // int32 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tax_free = 3;
  void clear_tax_free();
  ::PROTOBUF_NAMESPACE_ID::int32 tax_free() const;
  void set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tax_free() const;
  void _internal_set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_quota = 16;
  void clear_card_quota();
  ::PROTOBUF_NAMESPACE_ID::int32 card_quota() const;
  void set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_quota() const;
  void _internal_set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool interest_free_by_merchant = 17;
  void clear_interest_free_by_merchant();
  bool interest_free_by_merchant() const;
  void set_interest_free_by_merchant(bool value);
  private:
  bool _internal_interest_free_by_merchant() const;
  void _internal_set_interest_free_by_merchant(bool value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.OnetimePaymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_2digit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 tax_free_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_quota_;
  bool interest_free_by_merchant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class OnetimePaymentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.OnetimePaymentResponse) */ {
 public:
  inline OnetimePaymentResponse() : OnetimePaymentResponse(nullptr) {}
  virtual ~OnetimePaymentResponse();

  OnetimePaymentResponse(const OnetimePaymentResponse& from);
  OnetimePaymentResponse(OnetimePaymentResponse&& from) noexcept
    : OnetimePaymentResponse() {
    *this = ::std::move(from);
  }

  inline OnetimePaymentResponse& operator=(const OnetimePaymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnetimePaymentResponse& operator=(OnetimePaymentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnetimePaymentResponse& default_instance();

  static inline const OnetimePaymentResponse* internal_default_instance() {
    return reinterpret_cast<const OnetimePaymentResponse*>(
               &_OnetimePaymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OnetimePaymentResponse& a, OnetimePaymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnetimePaymentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnetimePaymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnetimePaymentResponse* New() const final {
    return CreateMaybeMessage<OnetimePaymentResponse>(nullptr);
  }

  OnetimePaymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnetimePaymentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnetimePaymentResponse& from);
  void MergeFrom(const OnetimePaymentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnetimePaymentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.OnetimePaymentResponse";
  }
  protected:
  explicit OnetimePaymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .payment.Payment response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::payment::Payment& response() const;
  ::payment::Payment* release_response();
  ::payment::Payment* mutable_response();
  void set_allocated_response(::payment::Payment* response);
  private:
  const ::payment::Payment& _internal_response() const;
  ::payment::Payment* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::payment::Payment* response);
  ::payment::Payment* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.OnetimePaymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::payment::Payment* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class AgainPaymentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.AgainPaymentRequest) */ {
 public:
  inline AgainPaymentRequest() : AgainPaymentRequest(nullptr) {}
  virtual ~AgainPaymentRequest();

  AgainPaymentRequest(const AgainPaymentRequest& from);
  AgainPaymentRequest(AgainPaymentRequest&& from) noexcept
    : AgainPaymentRequest() {
    *this = ::std::move(from);
  }

  inline AgainPaymentRequest& operator=(const AgainPaymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgainPaymentRequest& operator=(AgainPaymentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgainPaymentRequest& default_instance();

  static inline const AgainPaymentRequest* internal_default_instance() {
    return reinterpret_cast<const AgainPaymentRequest*>(
               &_AgainPaymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AgainPaymentRequest& a, AgainPaymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AgainPaymentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgainPaymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgainPaymentRequest* New() const final {
    return CreateMaybeMessage<AgainPaymentRequest>(nullptr);
  }

  AgainPaymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgainPaymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgainPaymentRequest& from);
  void MergeFrom(const AgainPaymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgainPaymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.AgainPaymentRequest";
  }
  protected:
  explicit AgainPaymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerUidFieldNumber = 1,
    kMerchantUidFieldNumber = 2,
    kNameFieldNumber = 5,
    kBuyerNameFieldNumber = 6,
    kBuyerEmailFieldNumber = 7,
    kBuyerTelFieldNumber = 8,
    kBuyerAddrFieldNumber = 9,
    kBuyerPostcodeFieldNumber = 10,
    kCustomDataFieldNumber = 13,
    kNoticeUrlFieldNumber = 14,
    kAmountFieldNumber = 3,
    kTaxFreeFieldNumber = 4,
    kCardQuotaFieldNumber = 11,
    kInterestFreeByMerchantFieldNumber = 12,
  };
  // string customer_uid = 1;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // string merchant_uid = 2;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  void set_merchant_uid(const std::string& value);
  void set_merchant_uid(std::string&& value);
  void set_merchant_uid(const char* value);
  void set_merchant_uid(const char* value, size_t size);
  std::string* mutable_merchant_uid();
  std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string buyer_name = 6;
  void clear_buyer_name();
  const std::string& buyer_name() const;
  void set_buyer_name(const std::string& value);
  void set_buyer_name(std::string&& value);
  void set_buyer_name(const char* value);
  void set_buyer_name(const char* value, size_t size);
  std::string* mutable_buyer_name();
  std::string* release_buyer_name();
  void set_allocated_buyer_name(std::string* buyer_name);
  private:
  const std::string& _internal_buyer_name() const;
  void _internal_set_buyer_name(const std::string& value);
  std::string* _internal_mutable_buyer_name();
  public:

  // string buyer_email = 7;
  void clear_buyer_email();
  const std::string& buyer_email() const;
  void set_buyer_email(const std::string& value);
  void set_buyer_email(std::string&& value);
  void set_buyer_email(const char* value);
  void set_buyer_email(const char* value, size_t size);
  std::string* mutable_buyer_email();
  std::string* release_buyer_email();
  void set_allocated_buyer_email(std::string* buyer_email);
  private:
  const std::string& _internal_buyer_email() const;
  void _internal_set_buyer_email(const std::string& value);
  std::string* _internal_mutable_buyer_email();
  public:

  // string buyer_tel = 8;
  void clear_buyer_tel();
  const std::string& buyer_tel() const;
  void set_buyer_tel(const std::string& value);
  void set_buyer_tel(std::string&& value);
  void set_buyer_tel(const char* value);
  void set_buyer_tel(const char* value, size_t size);
  std::string* mutable_buyer_tel();
  std::string* release_buyer_tel();
  void set_allocated_buyer_tel(std::string* buyer_tel);
  private:
  const std::string& _internal_buyer_tel() const;
  void _internal_set_buyer_tel(const std::string& value);
  std::string* _internal_mutable_buyer_tel();
  public:

  // string buyer_addr = 9;
  void clear_buyer_addr();
  const std::string& buyer_addr() const;
  void set_buyer_addr(const std::string& value);
  void set_buyer_addr(std::string&& value);
  void set_buyer_addr(const char* value);
  void set_buyer_addr(const char* value, size_t size);
  std::string* mutable_buyer_addr();
  std::string* release_buyer_addr();
  void set_allocated_buyer_addr(std::string* buyer_addr);
  private:
  const std::string& _internal_buyer_addr() const;
  void _internal_set_buyer_addr(const std::string& value);
  std::string* _internal_mutable_buyer_addr();
  public:

  // string buyer_postcode = 10;
  void clear_buyer_postcode();
  const std::string& buyer_postcode() const;
  void set_buyer_postcode(const std::string& value);
  void set_buyer_postcode(std::string&& value);
  void set_buyer_postcode(const char* value);
  void set_buyer_postcode(const char* value, size_t size);
  std::string* mutable_buyer_postcode();
  std::string* release_buyer_postcode();
  void set_allocated_buyer_postcode(std::string* buyer_postcode);
  private:
  const std::string& _internal_buyer_postcode() const;
  void _internal_set_buyer_postcode(const std::string& value);
  std::string* _internal_mutable_buyer_postcode();
  public:

  // string custom_data = 13;
  void clear_custom_data();
  const std::string& custom_data() const;
  void set_custom_data(const std::string& value);
  void set_custom_data(std::string&& value);
  void set_custom_data(const char* value);
  void set_custom_data(const char* value, size_t size);
  std::string* mutable_custom_data();
  std::string* release_custom_data();
  void set_allocated_custom_data(std::string* custom_data);
  private:
  const std::string& _internal_custom_data() const;
  void _internal_set_custom_data(const std::string& value);
  std::string* _internal_mutable_custom_data();
  public:

  // string notice_url = 14;
  void clear_notice_url();
  const std::string& notice_url() const;
  void set_notice_url(const std::string& value);
  void set_notice_url(std::string&& value);
  void set_notice_url(const char* value);
  void set_notice_url(const char* value, size_t size);
  std::string* mutable_notice_url();
  std::string* release_notice_url();
  void set_allocated_notice_url(std::string* notice_url);
  private:
  const std::string& _internal_notice_url() const;
  void _internal_set_notice_url(const std::string& value);
  std::string* _internal_mutable_notice_url();
  public:

  // int32 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tax_free = 4;
  void clear_tax_free();
  ::PROTOBUF_NAMESPACE_ID::int32 tax_free() const;
  void set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tax_free() const;
  void _internal_set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 card_quota = 11;
  void clear_card_quota();
  ::PROTOBUF_NAMESPACE_ID::int32 card_quota() const;
  void set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_quota() const;
  void _internal_set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool interest_free_by_merchant = 12;
  void clear_interest_free_by_merchant();
  bool interest_free_by_merchant() const;
  void set_interest_free_by_merchant(bool value);
  private:
  bool _internal_interest_free_by_merchant() const;
  void _internal_set_interest_free_by_merchant(bool value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.AgainPaymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 tax_free_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_quota_;
  bool interest_free_by_merchant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class AgainPaymentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.AgainPaymentResponse) */ {
 public:
  inline AgainPaymentResponse() : AgainPaymentResponse(nullptr) {}
  virtual ~AgainPaymentResponse();

  AgainPaymentResponse(const AgainPaymentResponse& from);
  AgainPaymentResponse(AgainPaymentResponse&& from) noexcept
    : AgainPaymentResponse() {
    *this = ::std::move(from);
  }

  inline AgainPaymentResponse& operator=(const AgainPaymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgainPaymentResponse& operator=(AgainPaymentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgainPaymentResponse& default_instance();

  static inline const AgainPaymentResponse* internal_default_instance() {
    return reinterpret_cast<const AgainPaymentResponse*>(
               &_AgainPaymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AgainPaymentResponse& a, AgainPaymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AgainPaymentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgainPaymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgainPaymentResponse* New() const final {
    return CreateMaybeMessage<AgainPaymentResponse>(nullptr);
  }

  AgainPaymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgainPaymentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgainPaymentResponse& from);
  void MergeFrom(const AgainPaymentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgainPaymentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.AgainPaymentResponse";
  }
  protected:
  explicit AgainPaymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .payment.Payment response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::payment::Payment& response() const;
  ::payment::Payment* release_response();
  ::payment::Payment* mutable_response();
  void set_allocated_response(::payment::Payment* response);
  private:
  const ::payment::Payment& _internal_response() const;
  ::payment::Payment* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::payment::Payment* response);
  ::payment::Payment* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.AgainPaymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::payment::Payment* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class PaymentScheduleParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.PaymentScheduleParam) */ {
 public:
  inline PaymentScheduleParam() : PaymentScheduleParam(nullptr) {}
  virtual ~PaymentScheduleParam();

  PaymentScheduleParam(const PaymentScheduleParam& from);
  PaymentScheduleParam(PaymentScheduleParam&& from) noexcept
    : PaymentScheduleParam() {
    *this = ::std::move(from);
  }

  inline PaymentScheduleParam& operator=(const PaymentScheduleParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentScheduleParam& operator=(PaymentScheduleParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaymentScheduleParam& default_instance();

  static inline const PaymentScheduleParam* internal_default_instance() {
    return reinterpret_cast<const PaymentScheduleParam*>(
               &_PaymentScheduleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PaymentScheduleParam& a, PaymentScheduleParam& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentScheduleParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentScheduleParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentScheduleParam* New() const final {
    return CreateMaybeMessage<PaymentScheduleParam>(nullptr);
  }

  PaymentScheduleParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentScheduleParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaymentScheduleParam& from);
  void MergeFrom(const PaymentScheduleParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentScheduleParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.PaymentScheduleParam";
  }
  protected:
  explicit PaymentScheduleParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerchantUidFieldNumber = 1,
    kNameFieldNumber = 5,
    kBuyerNameFieldNumber = 6,
    kBuyerEmailFieldNumber = 7,
    kBuyerTelFieldNumber = 8,
    kBuyerAddrFieldNumber = 9,
    kBuyerPostcodeFieldNumber = 10,
    kScheduleAtFieldNumber = 2,
    kAmountFieldNumber = 3,
    kTaxFreeFieldNumber = 4,
  };
  // string merchant_uid = 1;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  void set_merchant_uid(const std::string& value);
  void set_merchant_uid(std::string&& value);
  void set_merchant_uid(const char* value);
  void set_merchant_uid(const char* value, size_t size);
  std::string* mutable_merchant_uid();
  std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string buyer_name = 6;
  void clear_buyer_name();
  const std::string& buyer_name() const;
  void set_buyer_name(const std::string& value);
  void set_buyer_name(std::string&& value);
  void set_buyer_name(const char* value);
  void set_buyer_name(const char* value, size_t size);
  std::string* mutable_buyer_name();
  std::string* release_buyer_name();
  void set_allocated_buyer_name(std::string* buyer_name);
  private:
  const std::string& _internal_buyer_name() const;
  void _internal_set_buyer_name(const std::string& value);
  std::string* _internal_mutable_buyer_name();
  public:

  // string buyer_email = 7;
  void clear_buyer_email();
  const std::string& buyer_email() const;
  void set_buyer_email(const std::string& value);
  void set_buyer_email(std::string&& value);
  void set_buyer_email(const char* value);
  void set_buyer_email(const char* value, size_t size);
  std::string* mutable_buyer_email();
  std::string* release_buyer_email();
  void set_allocated_buyer_email(std::string* buyer_email);
  private:
  const std::string& _internal_buyer_email() const;
  void _internal_set_buyer_email(const std::string& value);
  std::string* _internal_mutable_buyer_email();
  public:

  // string buyer_tel = 8;
  void clear_buyer_tel();
  const std::string& buyer_tel() const;
  void set_buyer_tel(const std::string& value);
  void set_buyer_tel(std::string&& value);
  void set_buyer_tel(const char* value);
  void set_buyer_tel(const char* value, size_t size);
  std::string* mutable_buyer_tel();
  std::string* release_buyer_tel();
  void set_allocated_buyer_tel(std::string* buyer_tel);
  private:
  const std::string& _internal_buyer_tel() const;
  void _internal_set_buyer_tel(const std::string& value);
  std::string* _internal_mutable_buyer_tel();
  public:

  // string buyer_addr = 9;
  void clear_buyer_addr();
  const std::string& buyer_addr() const;
  void set_buyer_addr(const std::string& value);
  void set_buyer_addr(std::string&& value);
  void set_buyer_addr(const char* value);
  void set_buyer_addr(const char* value, size_t size);
  std::string* mutable_buyer_addr();
  std::string* release_buyer_addr();
  void set_allocated_buyer_addr(std::string* buyer_addr);
  private:
  const std::string& _internal_buyer_addr() const;
  void _internal_set_buyer_addr(const std::string& value);
  std::string* _internal_mutable_buyer_addr();
  public:

  // string buyer_postcode = 10;
  void clear_buyer_postcode();
  const std::string& buyer_postcode() const;
  void set_buyer_postcode(const std::string& value);
  void set_buyer_postcode(std::string&& value);
  void set_buyer_postcode(const char* value);
  void set_buyer_postcode(const char* value, size_t size);
  std::string* mutable_buyer_postcode();
  std::string* release_buyer_postcode();
  void set_allocated_buyer_postcode(std::string* buyer_postcode);
  private:
  const std::string& _internal_buyer_postcode() const;
  void _internal_set_buyer_postcode(const std::string& value);
  std::string* _internal_mutable_buyer_postcode();
  public:

  // int32 schedule_at = 2;
  void clear_schedule_at();
  ::PROTOBUF_NAMESPACE_ID::int32 schedule_at() const;
  void set_schedule_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_schedule_at() const;
  void _internal_set_schedule_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tax_free = 4;
  void clear_tax_free();
  ::PROTOBUF_NAMESPACE_ID::int32 tax_free() const;
  void set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tax_free() const;
  void _internal_set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.PaymentScheduleParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 schedule_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 tax_free_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class UnitSchedulePaymentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.UnitSchedulePaymentResponse) */ {
 public:
  inline UnitSchedulePaymentResponse() : UnitSchedulePaymentResponse(nullptr) {}
  virtual ~UnitSchedulePaymentResponse();

  UnitSchedulePaymentResponse(const UnitSchedulePaymentResponse& from);
  UnitSchedulePaymentResponse(UnitSchedulePaymentResponse&& from) noexcept
    : UnitSchedulePaymentResponse() {
    *this = ::std::move(from);
  }

  inline UnitSchedulePaymentResponse& operator=(const UnitSchedulePaymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnitSchedulePaymentResponse& operator=(UnitSchedulePaymentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnitSchedulePaymentResponse& default_instance();

  static inline const UnitSchedulePaymentResponse* internal_default_instance() {
    return reinterpret_cast<const UnitSchedulePaymentResponse*>(
               &_UnitSchedulePaymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UnitSchedulePaymentResponse& a, UnitSchedulePaymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnitSchedulePaymentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnitSchedulePaymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnitSchedulePaymentResponse* New() const final {
    return CreateMaybeMessage<UnitSchedulePaymentResponse>(nullptr);
  }

  UnitSchedulePaymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnitSchedulePaymentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnitSchedulePaymentResponse& from);
  void MergeFrom(const UnitSchedulePaymentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnitSchedulePaymentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.UnitSchedulePaymentResponse";
  }
  protected:
  explicit UnitSchedulePaymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerUidFieldNumber = 1,
    kMerchantUidFieldNumber = 2,
    kImpUidFieldNumber = 3,
    kNameFieldNumber = 8,
    kBuyerNameFieldNumber = 9,
    kBuyerEmailFieldNumber = 10,
    kBuyerTelFieldNumber = 11,
    kBuyerAddrFieldNumber = 12,
    kBuyerPostcodeFieldNumber = 13,
    kCustomDataFieldNumber = 14,
    kScheduleStatusFieldNumber = 15,
    kPaymentStatusFieldNumber = 16,
    kFailReasonFieldNumber = 17,
    kScheduleAtFieldNumber = 4,
    kExecutedAtFieldNumber = 5,
    kRevokedAtFieldNumber = 6,
    kAmountFieldNumber = 7,
  };
  // string customer_uid = 1;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // string merchant_uid = 2;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  void set_merchant_uid(const std::string& value);
  void set_merchant_uid(std::string&& value);
  void set_merchant_uid(const char* value);
  void set_merchant_uid(const char* value, size_t size);
  std::string* mutable_merchant_uid();
  std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // string imp_uid = 3;
  void clear_imp_uid();
  const std::string& imp_uid() const;
  void set_imp_uid(const std::string& value);
  void set_imp_uid(std::string&& value);
  void set_imp_uid(const char* value);
  void set_imp_uid(const char* value, size_t size);
  std::string* mutable_imp_uid();
  std::string* release_imp_uid();
  void set_allocated_imp_uid(std::string* imp_uid);
  private:
  const std::string& _internal_imp_uid() const;
  void _internal_set_imp_uid(const std::string& value);
  std::string* _internal_mutable_imp_uid();
  public:

  // string name = 8;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string buyer_name = 9;
  void clear_buyer_name();
  const std::string& buyer_name() const;
  void set_buyer_name(const std::string& value);
  void set_buyer_name(std::string&& value);
  void set_buyer_name(const char* value);
  void set_buyer_name(const char* value, size_t size);
  std::string* mutable_buyer_name();
  std::string* release_buyer_name();
  void set_allocated_buyer_name(std::string* buyer_name);
  private:
  const std::string& _internal_buyer_name() const;
  void _internal_set_buyer_name(const std::string& value);
  std::string* _internal_mutable_buyer_name();
  public:

  // string buyer_email = 10;
  void clear_buyer_email();
  const std::string& buyer_email() const;
  void set_buyer_email(const std::string& value);
  void set_buyer_email(std::string&& value);
  void set_buyer_email(const char* value);
  void set_buyer_email(const char* value, size_t size);
  std::string* mutable_buyer_email();
  std::string* release_buyer_email();
  void set_allocated_buyer_email(std::string* buyer_email);
  private:
  const std::string& _internal_buyer_email() const;
  void _internal_set_buyer_email(const std::string& value);
  std::string* _internal_mutable_buyer_email();
  public:

  // string buyer_tel = 11;
  void clear_buyer_tel();
  const std::string& buyer_tel() const;
  void set_buyer_tel(const std::string& value);
  void set_buyer_tel(std::string&& value);
  void set_buyer_tel(const char* value);
  void set_buyer_tel(const char* value, size_t size);
  std::string* mutable_buyer_tel();
  std::string* release_buyer_tel();
  void set_allocated_buyer_tel(std::string* buyer_tel);
  private:
  const std::string& _internal_buyer_tel() const;
  void _internal_set_buyer_tel(const std::string& value);
  std::string* _internal_mutable_buyer_tel();
  public:

  // string buyer_addr = 12;
  void clear_buyer_addr();
  const std::string& buyer_addr() const;
  void set_buyer_addr(const std::string& value);
  void set_buyer_addr(std::string&& value);
  void set_buyer_addr(const char* value);
  void set_buyer_addr(const char* value, size_t size);
  std::string* mutable_buyer_addr();
  std::string* release_buyer_addr();
  void set_allocated_buyer_addr(std::string* buyer_addr);
  private:
  const std::string& _internal_buyer_addr() const;
  void _internal_set_buyer_addr(const std::string& value);
  std::string* _internal_mutable_buyer_addr();
  public:

  // string buyer_postcode = 13;
  void clear_buyer_postcode();
  const std::string& buyer_postcode() const;
  void set_buyer_postcode(const std::string& value);
  void set_buyer_postcode(std::string&& value);
  void set_buyer_postcode(const char* value);
  void set_buyer_postcode(const char* value, size_t size);
  std::string* mutable_buyer_postcode();
  std::string* release_buyer_postcode();
  void set_allocated_buyer_postcode(std::string* buyer_postcode);
  private:
  const std::string& _internal_buyer_postcode() const;
  void _internal_set_buyer_postcode(const std::string& value);
  std::string* _internal_mutable_buyer_postcode();
  public:

  // string custom_data = 14;
  void clear_custom_data();
  const std::string& custom_data() const;
  void set_custom_data(const std::string& value);
  void set_custom_data(std::string&& value);
  void set_custom_data(const char* value);
  void set_custom_data(const char* value, size_t size);
  std::string* mutable_custom_data();
  std::string* release_custom_data();
  void set_allocated_custom_data(std::string* custom_data);
  private:
  const std::string& _internal_custom_data() const;
  void _internal_set_custom_data(const std::string& value);
  std::string* _internal_mutable_custom_data();
  public:

  // string schedule_status = 15;
  void clear_schedule_status();
  const std::string& schedule_status() const;
  void set_schedule_status(const std::string& value);
  void set_schedule_status(std::string&& value);
  void set_schedule_status(const char* value);
  void set_schedule_status(const char* value, size_t size);
  std::string* mutable_schedule_status();
  std::string* release_schedule_status();
  void set_allocated_schedule_status(std::string* schedule_status);
  private:
  const std::string& _internal_schedule_status() const;
  void _internal_set_schedule_status(const std::string& value);
  std::string* _internal_mutable_schedule_status();
  public:

  // string payment_status = 16;
  void clear_payment_status();
  const std::string& payment_status() const;
  void set_payment_status(const std::string& value);
  void set_payment_status(std::string&& value);
  void set_payment_status(const char* value);
  void set_payment_status(const char* value, size_t size);
  std::string* mutable_payment_status();
  std::string* release_payment_status();
  void set_allocated_payment_status(std::string* payment_status);
  private:
  const std::string& _internal_payment_status() const;
  void _internal_set_payment_status(const std::string& value);
  std::string* _internal_mutable_payment_status();
  public:

  // string fail_reason = 17;
  void clear_fail_reason();
  const std::string& fail_reason() const;
  void set_fail_reason(const std::string& value);
  void set_fail_reason(std::string&& value);
  void set_fail_reason(const char* value);
  void set_fail_reason(const char* value, size_t size);
  std::string* mutable_fail_reason();
  std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* fail_reason);
  private:
  const std::string& _internal_fail_reason() const;
  void _internal_set_fail_reason(const std::string& value);
  std::string* _internal_mutable_fail_reason();
  public:

  // int32 schedule_at = 4;
  void clear_schedule_at();
  ::PROTOBUF_NAMESPACE_ID::int32 schedule_at() const;
  void set_schedule_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_schedule_at() const;
  void _internal_set_schedule_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 executed_at = 5;
  void clear_executed_at();
  ::PROTOBUF_NAMESPACE_ID::int32 executed_at() const;
  void set_executed_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_executed_at() const;
  void _internal_set_executed_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 revoked_at = 6;
  void clear_revoked_at();
  ::PROTOBUF_NAMESPACE_ID::int32 revoked_at() const;
  void set_revoked_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_revoked_at() const;
  void _internal_set_revoked_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 amount = 7;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.UnitSchedulePaymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imp_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schedule_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 schedule_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 executed_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 revoked_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class SchedulePayemntRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.SchedulePayemntRequest) */ {
 public:
  inline SchedulePayemntRequest() : SchedulePayemntRequest(nullptr) {}
  virtual ~SchedulePayemntRequest();

  SchedulePayemntRequest(const SchedulePayemntRequest& from);
  SchedulePayemntRequest(SchedulePayemntRequest&& from) noexcept
    : SchedulePayemntRequest() {
    *this = ::std::move(from);
  }

  inline SchedulePayemntRequest& operator=(const SchedulePayemntRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedulePayemntRequest& operator=(SchedulePayemntRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchedulePayemntRequest& default_instance();

  static inline const SchedulePayemntRequest* internal_default_instance() {
    return reinterpret_cast<const SchedulePayemntRequest*>(
               &_SchedulePayemntRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SchedulePayemntRequest& a, SchedulePayemntRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SchedulePayemntRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchedulePayemntRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchedulePayemntRequest* New() const final {
    return CreateMaybeMessage<SchedulePayemntRequest>(nullptr);
  }

  SchedulePayemntRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchedulePayemntRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchedulePayemntRequest& from);
  void MergeFrom(const SchedulePayemntRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchedulePayemntRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.SchedulePayemntRequest";
  }
  protected:
  explicit SchedulePayemntRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchedulesFieldNumber = 8,
    kCustomerUidFieldNumber = 1,
    kCardNumberFieldNumber = 3,
    kExpiryFieldNumber = 4,
    kBirthFieldNumber = 5,
    kPwd2DigitFieldNumber = 6,
    kPgFieldNumber = 7,
    kCheckingAmountFieldNumber = 2,
  };
  // repeated .subscribe.PaymentScheduleParam schedules = 8;
  int schedules_size() const;
  private:
  int _internal_schedules_size() const;
  public:
  void clear_schedules();
  ::subscribe::PaymentScheduleParam* mutable_schedules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::PaymentScheduleParam >*
      mutable_schedules();
  private:
  const ::subscribe::PaymentScheduleParam& _internal_schedules(int index) const;
  ::subscribe::PaymentScheduleParam* _internal_add_schedules();
  public:
  const ::subscribe::PaymentScheduleParam& schedules(int index) const;
  ::subscribe::PaymentScheduleParam* add_schedules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::PaymentScheduleParam >&
      schedules() const;

  // string customer_uid = 1;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // string card_number = 3;
  void clear_card_number();
  const std::string& card_number() const;
  void set_card_number(const std::string& value);
  void set_card_number(std::string&& value);
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  std::string* mutable_card_number();
  std::string* release_card_number();
  void set_allocated_card_number(std::string* card_number);
  private:
  const std::string& _internal_card_number() const;
  void _internal_set_card_number(const std::string& value);
  std::string* _internal_mutable_card_number();
  public:

  // string expiry = 4;
  void clear_expiry();
  const std::string& expiry() const;
  void set_expiry(const std::string& value);
  void set_expiry(std::string&& value);
  void set_expiry(const char* value);
  void set_expiry(const char* value, size_t size);
  std::string* mutable_expiry();
  std::string* release_expiry();
  void set_allocated_expiry(std::string* expiry);
  private:
  const std::string& _internal_expiry() const;
  void _internal_set_expiry(const std::string& value);
  std::string* _internal_mutable_expiry();
  public:

  // string birth = 5;
  void clear_birth();
  const std::string& birth() const;
  void set_birth(const std::string& value);
  void set_birth(std::string&& value);
  void set_birth(const char* value);
  void set_birth(const char* value, size_t size);
  std::string* mutable_birth();
  std::string* release_birth();
  void set_allocated_birth(std::string* birth);
  private:
  const std::string& _internal_birth() const;
  void _internal_set_birth(const std::string& value);
  std::string* _internal_mutable_birth();
  public:

  // string pwd_2digit = 6;
  void clear_pwd_2digit();
  const std::string& pwd_2digit() const;
  void set_pwd_2digit(const std::string& value);
  void set_pwd_2digit(std::string&& value);
  void set_pwd_2digit(const char* value);
  void set_pwd_2digit(const char* value, size_t size);
  std::string* mutable_pwd_2digit();
  std::string* release_pwd_2digit();
  void set_allocated_pwd_2digit(std::string* pwd_2digit);
  private:
  const std::string& _internal_pwd_2digit() const;
  void _internal_set_pwd_2digit(const std::string& value);
  std::string* _internal_mutable_pwd_2digit();
  public:

  // string pg = 7;
  void clear_pg();
  const std::string& pg() const;
  void set_pg(const std::string& value);
  void set_pg(std::string&& value);
  void set_pg(const char* value);
  void set_pg(const char* value, size_t size);
  std::string* mutable_pg();
  std::string* release_pg();
  void set_allocated_pg(std::string* pg);
  private:
  const std::string& _internal_pg() const;
  void _internal_set_pg(const std::string& value);
  std::string* _internal_mutable_pg();
  public:

  // int32 checking_amount = 2;
  void clear_checking_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 checking_amount() const;
  void set_checking_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checking_amount() const;
  void _internal_set_checking_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.SchedulePayemntRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::PaymentScheduleParam > schedules_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_2digit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_;
  ::PROTOBUF_NAMESPACE_ID::int32 checking_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class SchedulePaymentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.SchedulePaymentResponse) */ {
 public:
  inline SchedulePaymentResponse() : SchedulePaymentResponse(nullptr) {}
  virtual ~SchedulePaymentResponse();

  SchedulePaymentResponse(const SchedulePaymentResponse& from);
  SchedulePaymentResponse(SchedulePaymentResponse&& from) noexcept
    : SchedulePaymentResponse() {
    *this = ::std::move(from);
  }

  inline SchedulePaymentResponse& operator=(const SchedulePaymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedulePaymentResponse& operator=(SchedulePaymentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchedulePaymentResponse& default_instance();

  static inline const SchedulePaymentResponse* internal_default_instance() {
    return reinterpret_cast<const SchedulePaymentResponse*>(
               &_SchedulePaymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SchedulePaymentResponse& a, SchedulePaymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SchedulePaymentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchedulePaymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchedulePaymentResponse* New() const final {
    return CreateMaybeMessage<SchedulePaymentResponse>(nullptr);
  }

  SchedulePaymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchedulePaymentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchedulePaymentResponse& from);
  void MergeFrom(const SchedulePaymentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchedulePaymentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.SchedulePaymentResponse";
  }
  protected:
  explicit SchedulePaymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .subscribe.UnitSchedulePaymentResponse response = 3;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::subscribe::UnitSchedulePaymentResponse* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >*
      mutable_response();
  private:
  const ::subscribe::UnitSchedulePaymentResponse& _internal_response(int index) const;
  ::subscribe::UnitSchedulePaymentResponse* _internal_add_response();
  public:
  const ::subscribe::UnitSchedulePaymentResponse& response(int index) const;
  ::subscribe::UnitSchedulePaymentResponse* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >&
      response() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.SchedulePaymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse > response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class UnschedulePaymentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.UnschedulePaymentRequest) */ {
 public:
  inline UnschedulePaymentRequest() : UnschedulePaymentRequest(nullptr) {}
  virtual ~UnschedulePaymentRequest();

  UnschedulePaymentRequest(const UnschedulePaymentRequest& from);
  UnschedulePaymentRequest(UnschedulePaymentRequest&& from) noexcept
    : UnschedulePaymentRequest() {
    *this = ::std::move(from);
  }

  inline UnschedulePaymentRequest& operator=(const UnschedulePaymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnschedulePaymentRequest& operator=(UnschedulePaymentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnschedulePaymentRequest& default_instance();

  static inline const UnschedulePaymentRequest* internal_default_instance() {
    return reinterpret_cast<const UnschedulePaymentRequest*>(
               &_UnschedulePaymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UnschedulePaymentRequest& a, UnschedulePaymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnschedulePaymentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnschedulePaymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnschedulePaymentRequest* New() const final {
    return CreateMaybeMessage<UnschedulePaymentRequest>(nullptr);
  }

  UnschedulePaymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnschedulePaymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnschedulePaymentRequest& from);
  void MergeFrom(const UnschedulePaymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnschedulePaymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.UnschedulePaymentRequest";
  }
  protected:
  explicit UnschedulePaymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerchantUidFieldNumber = 2,
    kCustomerUidFieldNumber = 1,
  };
  // repeated string merchant_uid = 2;
  int merchant_uid_size() const;
  private:
  int _internal_merchant_uid_size() const;
  public:
  void clear_merchant_uid();
  const std::string& merchant_uid(int index) const;
  std::string* mutable_merchant_uid(int index);
  void set_merchant_uid(int index, const std::string& value);
  void set_merchant_uid(int index, std::string&& value);
  void set_merchant_uid(int index, const char* value);
  void set_merchant_uid(int index, const char* value, size_t size);
  std::string* add_merchant_uid();
  void add_merchant_uid(const std::string& value);
  void add_merchant_uid(std::string&& value);
  void add_merchant_uid(const char* value);
  void add_merchant_uid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& merchant_uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_merchant_uid();
  private:
  const std::string& _internal_merchant_uid(int index) const;
  std::string* _internal_add_merchant_uid();
  public:

  // string customer_uid = 1;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // @@protoc_insertion_point(class_scope:subscribe.UnschedulePaymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> merchant_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class UnschedulePaymentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.UnschedulePaymentResponse) */ {
 public:
  inline UnschedulePaymentResponse() : UnschedulePaymentResponse(nullptr) {}
  virtual ~UnschedulePaymentResponse();

  UnschedulePaymentResponse(const UnschedulePaymentResponse& from);
  UnschedulePaymentResponse(UnschedulePaymentResponse&& from) noexcept
    : UnschedulePaymentResponse() {
    *this = ::std::move(from);
  }

  inline UnschedulePaymentResponse& operator=(const UnschedulePaymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnschedulePaymentResponse& operator=(UnschedulePaymentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnschedulePaymentResponse& default_instance();

  static inline const UnschedulePaymentResponse* internal_default_instance() {
    return reinterpret_cast<const UnschedulePaymentResponse*>(
               &_UnschedulePaymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UnschedulePaymentResponse& a, UnschedulePaymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnschedulePaymentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnschedulePaymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnschedulePaymentResponse* New() const final {
    return CreateMaybeMessage<UnschedulePaymentResponse>(nullptr);
  }

  UnschedulePaymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnschedulePaymentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnschedulePaymentResponse& from);
  void MergeFrom(const UnschedulePaymentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnschedulePaymentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.UnschedulePaymentResponse";
  }
  protected:
  explicit UnschedulePaymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .subscribe.UnitSchedulePaymentResponse response = 3;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::subscribe::UnitSchedulePaymentResponse* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >*
      mutable_response();
  private:
  const ::subscribe::UnitSchedulePaymentResponse& _internal_response(int index) const;
  ::subscribe::UnitSchedulePaymentResponse* _internal_add_response();
  public:
  const ::subscribe::UnitSchedulePaymentResponse& response(int index) const;
  ::subscribe::UnitSchedulePaymentResponse* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >&
      response() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.UnschedulePaymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse > response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class GetPaymentScheduleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.GetPaymentScheduleRequest) */ {
 public:
  inline GetPaymentScheduleRequest() : GetPaymentScheduleRequest(nullptr) {}
  virtual ~GetPaymentScheduleRequest();

  GetPaymentScheduleRequest(const GetPaymentScheduleRequest& from);
  GetPaymentScheduleRequest(GetPaymentScheduleRequest&& from) noexcept
    : GetPaymentScheduleRequest() {
    *this = ::std::move(from);
  }

  inline GetPaymentScheduleRequest& operator=(const GetPaymentScheduleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPaymentScheduleRequest& operator=(GetPaymentScheduleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPaymentScheduleRequest& default_instance();

  static inline const GetPaymentScheduleRequest* internal_default_instance() {
    return reinterpret_cast<const GetPaymentScheduleRequest*>(
               &_GetPaymentScheduleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetPaymentScheduleRequest& a, GetPaymentScheduleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPaymentScheduleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPaymentScheduleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPaymentScheduleRequest* New() const final {
    return CreateMaybeMessage<GetPaymentScheduleRequest>(nullptr);
  }

  GetPaymentScheduleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPaymentScheduleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPaymentScheduleRequest& from);
  void MergeFrom(const GetPaymentScheduleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPaymentScheduleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.GetPaymentScheduleRequest";
  }
  protected:
  explicit GetPaymentScheduleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerchantUidFieldNumber = 1,
  };
  // string merchant_uid = 1;
  void clear_merchant_uid();
  const std::string& merchant_uid() const;
  void set_merchant_uid(const std::string& value);
  void set_merchant_uid(std::string&& value);
  void set_merchant_uid(const char* value);
  void set_merchant_uid(const char* value, size_t size);
  std::string* mutable_merchant_uid();
  std::string* release_merchant_uid();
  void set_allocated_merchant_uid(std::string* merchant_uid);
  private:
  const std::string& _internal_merchant_uid() const;
  void _internal_set_merchant_uid(const std::string& value);
  std::string* _internal_mutable_merchant_uid();
  public:

  // @@protoc_insertion_point(class_scope:subscribe.GetPaymentScheduleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class GetPaymentScheduleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.GetPaymentScheduleResponse) */ {
 public:
  inline GetPaymentScheduleResponse() : GetPaymentScheduleResponse(nullptr) {}
  virtual ~GetPaymentScheduleResponse();

  GetPaymentScheduleResponse(const GetPaymentScheduleResponse& from);
  GetPaymentScheduleResponse(GetPaymentScheduleResponse&& from) noexcept
    : GetPaymentScheduleResponse() {
    *this = ::std::move(from);
  }

  inline GetPaymentScheduleResponse& operator=(const GetPaymentScheduleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPaymentScheduleResponse& operator=(GetPaymentScheduleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPaymentScheduleResponse& default_instance();

  static inline const GetPaymentScheduleResponse* internal_default_instance() {
    return reinterpret_cast<const GetPaymentScheduleResponse*>(
               &_GetPaymentScheduleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetPaymentScheduleResponse& a, GetPaymentScheduleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPaymentScheduleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPaymentScheduleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPaymentScheduleResponse* New() const final {
    return CreateMaybeMessage<GetPaymentScheduleResponse>(nullptr);
  }

  GetPaymentScheduleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPaymentScheduleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPaymentScheduleResponse& from);
  void MergeFrom(const GetPaymentScheduleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPaymentScheduleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.GetPaymentScheduleResponse";
  }
  protected:
  explicit GetPaymentScheduleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .subscribe.UnitSchedulePaymentResponse response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::subscribe::UnitSchedulePaymentResponse& response() const;
  ::subscribe::UnitSchedulePaymentResponse* release_response();
  ::subscribe::UnitSchedulePaymentResponse* mutable_response();
  void set_allocated_response(::subscribe::UnitSchedulePaymentResponse* response);
  private:
  const ::subscribe::UnitSchedulePaymentResponse& _internal_response() const;
  ::subscribe::UnitSchedulePaymentResponse* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::subscribe::UnitSchedulePaymentResponse* response);
  ::subscribe::UnitSchedulePaymentResponse* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.GetPaymentScheduleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::subscribe::UnitSchedulePaymentResponse* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class GetPaymentScheduleByCustomerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.GetPaymentScheduleByCustomerRequest) */ {
 public:
  inline GetPaymentScheduleByCustomerRequest() : GetPaymentScheduleByCustomerRequest(nullptr) {}
  virtual ~GetPaymentScheduleByCustomerRequest();

  GetPaymentScheduleByCustomerRequest(const GetPaymentScheduleByCustomerRequest& from);
  GetPaymentScheduleByCustomerRequest(GetPaymentScheduleByCustomerRequest&& from) noexcept
    : GetPaymentScheduleByCustomerRequest() {
    *this = ::std::move(from);
  }

  inline GetPaymentScheduleByCustomerRequest& operator=(const GetPaymentScheduleByCustomerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPaymentScheduleByCustomerRequest& operator=(GetPaymentScheduleByCustomerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPaymentScheduleByCustomerRequest& default_instance();

  static inline const GetPaymentScheduleByCustomerRequest* internal_default_instance() {
    return reinterpret_cast<const GetPaymentScheduleByCustomerRequest*>(
               &_GetPaymentScheduleByCustomerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetPaymentScheduleByCustomerRequest& a, GetPaymentScheduleByCustomerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPaymentScheduleByCustomerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPaymentScheduleByCustomerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPaymentScheduleByCustomerRequest* New() const final {
    return CreateMaybeMessage<GetPaymentScheduleByCustomerRequest>(nullptr);
  }

  GetPaymentScheduleByCustomerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPaymentScheduleByCustomerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPaymentScheduleByCustomerRequest& from);
  void MergeFrom(const GetPaymentScheduleByCustomerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPaymentScheduleByCustomerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.GetPaymentScheduleByCustomerRequest";
  }
  protected:
  explicit GetPaymentScheduleByCustomerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerUidFieldNumber = 1,
    kScheduleStatusFieldNumber = 5,
    kPageFieldNumber = 2,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
  };
  // string customer_uid = 1;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // string schedule_status = 5;
  void clear_schedule_status();
  const std::string& schedule_status() const;
  void set_schedule_status(const std::string& value);
  void set_schedule_status(std::string&& value);
  void set_schedule_status(const char* value);
  void set_schedule_status(const char* value, size_t size);
  std::string* mutable_schedule_status();
  std::string* release_schedule_status();
  void set_allocated_schedule_status(std::string* schedule_status);
  private:
  const std::string& _internal_schedule_status() const;
  void _internal_set_schedule_status(const std::string& value);
  std::string* _internal_mutable_schedule_status();
  public:

  // int32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 from = 3;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to = 4;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.GetPaymentScheduleByCustomerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schedule_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class NestedGetPaymentScheduleByCustomerData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.NestedGetPaymentScheduleByCustomerData) */ {
 public:
  inline NestedGetPaymentScheduleByCustomerData() : NestedGetPaymentScheduleByCustomerData(nullptr) {}
  virtual ~NestedGetPaymentScheduleByCustomerData();

  NestedGetPaymentScheduleByCustomerData(const NestedGetPaymentScheduleByCustomerData& from);
  NestedGetPaymentScheduleByCustomerData(NestedGetPaymentScheduleByCustomerData&& from) noexcept
    : NestedGetPaymentScheduleByCustomerData() {
    *this = ::std::move(from);
  }

  inline NestedGetPaymentScheduleByCustomerData& operator=(const NestedGetPaymentScheduleByCustomerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestedGetPaymentScheduleByCustomerData& operator=(NestedGetPaymentScheduleByCustomerData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NestedGetPaymentScheduleByCustomerData& default_instance();

  static inline const NestedGetPaymentScheduleByCustomerData* internal_default_instance() {
    return reinterpret_cast<const NestedGetPaymentScheduleByCustomerData*>(
               &_NestedGetPaymentScheduleByCustomerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NestedGetPaymentScheduleByCustomerData& a, NestedGetPaymentScheduleByCustomerData& b) {
    a.Swap(&b);
  }
  inline void Swap(NestedGetPaymentScheduleByCustomerData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestedGetPaymentScheduleByCustomerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NestedGetPaymentScheduleByCustomerData* New() const final {
    return CreateMaybeMessage<NestedGetPaymentScheduleByCustomerData>(nullptr);
  }

  NestedGetPaymentScheduleByCustomerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NestedGetPaymentScheduleByCustomerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NestedGetPaymentScheduleByCustomerData& from);
  void MergeFrom(const NestedGetPaymentScheduleByCustomerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedGetPaymentScheduleByCustomerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.NestedGetPaymentScheduleByCustomerData";
  }
  protected:
  explicit NestedGetPaymentScheduleByCustomerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 4,
    kTotalFieldNumber = 1,
    kPreviousFieldNumber = 2,
    kNextFieldNumber = 3,
  };
  // repeated .subscribe.UnitSchedulePaymentResponse list = 4;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::subscribe::UnitSchedulePaymentResponse* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >*
      mutable_list();
  private:
  const ::subscribe::UnitSchedulePaymentResponse& _internal_list(int index) const;
  ::subscribe::UnitSchedulePaymentResponse* _internal_add_list();
  public:
  const ::subscribe::UnitSchedulePaymentResponse& list(int index) const;
  ::subscribe::UnitSchedulePaymentResponse* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >&
      list() const;

  // int32 total = 1;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 previous = 2;
  void clear_previous();
  ::PROTOBUF_NAMESPACE_ID::int32 previous() const;
  void set_previous(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_previous() const;
  void _internal_set_previous(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 next = 3;
  void clear_next();
  ::PROTOBUF_NAMESPACE_ID::int32 next() const;
  void set_next(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_next() const;
  void _internal_set_next(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.NestedGetPaymentScheduleByCustomerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 previous_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// -------------------------------------------------------------------

class GetPaymentScheduleByCustomerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe.GetPaymentScheduleByCustomerResponse) */ {
 public:
  inline GetPaymentScheduleByCustomerResponse() : GetPaymentScheduleByCustomerResponse(nullptr) {}
  virtual ~GetPaymentScheduleByCustomerResponse();

  GetPaymentScheduleByCustomerResponse(const GetPaymentScheduleByCustomerResponse& from);
  GetPaymentScheduleByCustomerResponse(GetPaymentScheduleByCustomerResponse&& from) noexcept
    : GetPaymentScheduleByCustomerResponse() {
    *this = ::std::move(from);
  }

  inline GetPaymentScheduleByCustomerResponse& operator=(const GetPaymentScheduleByCustomerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPaymentScheduleByCustomerResponse& operator=(GetPaymentScheduleByCustomerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPaymentScheduleByCustomerResponse& default_instance();

  static inline const GetPaymentScheduleByCustomerResponse* internal_default_instance() {
    return reinterpret_cast<const GetPaymentScheduleByCustomerResponse*>(
               &_GetPaymentScheduleByCustomerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetPaymentScheduleByCustomerResponse& a, GetPaymentScheduleByCustomerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPaymentScheduleByCustomerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPaymentScheduleByCustomerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPaymentScheduleByCustomerResponse* New() const final {
    return CreateMaybeMessage<GetPaymentScheduleByCustomerResponse>(nullptr);
  }

  GetPaymentScheduleByCustomerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPaymentScheduleByCustomerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPaymentScheduleByCustomerResponse& from);
  void MergeFrom(const GetPaymentScheduleByCustomerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPaymentScheduleByCustomerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe.GetPaymentScheduleByCustomerResponse";
  }
  protected:
  explicit GetPaymentScheduleByCustomerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto);
    return ::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .subscribe.NestedGetPaymentScheduleByCustomerData response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::subscribe::NestedGetPaymentScheduleByCustomerData& response() const;
  ::subscribe::NestedGetPaymentScheduleByCustomerData* release_response();
  ::subscribe::NestedGetPaymentScheduleByCustomerData* mutable_response();
  void set_allocated_response(::subscribe::NestedGetPaymentScheduleByCustomerData* response);
  private:
  const ::subscribe::NestedGetPaymentScheduleByCustomerData& _internal_response() const;
  ::subscribe::NestedGetPaymentScheduleByCustomerData* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::subscribe::NestedGetPaymentScheduleByCustomerData* response);
  ::subscribe::NestedGetPaymentScheduleByCustomerData* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe.GetPaymentScheduleByCustomerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::subscribe::NestedGetPaymentScheduleByCustomerData* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_2fsubscribe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OnetimePaymentRequest

// string merchant_uid = 1;
inline void OnetimePaymentRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.merchant_uid)
  return _internal_merchant_uid();
}
inline void OnetimePaymentRequest::set_merchant_uid(const std::string& value) {
  _internal_set_merchant_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.merchant_uid)
}
inline std::string* OnetimePaymentRequest::mutable_merchant_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.merchant_uid)
  return _internal_mutable_merchant_uid();
}
inline const std::string& OnetimePaymentRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void OnetimePaymentRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_merchant_uid(std::string&& value) {
  
  merchant_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.merchant_uid)
}
inline void OnetimePaymentRequest::set_merchant_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.merchant_uid)
}
inline void OnetimePaymentRequest::set_merchant_uid(const char* value,
    size_t size) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.merchant_uid)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.merchant_uid)
}

// int32 amount = 2;
inline void OnetimePaymentRequest::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnetimePaymentRequest::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnetimePaymentRequest::amount() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.amount)
  return _internal_amount();
}
inline void OnetimePaymentRequest::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void OnetimePaymentRequest::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.amount)
}

// int32 tax_free = 3;
inline void OnetimePaymentRequest::clear_tax_free() {
  tax_free_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnetimePaymentRequest::_internal_tax_free() const {
  return tax_free_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnetimePaymentRequest::tax_free() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.tax_free)
  return _internal_tax_free();
}
inline void OnetimePaymentRequest::_internal_set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tax_free_ = value;
}
inline void OnetimePaymentRequest::set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tax_free(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.tax_free)
}

// string card_number = 4;
inline void OnetimePaymentRequest::clear_card_number() {
  card_number_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::card_number() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.card_number)
  return _internal_card_number();
}
inline void OnetimePaymentRequest::set_card_number(const std::string& value) {
  _internal_set_card_number(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.card_number)
}
inline std::string* OnetimePaymentRequest::mutable_card_number() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.card_number)
  return _internal_mutable_card_number();
}
inline const std::string& OnetimePaymentRequest::_internal_card_number() const {
  return card_number_.Get();
}
inline void OnetimePaymentRequest::_internal_set_card_number(const std::string& value) {
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_card_number(std::string&& value) {
  
  card_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.card_number)
}
inline void OnetimePaymentRequest::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.card_number)
}
inline void OnetimePaymentRequest::set_card_number(const char* value,
    size_t size) {
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.card_number)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_card_number() {
  
  return card_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_card_number() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.card_number)
  return card_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_card_number(std::string* card_number) {
  if (card_number != nullptr) {
    
  } else {
    
  }
  card_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.card_number)
}

// string expiry = 5;
inline void OnetimePaymentRequest::clear_expiry() {
  expiry_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::expiry() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.expiry)
  return _internal_expiry();
}
inline void OnetimePaymentRequest::set_expiry(const std::string& value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.expiry)
}
inline std::string* OnetimePaymentRequest::mutable_expiry() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.expiry)
  return _internal_mutable_expiry();
}
inline const std::string& OnetimePaymentRequest::_internal_expiry() const {
  return expiry_.Get();
}
inline void OnetimePaymentRequest::_internal_set_expiry(const std::string& value) {
  
  expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_expiry(std::string&& value) {
  
  expiry_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.expiry)
}
inline void OnetimePaymentRequest::set_expiry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.expiry)
}
inline void OnetimePaymentRequest::set_expiry(const char* value,
    size_t size) {
  
  expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.expiry)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_expiry() {
  
  return expiry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_expiry() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.expiry)
  return expiry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_expiry(std::string* expiry) {
  if (expiry != nullptr) {
    
  } else {
    
  }
  expiry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiry,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.expiry)
}

// string birth = 6;
inline void OnetimePaymentRequest::clear_birth() {
  birth_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::birth() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.birth)
  return _internal_birth();
}
inline void OnetimePaymentRequest::set_birth(const std::string& value) {
  _internal_set_birth(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.birth)
}
inline std::string* OnetimePaymentRequest::mutable_birth() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.birth)
  return _internal_mutable_birth();
}
inline const std::string& OnetimePaymentRequest::_internal_birth() const {
  return birth_.Get();
}
inline void OnetimePaymentRequest::_internal_set_birth(const std::string& value) {
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_birth(std::string&& value) {
  
  birth_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.birth)
}
inline void OnetimePaymentRequest::set_birth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.birth)
}
inline void OnetimePaymentRequest::set_birth(const char* value,
    size_t size) {
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.birth)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_birth() {
  
  return birth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_birth() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.birth)
  return birth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_birth(std::string* birth) {
  if (birth != nullptr) {
    
  } else {
    
  }
  birth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.birth)
}

// string pwd_2digit = 7;
inline void OnetimePaymentRequest::clear_pwd_2digit() {
  pwd_2digit_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::pwd_2digit() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.pwd_2digit)
  return _internal_pwd_2digit();
}
inline void OnetimePaymentRequest::set_pwd_2digit(const std::string& value) {
  _internal_set_pwd_2digit(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.pwd_2digit)
}
inline std::string* OnetimePaymentRequest::mutable_pwd_2digit() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.pwd_2digit)
  return _internal_mutable_pwd_2digit();
}
inline const std::string& OnetimePaymentRequest::_internal_pwd_2digit() const {
  return pwd_2digit_.Get();
}
inline void OnetimePaymentRequest::_internal_set_pwd_2digit(const std::string& value) {
  
  pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_pwd_2digit(std::string&& value) {
  
  pwd_2digit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.pwd_2digit)
}
inline void OnetimePaymentRequest::set_pwd_2digit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.pwd_2digit)
}
inline void OnetimePaymentRequest::set_pwd_2digit(const char* value,
    size_t size) {
  
  pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.pwd_2digit)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_pwd_2digit() {
  
  return pwd_2digit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_pwd_2digit() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.pwd_2digit)
  return pwd_2digit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_pwd_2digit(std::string* pwd_2digit) {
  if (pwd_2digit != nullptr) {
    
  } else {
    
  }
  pwd_2digit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd_2digit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.pwd_2digit)
}

// string customer_uid = 8;
inline void OnetimePaymentRequest::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.customer_uid)
  return _internal_customer_uid();
}
inline void OnetimePaymentRequest::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.customer_uid)
}
inline std::string* OnetimePaymentRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& OnetimePaymentRequest::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void OnetimePaymentRequest::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.customer_uid)
}
inline void OnetimePaymentRequest::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.customer_uid)
}
inline void OnetimePaymentRequest::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.customer_uid)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.customer_uid)
}

// string pg = 9;
inline void OnetimePaymentRequest::clear_pg() {
  pg_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::pg() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.pg)
  return _internal_pg();
}
inline void OnetimePaymentRequest::set_pg(const std::string& value) {
  _internal_set_pg(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.pg)
}
inline std::string* OnetimePaymentRequest::mutable_pg() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.pg)
  return _internal_mutable_pg();
}
inline const std::string& OnetimePaymentRequest::_internal_pg() const {
  return pg_.Get();
}
inline void OnetimePaymentRequest::_internal_set_pg(const std::string& value) {
  
  pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_pg(std::string&& value) {
  
  pg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.pg)
}
inline void OnetimePaymentRequest::set_pg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.pg)
}
inline void OnetimePaymentRequest::set_pg(const char* value,
    size_t size) {
  
  pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.pg)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_pg() {
  
  return pg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_pg() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.pg)
  return pg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_pg(std::string* pg) {
  if (pg != nullptr) {
    
  } else {
    
  }
  pg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.pg)
}

// string name = 10;
inline void OnetimePaymentRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::name() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.name)
  return _internal_name();
}
inline void OnetimePaymentRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.name)
}
inline std::string* OnetimePaymentRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.name)
  return _internal_mutable_name();
}
inline const std::string& OnetimePaymentRequest::_internal_name() const {
  return name_.Get();
}
inline void OnetimePaymentRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.name)
}
inline void OnetimePaymentRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.name)
}
inline void OnetimePaymentRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.name)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_name() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.name)
}

// string buyer_name = 11;
inline void OnetimePaymentRequest::clear_buyer_name() {
  buyer_name_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::buyer_name() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.buyer_name)
  return _internal_buyer_name();
}
inline void OnetimePaymentRequest::set_buyer_name(const std::string& value) {
  _internal_set_buyer_name(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.buyer_name)
}
inline std::string* OnetimePaymentRequest::mutable_buyer_name() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.buyer_name)
  return _internal_mutable_buyer_name();
}
inline const std::string& OnetimePaymentRequest::_internal_buyer_name() const {
  return buyer_name_.Get();
}
inline void OnetimePaymentRequest::_internal_set_buyer_name(const std::string& value) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_buyer_name(std::string&& value) {
  
  buyer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.buyer_name)
}
inline void OnetimePaymentRequest::set_buyer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.buyer_name)
}
inline void OnetimePaymentRequest::set_buyer_name(const char* value,
    size_t size) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.buyer_name)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_buyer_name() {
  
  return buyer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_buyer_name() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.buyer_name)
  return buyer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_buyer_name(std::string* buyer_name) {
  if (buyer_name != nullptr) {
    
  } else {
    
  }
  buyer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.buyer_name)
}

// string buyer_email = 12;
inline void OnetimePaymentRequest::clear_buyer_email() {
  buyer_email_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::buyer_email() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.buyer_email)
  return _internal_buyer_email();
}
inline void OnetimePaymentRequest::set_buyer_email(const std::string& value) {
  _internal_set_buyer_email(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.buyer_email)
}
inline std::string* OnetimePaymentRequest::mutable_buyer_email() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.buyer_email)
  return _internal_mutable_buyer_email();
}
inline const std::string& OnetimePaymentRequest::_internal_buyer_email() const {
  return buyer_email_.Get();
}
inline void OnetimePaymentRequest::_internal_set_buyer_email(const std::string& value) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_buyer_email(std::string&& value) {
  
  buyer_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.buyer_email)
}
inline void OnetimePaymentRequest::set_buyer_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.buyer_email)
}
inline void OnetimePaymentRequest::set_buyer_email(const char* value,
    size_t size) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.buyer_email)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_buyer_email() {
  
  return buyer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_buyer_email() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.buyer_email)
  return buyer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_buyer_email(std::string* buyer_email) {
  if (buyer_email != nullptr) {
    
  } else {
    
  }
  buyer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.buyer_email)
}

// string buyer_tel = 13;
inline void OnetimePaymentRequest::clear_buyer_tel() {
  buyer_tel_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::buyer_tel() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.buyer_tel)
  return _internal_buyer_tel();
}
inline void OnetimePaymentRequest::set_buyer_tel(const std::string& value) {
  _internal_set_buyer_tel(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.buyer_tel)
}
inline std::string* OnetimePaymentRequest::mutable_buyer_tel() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.buyer_tel)
  return _internal_mutable_buyer_tel();
}
inline const std::string& OnetimePaymentRequest::_internal_buyer_tel() const {
  return buyer_tel_.Get();
}
inline void OnetimePaymentRequest::_internal_set_buyer_tel(const std::string& value) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_buyer_tel(std::string&& value) {
  
  buyer_tel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.buyer_tel)
}
inline void OnetimePaymentRequest::set_buyer_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.buyer_tel)
}
inline void OnetimePaymentRequest::set_buyer_tel(const char* value,
    size_t size) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.buyer_tel)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_buyer_tel() {
  
  return buyer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_buyer_tel() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.buyer_tel)
  return buyer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_buyer_tel(std::string* buyer_tel) {
  if (buyer_tel != nullptr) {
    
  } else {
    
  }
  buyer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.buyer_tel)
}

// string buyer_addr = 14;
inline void OnetimePaymentRequest::clear_buyer_addr() {
  buyer_addr_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::buyer_addr() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.buyer_addr)
  return _internal_buyer_addr();
}
inline void OnetimePaymentRequest::set_buyer_addr(const std::string& value) {
  _internal_set_buyer_addr(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.buyer_addr)
}
inline std::string* OnetimePaymentRequest::mutable_buyer_addr() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.buyer_addr)
  return _internal_mutable_buyer_addr();
}
inline const std::string& OnetimePaymentRequest::_internal_buyer_addr() const {
  return buyer_addr_.Get();
}
inline void OnetimePaymentRequest::_internal_set_buyer_addr(const std::string& value) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_buyer_addr(std::string&& value) {
  
  buyer_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.buyer_addr)
}
inline void OnetimePaymentRequest::set_buyer_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.buyer_addr)
}
inline void OnetimePaymentRequest::set_buyer_addr(const char* value,
    size_t size) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.buyer_addr)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_buyer_addr() {
  
  return buyer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_buyer_addr() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.buyer_addr)
  return buyer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_buyer_addr(std::string* buyer_addr) {
  if (buyer_addr != nullptr) {
    
  } else {
    
  }
  buyer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.buyer_addr)
}

// string buyer_postcode = 15;
inline void OnetimePaymentRequest::clear_buyer_postcode() {
  buyer_postcode_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::buyer_postcode() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.buyer_postcode)
  return _internal_buyer_postcode();
}
inline void OnetimePaymentRequest::set_buyer_postcode(const std::string& value) {
  _internal_set_buyer_postcode(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.buyer_postcode)
}
inline std::string* OnetimePaymentRequest::mutable_buyer_postcode() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.buyer_postcode)
  return _internal_mutable_buyer_postcode();
}
inline const std::string& OnetimePaymentRequest::_internal_buyer_postcode() const {
  return buyer_postcode_.Get();
}
inline void OnetimePaymentRequest::_internal_set_buyer_postcode(const std::string& value) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_buyer_postcode(std::string&& value) {
  
  buyer_postcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.buyer_postcode)
}
inline void OnetimePaymentRequest::set_buyer_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.buyer_postcode)
}
inline void OnetimePaymentRequest::set_buyer_postcode(const char* value,
    size_t size) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.buyer_postcode)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_buyer_postcode() {
  
  return buyer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_buyer_postcode() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.buyer_postcode)
  return buyer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_buyer_postcode(std::string* buyer_postcode) {
  if (buyer_postcode != nullptr) {
    
  } else {
    
  }
  buyer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.buyer_postcode)
}

// int32 card_quota = 16;
inline void OnetimePaymentRequest::clear_card_quota() {
  card_quota_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnetimePaymentRequest::_internal_card_quota() const {
  return card_quota_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnetimePaymentRequest::card_quota() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.card_quota)
  return _internal_card_quota();
}
inline void OnetimePaymentRequest::_internal_set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_quota_ = value;
}
inline void OnetimePaymentRequest::set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_quota(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.card_quota)
}

// bool interest_free_by_merchant = 17;
inline void OnetimePaymentRequest::clear_interest_free_by_merchant() {
  interest_free_by_merchant_ = false;
}
inline bool OnetimePaymentRequest::_internal_interest_free_by_merchant() const {
  return interest_free_by_merchant_;
}
inline bool OnetimePaymentRequest::interest_free_by_merchant() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.interest_free_by_merchant)
  return _internal_interest_free_by_merchant();
}
inline void OnetimePaymentRequest::_internal_set_interest_free_by_merchant(bool value) {
  
  interest_free_by_merchant_ = value;
}
inline void OnetimePaymentRequest::set_interest_free_by_merchant(bool value) {
  _internal_set_interest_free_by_merchant(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.interest_free_by_merchant)
}

// string custom_data = 18;
inline void OnetimePaymentRequest::clear_custom_data() {
  custom_data_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::custom_data() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.custom_data)
  return _internal_custom_data();
}
inline void OnetimePaymentRequest::set_custom_data(const std::string& value) {
  _internal_set_custom_data(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.custom_data)
}
inline std::string* OnetimePaymentRequest::mutable_custom_data() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.custom_data)
  return _internal_mutable_custom_data();
}
inline const std::string& OnetimePaymentRequest::_internal_custom_data() const {
  return custom_data_.Get();
}
inline void OnetimePaymentRequest::_internal_set_custom_data(const std::string& value) {
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_custom_data(std::string&& value) {
  
  custom_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.custom_data)
}
inline void OnetimePaymentRequest::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.custom_data)
}
inline void OnetimePaymentRequest::set_custom_data(const char* value,
    size_t size) {
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.custom_data)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_custom_data() {
  
  return custom_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_custom_data() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.custom_data)
  return custom_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_custom_data(std::string* custom_data) {
  if (custom_data != nullptr) {
    
  } else {
    
  }
  custom_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.custom_data)
}

// string notice_url = 19;
inline void OnetimePaymentRequest::clear_notice_url() {
  notice_url_.ClearToEmpty();
}
inline const std::string& OnetimePaymentRequest::notice_url() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentRequest.notice_url)
  return _internal_notice_url();
}
inline void OnetimePaymentRequest::set_notice_url(const std::string& value) {
  _internal_set_notice_url(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentRequest.notice_url)
}
inline std::string* OnetimePaymentRequest::mutable_notice_url() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentRequest.notice_url)
  return _internal_mutable_notice_url();
}
inline const std::string& OnetimePaymentRequest::_internal_notice_url() const {
  return notice_url_.Get();
}
inline void OnetimePaymentRequest::_internal_set_notice_url(const std::string& value) {
  
  notice_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentRequest::set_notice_url(std::string&& value) {
  
  notice_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentRequest.notice_url)
}
inline void OnetimePaymentRequest::set_notice_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentRequest.notice_url)
}
inline void OnetimePaymentRequest::set_notice_url(const char* value,
    size_t size) {
  
  notice_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentRequest.notice_url)
}
inline std::string* OnetimePaymentRequest::_internal_mutable_notice_url() {
  
  return notice_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentRequest::release_notice_url() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentRequest.notice_url)
  return notice_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentRequest::set_allocated_notice_url(std::string* notice_url) {
  if (notice_url != nullptr) {
    
  } else {
    
  }
  notice_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentRequest.notice_url)
}

// -------------------------------------------------------------------

// OnetimePaymentResponse

// int32 code = 1;
inline void OnetimePaymentResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnetimePaymentResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnetimePaymentResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentResponse.code)
  return _internal_code();
}
inline void OnetimePaymentResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnetimePaymentResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentResponse.code)
}

// string message = 2;
inline void OnetimePaymentResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& OnetimePaymentResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentResponse.message)
  return _internal_message();
}
inline void OnetimePaymentResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe.OnetimePaymentResponse.message)
}
inline std::string* OnetimePaymentResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentResponse.message)
  return _internal_mutable_message();
}
inline const std::string& OnetimePaymentResponse::_internal_message() const {
  return message_.Get();
}
inline void OnetimePaymentResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnetimePaymentResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.OnetimePaymentResponse.message)
}
inline void OnetimePaymentResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.OnetimePaymentResponse.message)
}
inline void OnetimePaymentResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.OnetimePaymentResponse.message)
}
inline std::string* OnetimePaymentResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnetimePaymentResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnetimePaymentResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentResponse.message)
}

// .payment.Payment response = 3;
inline bool OnetimePaymentResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool OnetimePaymentResponse::has_response() const {
  return _internal_has_response();
}
inline const ::payment::Payment& OnetimePaymentResponse::_internal_response() const {
  const ::payment::Payment* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::Payment&>(
      ::payment::_Payment_default_instance_);
}
inline const ::payment::Payment& OnetimePaymentResponse::response() const {
  // @@protoc_insertion_point(field_get:subscribe.OnetimePaymentResponse.response)
  return _internal_response();
}
inline void OnetimePaymentResponse::unsafe_arena_set_allocated_response(
    ::payment::Payment* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscribe.OnetimePaymentResponse.response)
}
inline ::payment::Payment* OnetimePaymentResponse::release_response() {
  
  ::payment::Payment* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::payment::Payment* OnetimePaymentResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:subscribe.OnetimePaymentResponse.response)
  
  ::payment::Payment* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::payment::Payment* OnetimePaymentResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::Payment>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::payment::Payment* OnetimePaymentResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:subscribe.OnetimePaymentResponse.response)
  return _internal_mutable_response();
}
inline void OnetimePaymentResponse::set_allocated_response(::payment::Payment* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:subscribe.OnetimePaymentResponse.response)
}

// -------------------------------------------------------------------

// AgainPaymentRequest

// string customer_uid = 1;
inline void AgainPaymentRequest::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& AgainPaymentRequest::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.customer_uid)
  return _internal_customer_uid();
}
inline void AgainPaymentRequest::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.customer_uid)
}
inline std::string* AgainPaymentRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentRequest.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& AgainPaymentRequest::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void AgainPaymentRequest::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentRequest::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentRequest.customer_uid)
}
inline void AgainPaymentRequest::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentRequest.customer_uid)
}
inline void AgainPaymentRequest::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentRequest.customer_uid)
}
inline std::string* AgainPaymentRequest::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentRequest::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentRequest.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentRequest::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentRequest.customer_uid)
}

// string merchant_uid = 2;
inline void AgainPaymentRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& AgainPaymentRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.merchant_uid)
  return _internal_merchant_uid();
}
inline void AgainPaymentRequest::set_merchant_uid(const std::string& value) {
  _internal_set_merchant_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.merchant_uid)
}
inline std::string* AgainPaymentRequest::mutable_merchant_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentRequest.merchant_uid)
  return _internal_mutable_merchant_uid();
}
inline const std::string& AgainPaymentRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void AgainPaymentRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentRequest::set_merchant_uid(std::string&& value) {
  
  merchant_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentRequest.merchant_uid)
}
inline void AgainPaymentRequest::set_merchant_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentRequest.merchant_uid)
}
inline void AgainPaymentRequest::set_merchant_uid(const char* value,
    size_t size) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentRequest.merchant_uid)
}
inline std::string* AgainPaymentRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentRequest.merchant_uid)
}

// int32 amount = 3;
inline void AgainPaymentRequest::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgainPaymentRequest::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgainPaymentRequest::amount() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.amount)
  return _internal_amount();
}
inline void AgainPaymentRequest::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void AgainPaymentRequest::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.amount)
}

// int32 tax_free = 4;
inline void AgainPaymentRequest::clear_tax_free() {
  tax_free_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgainPaymentRequest::_internal_tax_free() const {
  return tax_free_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgainPaymentRequest::tax_free() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.tax_free)
  return _internal_tax_free();
}
inline void AgainPaymentRequest::_internal_set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tax_free_ = value;
}
inline void AgainPaymentRequest::set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tax_free(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.tax_free)
}

// string name = 5;
inline void AgainPaymentRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AgainPaymentRequest::name() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.name)
  return _internal_name();
}
inline void AgainPaymentRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.name)
}
inline std::string* AgainPaymentRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AgainPaymentRequest::_internal_name() const {
  return name_.Get();
}
inline void AgainPaymentRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentRequest.name)
}
inline void AgainPaymentRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentRequest.name)
}
inline void AgainPaymentRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentRequest.name)
}
inline std::string* AgainPaymentRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentRequest::release_name() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentRequest.name)
}

// string buyer_name = 6;
inline void AgainPaymentRequest::clear_buyer_name() {
  buyer_name_.ClearToEmpty();
}
inline const std::string& AgainPaymentRequest::buyer_name() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.buyer_name)
  return _internal_buyer_name();
}
inline void AgainPaymentRequest::set_buyer_name(const std::string& value) {
  _internal_set_buyer_name(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.buyer_name)
}
inline std::string* AgainPaymentRequest::mutable_buyer_name() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentRequest.buyer_name)
  return _internal_mutable_buyer_name();
}
inline const std::string& AgainPaymentRequest::_internal_buyer_name() const {
  return buyer_name_.Get();
}
inline void AgainPaymentRequest::_internal_set_buyer_name(const std::string& value) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentRequest::set_buyer_name(std::string&& value) {
  
  buyer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentRequest.buyer_name)
}
inline void AgainPaymentRequest::set_buyer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentRequest.buyer_name)
}
inline void AgainPaymentRequest::set_buyer_name(const char* value,
    size_t size) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentRequest.buyer_name)
}
inline std::string* AgainPaymentRequest::_internal_mutable_buyer_name() {
  
  return buyer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentRequest::release_buyer_name() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentRequest.buyer_name)
  return buyer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentRequest::set_allocated_buyer_name(std::string* buyer_name) {
  if (buyer_name != nullptr) {
    
  } else {
    
  }
  buyer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentRequest.buyer_name)
}

// string buyer_email = 7;
inline void AgainPaymentRequest::clear_buyer_email() {
  buyer_email_.ClearToEmpty();
}
inline const std::string& AgainPaymentRequest::buyer_email() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.buyer_email)
  return _internal_buyer_email();
}
inline void AgainPaymentRequest::set_buyer_email(const std::string& value) {
  _internal_set_buyer_email(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.buyer_email)
}
inline std::string* AgainPaymentRequest::mutable_buyer_email() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentRequest.buyer_email)
  return _internal_mutable_buyer_email();
}
inline const std::string& AgainPaymentRequest::_internal_buyer_email() const {
  return buyer_email_.Get();
}
inline void AgainPaymentRequest::_internal_set_buyer_email(const std::string& value) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentRequest::set_buyer_email(std::string&& value) {
  
  buyer_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentRequest.buyer_email)
}
inline void AgainPaymentRequest::set_buyer_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentRequest.buyer_email)
}
inline void AgainPaymentRequest::set_buyer_email(const char* value,
    size_t size) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentRequest.buyer_email)
}
inline std::string* AgainPaymentRequest::_internal_mutable_buyer_email() {
  
  return buyer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentRequest::release_buyer_email() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentRequest.buyer_email)
  return buyer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentRequest::set_allocated_buyer_email(std::string* buyer_email) {
  if (buyer_email != nullptr) {
    
  } else {
    
  }
  buyer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentRequest.buyer_email)
}

// string buyer_tel = 8;
inline void AgainPaymentRequest::clear_buyer_tel() {
  buyer_tel_.ClearToEmpty();
}
inline const std::string& AgainPaymentRequest::buyer_tel() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.buyer_tel)
  return _internal_buyer_tel();
}
inline void AgainPaymentRequest::set_buyer_tel(const std::string& value) {
  _internal_set_buyer_tel(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.buyer_tel)
}
inline std::string* AgainPaymentRequest::mutable_buyer_tel() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentRequest.buyer_tel)
  return _internal_mutable_buyer_tel();
}
inline const std::string& AgainPaymentRequest::_internal_buyer_tel() const {
  return buyer_tel_.Get();
}
inline void AgainPaymentRequest::_internal_set_buyer_tel(const std::string& value) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentRequest::set_buyer_tel(std::string&& value) {
  
  buyer_tel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentRequest.buyer_tel)
}
inline void AgainPaymentRequest::set_buyer_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentRequest.buyer_tel)
}
inline void AgainPaymentRequest::set_buyer_tel(const char* value,
    size_t size) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentRequest.buyer_tel)
}
inline std::string* AgainPaymentRequest::_internal_mutable_buyer_tel() {
  
  return buyer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentRequest::release_buyer_tel() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentRequest.buyer_tel)
  return buyer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentRequest::set_allocated_buyer_tel(std::string* buyer_tel) {
  if (buyer_tel != nullptr) {
    
  } else {
    
  }
  buyer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentRequest.buyer_tel)
}

// string buyer_addr = 9;
inline void AgainPaymentRequest::clear_buyer_addr() {
  buyer_addr_.ClearToEmpty();
}
inline const std::string& AgainPaymentRequest::buyer_addr() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.buyer_addr)
  return _internal_buyer_addr();
}
inline void AgainPaymentRequest::set_buyer_addr(const std::string& value) {
  _internal_set_buyer_addr(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.buyer_addr)
}
inline std::string* AgainPaymentRequest::mutable_buyer_addr() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentRequest.buyer_addr)
  return _internal_mutable_buyer_addr();
}
inline const std::string& AgainPaymentRequest::_internal_buyer_addr() const {
  return buyer_addr_.Get();
}
inline void AgainPaymentRequest::_internal_set_buyer_addr(const std::string& value) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentRequest::set_buyer_addr(std::string&& value) {
  
  buyer_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentRequest.buyer_addr)
}
inline void AgainPaymentRequest::set_buyer_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentRequest.buyer_addr)
}
inline void AgainPaymentRequest::set_buyer_addr(const char* value,
    size_t size) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentRequest.buyer_addr)
}
inline std::string* AgainPaymentRequest::_internal_mutable_buyer_addr() {
  
  return buyer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentRequest::release_buyer_addr() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentRequest.buyer_addr)
  return buyer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentRequest::set_allocated_buyer_addr(std::string* buyer_addr) {
  if (buyer_addr != nullptr) {
    
  } else {
    
  }
  buyer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentRequest.buyer_addr)
}

// string buyer_postcode = 10;
inline void AgainPaymentRequest::clear_buyer_postcode() {
  buyer_postcode_.ClearToEmpty();
}
inline const std::string& AgainPaymentRequest::buyer_postcode() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.buyer_postcode)
  return _internal_buyer_postcode();
}
inline void AgainPaymentRequest::set_buyer_postcode(const std::string& value) {
  _internal_set_buyer_postcode(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.buyer_postcode)
}
inline std::string* AgainPaymentRequest::mutable_buyer_postcode() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentRequest.buyer_postcode)
  return _internal_mutable_buyer_postcode();
}
inline const std::string& AgainPaymentRequest::_internal_buyer_postcode() const {
  return buyer_postcode_.Get();
}
inline void AgainPaymentRequest::_internal_set_buyer_postcode(const std::string& value) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentRequest::set_buyer_postcode(std::string&& value) {
  
  buyer_postcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentRequest.buyer_postcode)
}
inline void AgainPaymentRequest::set_buyer_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentRequest.buyer_postcode)
}
inline void AgainPaymentRequest::set_buyer_postcode(const char* value,
    size_t size) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentRequest.buyer_postcode)
}
inline std::string* AgainPaymentRequest::_internal_mutable_buyer_postcode() {
  
  return buyer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentRequest::release_buyer_postcode() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentRequest.buyer_postcode)
  return buyer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentRequest::set_allocated_buyer_postcode(std::string* buyer_postcode) {
  if (buyer_postcode != nullptr) {
    
  } else {
    
  }
  buyer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentRequest.buyer_postcode)
}

// int32 card_quota = 11;
inline void AgainPaymentRequest::clear_card_quota() {
  card_quota_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgainPaymentRequest::_internal_card_quota() const {
  return card_quota_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgainPaymentRequest::card_quota() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.card_quota)
  return _internal_card_quota();
}
inline void AgainPaymentRequest::_internal_set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_quota_ = value;
}
inline void AgainPaymentRequest::set_card_quota(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_quota(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.card_quota)
}

// bool interest_free_by_merchant = 12;
inline void AgainPaymentRequest::clear_interest_free_by_merchant() {
  interest_free_by_merchant_ = false;
}
inline bool AgainPaymentRequest::_internal_interest_free_by_merchant() const {
  return interest_free_by_merchant_;
}
inline bool AgainPaymentRequest::interest_free_by_merchant() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.interest_free_by_merchant)
  return _internal_interest_free_by_merchant();
}
inline void AgainPaymentRequest::_internal_set_interest_free_by_merchant(bool value) {
  
  interest_free_by_merchant_ = value;
}
inline void AgainPaymentRequest::set_interest_free_by_merchant(bool value) {
  _internal_set_interest_free_by_merchant(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.interest_free_by_merchant)
}

// string custom_data = 13;
inline void AgainPaymentRequest::clear_custom_data() {
  custom_data_.ClearToEmpty();
}
inline const std::string& AgainPaymentRequest::custom_data() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.custom_data)
  return _internal_custom_data();
}
inline void AgainPaymentRequest::set_custom_data(const std::string& value) {
  _internal_set_custom_data(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.custom_data)
}
inline std::string* AgainPaymentRequest::mutable_custom_data() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentRequest.custom_data)
  return _internal_mutable_custom_data();
}
inline const std::string& AgainPaymentRequest::_internal_custom_data() const {
  return custom_data_.Get();
}
inline void AgainPaymentRequest::_internal_set_custom_data(const std::string& value) {
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentRequest::set_custom_data(std::string&& value) {
  
  custom_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentRequest.custom_data)
}
inline void AgainPaymentRequest::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentRequest.custom_data)
}
inline void AgainPaymentRequest::set_custom_data(const char* value,
    size_t size) {
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentRequest.custom_data)
}
inline std::string* AgainPaymentRequest::_internal_mutable_custom_data() {
  
  return custom_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentRequest::release_custom_data() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentRequest.custom_data)
  return custom_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentRequest::set_allocated_custom_data(std::string* custom_data) {
  if (custom_data != nullptr) {
    
  } else {
    
  }
  custom_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentRequest.custom_data)
}

// string notice_url = 14;
inline void AgainPaymentRequest::clear_notice_url() {
  notice_url_.ClearToEmpty();
}
inline const std::string& AgainPaymentRequest::notice_url() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentRequest.notice_url)
  return _internal_notice_url();
}
inline void AgainPaymentRequest::set_notice_url(const std::string& value) {
  _internal_set_notice_url(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentRequest.notice_url)
}
inline std::string* AgainPaymentRequest::mutable_notice_url() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentRequest.notice_url)
  return _internal_mutable_notice_url();
}
inline const std::string& AgainPaymentRequest::_internal_notice_url() const {
  return notice_url_.Get();
}
inline void AgainPaymentRequest::_internal_set_notice_url(const std::string& value) {
  
  notice_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentRequest::set_notice_url(std::string&& value) {
  
  notice_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentRequest.notice_url)
}
inline void AgainPaymentRequest::set_notice_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentRequest.notice_url)
}
inline void AgainPaymentRequest::set_notice_url(const char* value,
    size_t size) {
  
  notice_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentRequest.notice_url)
}
inline std::string* AgainPaymentRequest::_internal_mutable_notice_url() {
  
  return notice_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentRequest::release_notice_url() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentRequest.notice_url)
  return notice_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentRequest::set_allocated_notice_url(std::string* notice_url) {
  if (notice_url != nullptr) {
    
  } else {
    
  }
  notice_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentRequest.notice_url)
}

// -------------------------------------------------------------------

// AgainPaymentResponse

// int32 code = 1;
inline void AgainPaymentResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgainPaymentResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgainPaymentResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentResponse.code)
  return _internal_code();
}
inline void AgainPaymentResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void AgainPaymentResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentResponse.code)
}

// string message = 2;
inline void AgainPaymentResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AgainPaymentResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentResponse.message)
  return _internal_message();
}
inline void AgainPaymentResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe.AgainPaymentResponse.message)
}
inline std::string* AgainPaymentResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentResponse.message)
  return _internal_mutable_message();
}
inline const std::string& AgainPaymentResponse::_internal_message() const {
  return message_.Get();
}
inline void AgainPaymentResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgainPaymentResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.AgainPaymentResponse.message)
}
inline void AgainPaymentResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.AgainPaymentResponse.message)
}
inline void AgainPaymentResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.AgainPaymentResponse.message)
}
inline std::string* AgainPaymentResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgainPaymentResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgainPaymentResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentResponse.message)
}

// .payment.Payment response = 3;
inline bool AgainPaymentResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool AgainPaymentResponse::has_response() const {
  return _internal_has_response();
}
inline const ::payment::Payment& AgainPaymentResponse::_internal_response() const {
  const ::payment::Payment* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::payment::Payment&>(
      ::payment::_Payment_default_instance_);
}
inline const ::payment::Payment& AgainPaymentResponse::response() const {
  // @@protoc_insertion_point(field_get:subscribe.AgainPaymentResponse.response)
  return _internal_response();
}
inline void AgainPaymentResponse::unsafe_arena_set_allocated_response(
    ::payment::Payment* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscribe.AgainPaymentResponse.response)
}
inline ::payment::Payment* AgainPaymentResponse::release_response() {
  
  ::payment::Payment* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::payment::Payment* AgainPaymentResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:subscribe.AgainPaymentResponse.response)
  
  ::payment::Payment* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::payment::Payment* AgainPaymentResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::payment::Payment>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::payment::Payment* AgainPaymentResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:subscribe.AgainPaymentResponse.response)
  return _internal_mutable_response();
}
inline void AgainPaymentResponse::set_allocated_response(::payment::Payment* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:subscribe.AgainPaymentResponse.response)
}

// -------------------------------------------------------------------

// PaymentScheduleParam

// string merchant_uid = 1;
inline void PaymentScheduleParam::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& PaymentScheduleParam::merchant_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.PaymentScheduleParam.merchant_uid)
  return _internal_merchant_uid();
}
inline void PaymentScheduleParam::set_merchant_uid(const std::string& value) {
  _internal_set_merchant_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.PaymentScheduleParam.merchant_uid)
}
inline std::string* PaymentScheduleParam::mutable_merchant_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.PaymentScheduleParam.merchant_uid)
  return _internal_mutable_merchant_uid();
}
inline const std::string& PaymentScheduleParam::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void PaymentScheduleParam::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PaymentScheduleParam::set_merchant_uid(std::string&& value) {
  
  merchant_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.PaymentScheduleParam.merchant_uid)
}
inline void PaymentScheduleParam::set_merchant_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.PaymentScheduleParam.merchant_uid)
}
inline void PaymentScheduleParam::set_merchant_uid(const char* value,
    size_t size) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.PaymentScheduleParam.merchant_uid)
}
inline std::string* PaymentScheduleParam::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PaymentScheduleParam::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:subscribe.PaymentScheduleParam.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaymentScheduleParam::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.PaymentScheduleParam.merchant_uid)
}

// int32 schedule_at = 2;
inline void PaymentScheduleParam::clear_schedule_at() {
  schedule_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentScheduleParam::_internal_schedule_at() const {
  return schedule_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentScheduleParam::schedule_at() const {
  // @@protoc_insertion_point(field_get:subscribe.PaymentScheduleParam.schedule_at)
  return _internal_schedule_at();
}
inline void PaymentScheduleParam::_internal_set_schedule_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  schedule_at_ = value;
}
inline void PaymentScheduleParam::set_schedule_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_schedule_at(value);
  // @@protoc_insertion_point(field_set:subscribe.PaymentScheduleParam.schedule_at)
}

// int32 amount = 3;
inline void PaymentScheduleParam::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentScheduleParam::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentScheduleParam::amount() const {
  // @@protoc_insertion_point(field_get:subscribe.PaymentScheduleParam.amount)
  return _internal_amount();
}
inline void PaymentScheduleParam::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void PaymentScheduleParam::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:subscribe.PaymentScheduleParam.amount)
}

// int32 tax_free = 4;
inline void PaymentScheduleParam::clear_tax_free() {
  tax_free_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentScheduleParam::_internal_tax_free() const {
  return tax_free_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaymentScheduleParam::tax_free() const {
  // @@protoc_insertion_point(field_get:subscribe.PaymentScheduleParam.tax_free)
  return _internal_tax_free();
}
inline void PaymentScheduleParam::_internal_set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tax_free_ = value;
}
inline void PaymentScheduleParam::set_tax_free(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tax_free(value);
  // @@protoc_insertion_point(field_set:subscribe.PaymentScheduleParam.tax_free)
}

// string name = 5;
inline void PaymentScheduleParam::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PaymentScheduleParam::name() const {
  // @@protoc_insertion_point(field_get:subscribe.PaymentScheduleParam.name)
  return _internal_name();
}
inline void PaymentScheduleParam::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:subscribe.PaymentScheduleParam.name)
}
inline std::string* PaymentScheduleParam::mutable_name() {
  // @@protoc_insertion_point(field_mutable:subscribe.PaymentScheduleParam.name)
  return _internal_mutable_name();
}
inline const std::string& PaymentScheduleParam::_internal_name() const {
  return name_.Get();
}
inline void PaymentScheduleParam::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PaymentScheduleParam::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.PaymentScheduleParam.name)
}
inline void PaymentScheduleParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.PaymentScheduleParam.name)
}
inline void PaymentScheduleParam::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.PaymentScheduleParam.name)
}
inline std::string* PaymentScheduleParam::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PaymentScheduleParam::release_name() {
  // @@protoc_insertion_point(field_release:subscribe.PaymentScheduleParam.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaymentScheduleParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.PaymentScheduleParam.name)
}

// string buyer_name = 6;
inline void PaymentScheduleParam::clear_buyer_name() {
  buyer_name_.ClearToEmpty();
}
inline const std::string& PaymentScheduleParam::buyer_name() const {
  // @@protoc_insertion_point(field_get:subscribe.PaymentScheduleParam.buyer_name)
  return _internal_buyer_name();
}
inline void PaymentScheduleParam::set_buyer_name(const std::string& value) {
  _internal_set_buyer_name(value);
  // @@protoc_insertion_point(field_set:subscribe.PaymentScheduleParam.buyer_name)
}
inline std::string* PaymentScheduleParam::mutable_buyer_name() {
  // @@protoc_insertion_point(field_mutable:subscribe.PaymentScheduleParam.buyer_name)
  return _internal_mutable_buyer_name();
}
inline const std::string& PaymentScheduleParam::_internal_buyer_name() const {
  return buyer_name_.Get();
}
inline void PaymentScheduleParam::_internal_set_buyer_name(const std::string& value) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PaymentScheduleParam::set_buyer_name(std::string&& value) {
  
  buyer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.PaymentScheduleParam.buyer_name)
}
inline void PaymentScheduleParam::set_buyer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.PaymentScheduleParam.buyer_name)
}
inline void PaymentScheduleParam::set_buyer_name(const char* value,
    size_t size) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.PaymentScheduleParam.buyer_name)
}
inline std::string* PaymentScheduleParam::_internal_mutable_buyer_name() {
  
  return buyer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PaymentScheduleParam::release_buyer_name() {
  // @@protoc_insertion_point(field_release:subscribe.PaymentScheduleParam.buyer_name)
  return buyer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaymentScheduleParam::set_allocated_buyer_name(std::string* buyer_name) {
  if (buyer_name != nullptr) {
    
  } else {
    
  }
  buyer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.PaymentScheduleParam.buyer_name)
}

// string buyer_email = 7;
inline void PaymentScheduleParam::clear_buyer_email() {
  buyer_email_.ClearToEmpty();
}
inline const std::string& PaymentScheduleParam::buyer_email() const {
  // @@protoc_insertion_point(field_get:subscribe.PaymentScheduleParam.buyer_email)
  return _internal_buyer_email();
}
inline void PaymentScheduleParam::set_buyer_email(const std::string& value) {
  _internal_set_buyer_email(value);
  // @@protoc_insertion_point(field_set:subscribe.PaymentScheduleParam.buyer_email)
}
inline std::string* PaymentScheduleParam::mutable_buyer_email() {
  // @@protoc_insertion_point(field_mutable:subscribe.PaymentScheduleParam.buyer_email)
  return _internal_mutable_buyer_email();
}
inline const std::string& PaymentScheduleParam::_internal_buyer_email() const {
  return buyer_email_.Get();
}
inline void PaymentScheduleParam::_internal_set_buyer_email(const std::string& value) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PaymentScheduleParam::set_buyer_email(std::string&& value) {
  
  buyer_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.PaymentScheduleParam.buyer_email)
}
inline void PaymentScheduleParam::set_buyer_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.PaymentScheduleParam.buyer_email)
}
inline void PaymentScheduleParam::set_buyer_email(const char* value,
    size_t size) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.PaymentScheduleParam.buyer_email)
}
inline std::string* PaymentScheduleParam::_internal_mutable_buyer_email() {
  
  return buyer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PaymentScheduleParam::release_buyer_email() {
  // @@protoc_insertion_point(field_release:subscribe.PaymentScheduleParam.buyer_email)
  return buyer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaymentScheduleParam::set_allocated_buyer_email(std::string* buyer_email) {
  if (buyer_email != nullptr) {
    
  } else {
    
  }
  buyer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.PaymentScheduleParam.buyer_email)
}

// string buyer_tel = 8;
inline void PaymentScheduleParam::clear_buyer_tel() {
  buyer_tel_.ClearToEmpty();
}
inline const std::string& PaymentScheduleParam::buyer_tel() const {
  // @@protoc_insertion_point(field_get:subscribe.PaymentScheduleParam.buyer_tel)
  return _internal_buyer_tel();
}
inline void PaymentScheduleParam::set_buyer_tel(const std::string& value) {
  _internal_set_buyer_tel(value);
  // @@protoc_insertion_point(field_set:subscribe.PaymentScheduleParam.buyer_tel)
}
inline std::string* PaymentScheduleParam::mutable_buyer_tel() {
  // @@protoc_insertion_point(field_mutable:subscribe.PaymentScheduleParam.buyer_tel)
  return _internal_mutable_buyer_tel();
}
inline const std::string& PaymentScheduleParam::_internal_buyer_tel() const {
  return buyer_tel_.Get();
}
inline void PaymentScheduleParam::_internal_set_buyer_tel(const std::string& value) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PaymentScheduleParam::set_buyer_tel(std::string&& value) {
  
  buyer_tel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.PaymentScheduleParam.buyer_tel)
}
inline void PaymentScheduleParam::set_buyer_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.PaymentScheduleParam.buyer_tel)
}
inline void PaymentScheduleParam::set_buyer_tel(const char* value,
    size_t size) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.PaymentScheduleParam.buyer_tel)
}
inline std::string* PaymentScheduleParam::_internal_mutable_buyer_tel() {
  
  return buyer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PaymentScheduleParam::release_buyer_tel() {
  // @@protoc_insertion_point(field_release:subscribe.PaymentScheduleParam.buyer_tel)
  return buyer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaymentScheduleParam::set_allocated_buyer_tel(std::string* buyer_tel) {
  if (buyer_tel != nullptr) {
    
  } else {
    
  }
  buyer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.PaymentScheduleParam.buyer_tel)
}

// string buyer_addr = 9;
inline void PaymentScheduleParam::clear_buyer_addr() {
  buyer_addr_.ClearToEmpty();
}
inline const std::string& PaymentScheduleParam::buyer_addr() const {
  // @@protoc_insertion_point(field_get:subscribe.PaymentScheduleParam.buyer_addr)
  return _internal_buyer_addr();
}
inline void PaymentScheduleParam::set_buyer_addr(const std::string& value) {
  _internal_set_buyer_addr(value);
  // @@protoc_insertion_point(field_set:subscribe.PaymentScheduleParam.buyer_addr)
}
inline std::string* PaymentScheduleParam::mutable_buyer_addr() {
  // @@protoc_insertion_point(field_mutable:subscribe.PaymentScheduleParam.buyer_addr)
  return _internal_mutable_buyer_addr();
}
inline const std::string& PaymentScheduleParam::_internal_buyer_addr() const {
  return buyer_addr_.Get();
}
inline void PaymentScheduleParam::_internal_set_buyer_addr(const std::string& value) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PaymentScheduleParam::set_buyer_addr(std::string&& value) {
  
  buyer_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.PaymentScheduleParam.buyer_addr)
}
inline void PaymentScheduleParam::set_buyer_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.PaymentScheduleParam.buyer_addr)
}
inline void PaymentScheduleParam::set_buyer_addr(const char* value,
    size_t size) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.PaymentScheduleParam.buyer_addr)
}
inline std::string* PaymentScheduleParam::_internal_mutable_buyer_addr() {
  
  return buyer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PaymentScheduleParam::release_buyer_addr() {
  // @@protoc_insertion_point(field_release:subscribe.PaymentScheduleParam.buyer_addr)
  return buyer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaymentScheduleParam::set_allocated_buyer_addr(std::string* buyer_addr) {
  if (buyer_addr != nullptr) {
    
  } else {
    
  }
  buyer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.PaymentScheduleParam.buyer_addr)
}

// string buyer_postcode = 10;
inline void PaymentScheduleParam::clear_buyer_postcode() {
  buyer_postcode_.ClearToEmpty();
}
inline const std::string& PaymentScheduleParam::buyer_postcode() const {
  // @@protoc_insertion_point(field_get:subscribe.PaymentScheduleParam.buyer_postcode)
  return _internal_buyer_postcode();
}
inline void PaymentScheduleParam::set_buyer_postcode(const std::string& value) {
  _internal_set_buyer_postcode(value);
  // @@protoc_insertion_point(field_set:subscribe.PaymentScheduleParam.buyer_postcode)
}
inline std::string* PaymentScheduleParam::mutable_buyer_postcode() {
  // @@protoc_insertion_point(field_mutable:subscribe.PaymentScheduleParam.buyer_postcode)
  return _internal_mutable_buyer_postcode();
}
inline const std::string& PaymentScheduleParam::_internal_buyer_postcode() const {
  return buyer_postcode_.Get();
}
inline void PaymentScheduleParam::_internal_set_buyer_postcode(const std::string& value) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PaymentScheduleParam::set_buyer_postcode(std::string&& value) {
  
  buyer_postcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.PaymentScheduleParam.buyer_postcode)
}
inline void PaymentScheduleParam::set_buyer_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.PaymentScheduleParam.buyer_postcode)
}
inline void PaymentScheduleParam::set_buyer_postcode(const char* value,
    size_t size) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.PaymentScheduleParam.buyer_postcode)
}
inline std::string* PaymentScheduleParam::_internal_mutable_buyer_postcode() {
  
  return buyer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PaymentScheduleParam::release_buyer_postcode() {
  // @@protoc_insertion_point(field_release:subscribe.PaymentScheduleParam.buyer_postcode)
  return buyer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaymentScheduleParam::set_allocated_buyer_postcode(std::string* buyer_postcode) {
  if (buyer_postcode != nullptr) {
    
  } else {
    
  }
  buyer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.PaymentScheduleParam.buyer_postcode)
}

// -------------------------------------------------------------------

// UnitSchedulePaymentResponse

// string customer_uid = 1;
inline void UnitSchedulePaymentResponse::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.customer_uid)
  return _internal_customer_uid();
}
inline void UnitSchedulePaymentResponse::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.customer_uid)
}
inline std::string* UnitSchedulePaymentResponse::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.customer_uid)
}
inline void UnitSchedulePaymentResponse::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.customer_uid)
}
inline void UnitSchedulePaymentResponse::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.customer_uid)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.customer_uid)
}

// string merchant_uid = 2;
inline void UnitSchedulePaymentResponse::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::merchant_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.merchant_uid)
  return _internal_merchant_uid();
}
inline void UnitSchedulePaymentResponse::set_merchant_uid(const std::string& value) {
  _internal_set_merchant_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.merchant_uid)
}
inline std::string* UnitSchedulePaymentResponse::mutable_merchant_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.merchant_uid)
  return _internal_mutable_merchant_uid();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_merchant_uid(std::string&& value) {
  
  merchant_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.merchant_uid)
}
inline void UnitSchedulePaymentResponse::set_merchant_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.merchant_uid)
}
inline void UnitSchedulePaymentResponse::set_merchant_uid(const char* value,
    size_t size) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.merchant_uid)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.merchant_uid)
}

// string imp_uid = 3;
inline void UnitSchedulePaymentResponse::clear_imp_uid() {
  imp_uid_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::imp_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.imp_uid)
  return _internal_imp_uid();
}
inline void UnitSchedulePaymentResponse::set_imp_uid(const std::string& value) {
  _internal_set_imp_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.imp_uid)
}
inline std::string* UnitSchedulePaymentResponse::mutable_imp_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.imp_uid)
  return _internal_mutable_imp_uid();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_imp_uid() const {
  return imp_uid_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_imp_uid(const std::string& value) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_imp_uid(std::string&& value) {
  
  imp_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.imp_uid)
}
inline void UnitSchedulePaymentResponse::set_imp_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.imp_uid)
}
inline void UnitSchedulePaymentResponse::set_imp_uid(const char* value,
    size_t size) {
  
  imp_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.imp_uid)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_imp_uid() {
  
  return imp_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_imp_uid() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.imp_uid)
  return imp_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_imp_uid(std::string* imp_uid) {
  if (imp_uid != nullptr) {
    
  } else {
    
  }
  imp_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imp_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.imp_uid)
}

// int32 schedule_at = 4;
inline void UnitSchedulePaymentResponse::clear_schedule_at() {
  schedule_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitSchedulePaymentResponse::_internal_schedule_at() const {
  return schedule_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitSchedulePaymentResponse::schedule_at() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.schedule_at)
  return _internal_schedule_at();
}
inline void UnitSchedulePaymentResponse::_internal_set_schedule_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  schedule_at_ = value;
}
inline void UnitSchedulePaymentResponse::set_schedule_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_schedule_at(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.schedule_at)
}

// int32 executed_at = 5;
inline void UnitSchedulePaymentResponse::clear_executed_at() {
  executed_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitSchedulePaymentResponse::_internal_executed_at() const {
  return executed_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitSchedulePaymentResponse::executed_at() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.executed_at)
  return _internal_executed_at();
}
inline void UnitSchedulePaymentResponse::_internal_set_executed_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  executed_at_ = value;
}
inline void UnitSchedulePaymentResponse::set_executed_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_executed_at(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.executed_at)
}

// int32 revoked_at = 6;
inline void UnitSchedulePaymentResponse::clear_revoked_at() {
  revoked_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitSchedulePaymentResponse::_internal_revoked_at() const {
  return revoked_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitSchedulePaymentResponse::revoked_at() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.revoked_at)
  return _internal_revoked_at();
}
inline void UnitSchedulePaymentResponse::_internal_set_revoked_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  revoked_at_ = value;
}
inline void UnitSchedulePaymentResponse::set_revoked_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_revoked_at(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.revoked_at)
}

// int32 amount = 7;
inline void UnitSchedulePaymentResponse::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitSchedulePaymentResponse::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitSchedulePaymentResponse::amount() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.amount)
  return _internal_amount();
}
inline void UnitSchedulePaymentResponse::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void UnitSchedulePaymentResponse::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.amount)
}

// string name = 8;
inline void UnitSchedulePaymentResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::name() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.name)
  return _internal_name();
}
inline void UnitSchedulePaymentResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.name)
}
inline std::string* UnitSchedulePaymentResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.name)
  return _internal_mutable_name();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_name() const {
  return name_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.name)
}
inline void UnitSchedulePaymentResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.name)
}
inline void UnitSchedulePaymentResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.name)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_name() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.name)
}

// string buyer_name = 9;
inline void UnitSchedulePaymentResponse::clear_buyer_name() {
  buyer_name_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::buyer_name() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.buyer_name)
  return _internal_buyer_name();
}
inline void UnitSchedulePaymentResponse::set_buyer_name(const std::string& value) {
  _internal_set_buyer_name(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.buyer_name)
}
inline std::string* UnitSchedulePaymentResponse::mutable_buyer_name() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.buyer_name)
  return _internal_mutable_buyer_name();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_buyer_name() const {
  return buyer_name_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_buyer_name(const std::string& value) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_buyer_name(std::string&& value) {
  
  buyer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.buyer_name)
}
inline void UnitSchedulePaymentResponse::set_buyer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.buyer_name)
}
inline void UnitSchedulePaymentResponse::set_buyer_name(const char* value,
    size_t size) {
  
  buyer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.buyer_name)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_buyer_name() {
  
  return buyer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_buyer_name() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.buyer_name)
  return buyer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_buyer_name(std::string* buyer_name) {
  if (buyer_name != nullptr) {
    
  } else {
    
  }
  buyer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.buyer_name)
}

// string buyer_email = 10;
inline void UnitSchedulePaymentResponse::clear_buyer_email() {
  buyer_email_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::buyer_email() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.buyer_email)
  return _internal_buyer_email();
}
inline void UnitSchedulePaymentResponse::set_buyer_email(const std::string& value) {
  _internal_set_buyer_email(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.buyer_email)
}
inline std::string* UnitSchedulePaymentResponse::mutable_buyer_email() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.buyer_email)
  return _internal_mutable_buyer_email();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_buyer_email() const {
  return buyer_email_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_buyer_email(const std::string& value) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_buyer_email(std::string&& value) {
  
  buyer_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.buyer_email)
}
inline void UnitSchedulePaymentResponse::set_buyer_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.buyer_email)
}
inline void UnitSchedulePaymentResponse::set_buyer_email(const char* value,
    size_t size) {
  
  buyer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.buyer_email)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_buyer_email() {
  
  return buyer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_buyer_email() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.buyer_email)
  return buyer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_buyer_email(std::string* buyer_email) {
  if (buyer_email != nullptr) {
    
  } else {
    
  }
  buyer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.buyer_email)
}

// string buyer_tel = 11;
inline void UnitSchedulePaymentResponse::clear_buyer_tel() {
  buyer_tel_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::buyer_tel() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.buyer_tel)
  return _internal_buyer_tel();
}
inline void UnitSchedulePaymentResponse::set_buyer_tel(const std::string& value) {
  _internal_set_buyer_tel(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.buyer_tel)
}
inline std::string* UnitSchedulePaymentResponse::mutable_buyer_tel() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.buyer_tel)
  return _internal_mutable_buyer_tel();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_buyer_tel() const {
  return buyer_tel_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_buyer_tel(const std::string& value) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_buyer_tel(std::string&& value) {
  
  buyer_tel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.buyer_tel)
}
inline void UnitSchedulePaymentResponse::set_buyer_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.buyer_tel)
}
inline void UnitSchedulePaymentResponse::set_buyer_tel(const char* value,
    size_t size) {
  
  buyer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.buyer_tel)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_buyer_tel() {
  
  return buyer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_buyer_tel() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.buyer_tel)
  return buyer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_buyer_tel(std::string* buyer_tel) {
  if (buyer_tel != nullptr) {
    
  } else {
    
  }
  buyer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.buyer_tel)
}

// string buyer_addr = 12;
inline void UnitSchedulePaymentResponse::clear_buyer_addr() {
  buyer_addr_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::buyer_addr() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.buyer_addr)
  return _internal_buyer_addr();
}
inline void UnitSchedulePaymentResponse::set_buyer_addr(const std::string& value) {
  _internal_set_buyer_addr(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.buyer_addr)
}
inline std::string* UnitSchedulePaymentResponse::mutable_buyer_addr() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.buyer_addr)
  return _internal_mutable_buyer_addr();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_buyer_addr() const {
  return buyer_addr_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_buyer_addr(const std::string& value) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_buyer_addr(std::string&& value) {
  
  buyer_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.buyer_addr)
}
inline void UnitSchedulePaymentResponse::set_buyer_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.buyer_addr)
}
inline void UnitSchedulePaymentResponse::set_buyer_addr(const char* value,
    size_t size) {
  
  buyer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.buyer_addr)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_buyer_addr() {
  
  return buyer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_buyer_addr() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.buyer_addr)
  return buyer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_buyer_addr(std::string* buyer_addr) {
  if (buyer_addr != nullptr) {
    
  } else {
    
  }
  buyer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.buyer_addr)
}

// string buyer_postcode = 13;
inline void UnitSchedulePaymentResponse::clear_buyer_postcode() {
  buyer_postcode_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::buyer_postcode() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.buyer_postcode)
  return _internal_buyer_postcode();
}
inline void UnitSchedulePaymentResponse::set_buyer_postcode(const std::string& value) {
  _internal_set_buyer_postcode(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.buyer_postcode)
}
inline std::string* UnitSchedulePaymentResponse::mutable_buyer_postcode() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.buyer_postcode)
  return _internal_mutable_buyer_postcode();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_buyer_postcode() const {
  return buyer_postcode_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_buyer_postcode(const std::string& value) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_buyer_postcode(std::string&& value) {
  
  buyer_postcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.buyer_postcode)
}
inline void UnitSchedulePaymentResponse::set_buyer_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.buyer_postcode)
}
inline void UnitSchedulePaymentResponse::set_buyer_postcode(const char* value,
    size_t size) {
  
  buyer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.buyer_postcode)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_buyer_postcode() {
  
  return buyer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_buyer_postcode() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.buyer_postcode)
  return buyer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_buyer_postcode(std::string* buyer_postcode) {
  if (buyer_postcode != nullptr) {
    
  } else {
    
  }
  buyer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer_postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.buyer_postcode)
}

// string custom_data = 14;
inline void UnitSchedulePaymentResponse::clear_custom_data() {
  custom_data_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::custom_data() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.custom_data)
  return _internal_custom_data();
}
inline void UnitSchedulePaymentResponse::set_custom_data(const std::string& value) {
  _internal_set_custom_data(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.custom_data)
}
inline std::string* UnitSchedulePaymentResponse::mutable_custom_data() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.custom_data)
  return _internal_mutable_custom_data();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_custom_data() const {
  return custom_data_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_custom_data(const std::string& value) {
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_custom_data(std::string&& value) {
  
  custom_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.custom_data)
}
inline void UnitSchedulePaymentResponse::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.custom_data)
}
inline void UnitSchedulePaymentResponse::set_custom_data(const char* value,
    size_t size) {
  
  custom_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.custom_data)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_custom_data() {
  
  return custom_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_custom_data() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.custom_data)
  return custom_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_custom_data(std::string* custom_data) {
  if (custom_data != nullptr) {
    
  } else {
    
  }
  custom_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.custom_data)
}

// string schedule_status = 15;
inline void UnitSchedulePaymentResponse::clear_schedule_status() {
  schedule_status_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::schedule_status() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.schedule_status)
  return _internal_schedule_status();
}
inline void UnitSchedulePaymentResponse::set_schedule_status(const std::string& value) {
  _internal_set_schedule_status(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.schedule_status)
}
inline std::string* UnitSchedulePaymentResponse::mutable_schedule_status() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.schedule_status)
  return _internal_mutable_schedule_status();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_schedule_status() const {
  return schedule_status_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_schedule_status(const std::string& value) {
  
  schedule_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_schedule_status(std::string&& value) {
  
  schedule_status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.schedule_status)
}
inline void UnitSchedulePaymentResponse::set_schedule_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schedule_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.schedule_status)
}
inline void UnitSchedulePaymentResponse::set_schedule_status(const char* value,
    size_t size) {
  
  schedule_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.schedule_status)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_schedule_status() {
  
  return schedule_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_schedule_status() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.schedule_status)
  return schedule_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_schedule_status(std::string* schedule_status) {
  if (schedule_status != nullptr) {
    
  } else {
    
  }
  schedule_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schedule_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.schedule_status)
}

// string payment_status = 16;
inline void UnitSchedulePaymentResponse::clear_payment_status() {
  payment_status_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::payment_status() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.payment_status)
  return _internal_payment_status();
}
inline void UnitSchedulePaymentResponse::set_payment_status(const std::string& value) {
  _internal_set_payment_status(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.payment_status)
}
inline std::string* UnitSchedulePaymentResponse::mutable_payment_status() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.payment_status)
  return _internal_mutable_payment_status();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_payment_status() const {
  return payment_status_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_payment_status(const std::string& value) {
  
  payment_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_payment_status(std::string&& value) {
  
  payment_status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.payment_status)
}
inline void UnitSchedulePaymentResponse::set_payment_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.payment_status)
}
inline void UnitSchedulePaymentResponse::set_payment_status(const char* value,
    size_t size) {
  
  payment_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.payment_status)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_payment_status() {
  
  return payment_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_payment_status() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.payment_status)
  return payment_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_payment_status(std::string* payment_status) {
  if (payment_status != nullptr) {
    
  } else {
    
  }
  payment_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.payment_status)
}

// string fail_reason = 17;
inline void UnitSchedulePaymentResponse::clear_fail_reason() {
  fail_reason_.ClearToEmpty();
}
inline const std::string& UnitSchedulePaymentResponse::fail_reason() const {
  // @@protoc_insertion_point(field_get:subscribe.UnitSchedulePaymentResponse.fail_reason)
  return _internal_fail_reason();
}
inline void UnitSchedulePaymentResponse::set_fail_reason(const std::string& value) {
  _internal_set_fail_reason(value);
  // @@protoc_insertion_point(field_set:subscribe.UnitSchedulePaymentResponse.fail_reason)
}
inline std::string* UnitSchedulePaymentResponse::mutable_fail_reason() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnitSchedulePaymentResponse.fail_reason)
  return _internal_mutable_fail_reason();
}
inline const std::string& UnitSchedulePaymentResponse::_internal_fail_reason() const {
  return fail_reason_.Get();
}
inline void UnitSchedulePaymentResponse::_internal_set_fail_reason(const std::string& value) {
  
  fail_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnitSchedulePaymentResponse::set_fail_reason(std::string&& value) {
  
  fail_reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnitSchedulePaymentResponse.fail_reason)
}
inline void UnitSchedulePaymentResponse::set_fail_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fail_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnitSchedulePaymentResponse.fail_reason)
}
inline void UnitSchedulePaymentResponse::set_fail_reason(const char* value,
    size_t size) {
  
  fail_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnitSchedulePaymentResponse.fail_reason)
}
inline std::string* UnitSchedulePaymentResponse::_internal_mutable_fail_reason() {
  
  return fail_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnitSchedulePaymentResponse::release_fail_reason() {
  // @@protoc_insertion_point(field_release:subscribe.UnitSchedulePaymentResponse.fail_reason)
  return fail_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnitSchedulePaymentResponse::set_allocated_fail_reason(std::string* fail_reason) {
  if (fail_reason != nullptr) {
    
  } else {
    
  }
  fail_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fail_reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnitSchedulePaymentResponse.fail_reason)
}

// -------------------------------------------------------------------

// SchedulePayemntRequest

// string customer_uid = 1;
inline void SchedulePayemntRequest::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& SchedulePayemntRequest::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePayemntRequest.customer_uid)
  return _internal_customer_uid();
}
inline void SchedulePayemntRequest::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.SchedulePayemntRequest.customer_uid)
}
inline std::string* SchedulePayemntRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.SchedulePayemntRequest.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& SchedulePayemntRequest::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void SchedulePayemntRequest::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedulePayemntRequest::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.SchedulePayemntRequest.customer_uid)
}
inline void SchedulePayemntRequest::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.SchedulePayemntRequest.customer_uid)
}
inline void SchedulePayemntRequest::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.SchedulePayemntRequest.customer_uid)
}
inline std::string* SchedulePayemntRequest::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedulePayemntRequest::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe.SchedulePayemntRequest.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedulePayemntRequest::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.SchedulePayemntRequest.customer_uid)
}

// int32 checking_amount = 2;
inline void SchedulePayemntRequest::clear_checking_amount() {
  checking_amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchedulePayemntRequest::_internal_checking_amount() const {
  return checking_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchedulePayemntRequest::checking_amount() const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePayemntRequest.checking_amount)
  return _internal_checking_amount();
}
inline void SchedulePayemntRequest::_internal_set_checking_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  checking_amount_ = value;
}
inline void SchedulePayemntRequest::set_checking_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_checking_amount(value);
  // @@protoc_insertion_point(field_set:subscribe.SchedulePayemntRequest.checking_amount)
}

// string card_number = 3;
inline void SchedulePayemntRequest::clear_card_number() {
  card_number_.ClearToEmpty();
}
inline const std::string& SchedulePayemntRequest::card_number() const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePayemntRequest.card_number)
  return _internal_card_number();
}
inline void SchedulePayemntRequest::set_card_number(const std::string& value) {
  _internal_set_card_number(value);
  // @@protoc_insertion_point(field_set:subscribe.SchedulePayemntRequest.card_number)
}
inline std::string* SchedulePayemntRequest::mutable_card_number() {
  // @@protoc_insertion_point(field_mutable:subscribe.SchedulePayemntRequest.card_number)
  return _internal_mutable_card_number();
}
inline const std::string& SchedulePayemntRequest::_internal_card_number() const {
  return card_number_.Get();
}
inline void SchedulePayemntRequest::_internal_set_card_number(const std::string& value) {
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedulePayemntRequest::set_card_number(std::string&& value) {
  
  card_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.SchedulePayemntRequest.card_number)
}
inline void SchedulePayemntRequest::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.SchedulePayemntRequest.card_number)
}
inline void SchedulePayemntRequest::set_card_number(const char* value,
    size_t size) {
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.SchedulePayemntRequest.card_number)
}
inline std::string* SchedulePayemntRequest::_internal_mutable_card_number() {
  
  return card_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedulePayemntRequest::release_card_number() {
  // @@protoc_insertion_point(field_release:subscribe.SchedulePayemntRequest.card_number)
  return card_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedulePayemntRequest::set_allocated_card_number(std::string* card_number) {
  if (card_number != nullptr) {
    
  } else {
    
  }
  card_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.SchedulePayemntRequest.card_number)
}

// string expiry = 4;
inline void SchedulePayemntRequest::clear_expiry() {
  expiry_.ClearToEmpty();
}
inline const std::string& SchedulePayemntRequest::expiry() const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePayemntRequest.expiry)
  return _internal_expiry();
}
inline void SchedulePayemntRequest::set_expiry(const std::string& value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:subscribe.SchedulePayemntRequest.expiry)
}
inline std::string* SchedulePayemntRequest::mutable_expiry() {
  // @@protoc_insertion_point(field_mutable:subscribe.SchedulePayemntRequest.expiry)
  return _internal_mutable_expiry();
}
inline const std::string& SchedulePayemntRequest::_internal_expiry() const {
  return expiry_.Get();
}
inline void SchedulePayemntRequest::_internal_set_expiry(const std::string& value) {
  
  expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedulePayemntRequest::set_expiry(std::string&& value) {
  
  expiry_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.SchedulePayemntRequest.expiry)
}
inline void SchedulePayemntRequest::set_expiry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.SchedulePayemntRequest.expiry)
}
inline void SchedulePayemntRequest::set_expiry(const char* value,
    size_t size) {
  
  expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.SchedulePayemntRequest.expiry)
}
inline std::string* SchedulePayemntRequest::_internal_mutable_expiry() {
  
  return expiry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedulePayemntRequest::release_expiry() {
  // @@protoc_insertion_point(field_release:subscribe.SchedulePayemntRequest.expiry)
  return expiry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedulePayemntRequest::set_allocated_expiry(std::string* expiry) {
  if (expiry != nullptr) {
    
  } else {
    
  }
  expiry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiry,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.SchedulePayemntRequest.expiry)
}

// string birth = 5;
inline void SchedulePayemntRequest::clear_birth() {
  birth_.ClearToEmpty();
}
inline const std::string& SchedulePayemntRequest::birth() const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePayemntRequest.birth)
  return _internal_birth();
}
inline void SchedulePayemntRequest::set_birth(const std::string& value) {
  _internal_set_birth(value);
  // @@protoc_insertion_point(field_set:subscribe.SchedulePayemntRequest.birth)
}
inline std::string* SchedulePayemntRequest::mutable_birth() {
  // @@protoc_insertion_point(field_mutable:subscribe.SchedulePayemntRequest.birth)
  return _internal_mutable_birth();
}
inline const std::string& SchedulePayemntRequest::_internal_birth() const {
  return birth_.Get();
}
inline void SchedulePayemntRequest::_internal_set_birth(const std::string& value) {
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedulePayemntRequest::set_birth(std::string&& value) {
  
  birth_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.SchedulePayemntRequest.birth)
}
inline void SchedulePayemntRequest::set_birth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.SchedulePayemntRequest.birth)
}
inline void SchedulePayemntRequest::set_birth(const char* value,
    size_t size) {
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.SchedulePayemntRequest.birth)
}
inline std::string* SchedulePayemntRequest::_internal_mutable_birth() {
  
  return birth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedulePayemntRequest::release_birth() {
  // @@protoc_insertion_point(field_release:subscribe.SchedulePayemntRequest.birth)
  return birth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedulePayemntRequest::set_allocated_birth(std::string* birth) {
  if (birth != nullptr) {
    
  } else {
    
  }
  birth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.SchedulePayemntRequest.birth)
}

// string pwd_2digit = 6;
inline void SchedulePayemntRequest::clear_pwd_2digit() {
  pwd_2digit_.ClearToEmpty();
}
inline const std::string& SchedulePayemntRequest::pwd_2digit() const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePayemntRequest.pwd_2digit)
  return _internal_pwd_2digit();
}
inline void SchedulePayemntRequest::set_pwd_2digit(const std::string& value) {
  _internal_set_pwd_2digit(value);
  // @@protoc_insertion_point(field_set:subscribe.SchedulePayemntRequest.pwd_2digit)
}
inline std::string* SchedulePayemntRequest::mutable_pwd_2digit() {
  // @@protoc_insertion_point(field_mutable:subscribe.SchedulePayemntRequest.pwd_2digit)
  return _internal_mutable_pwd_2digit();
}
inline const std::string& SchedulePayemntRequest::_internal_pwd_2digit() const {
  return pwd_2digit_.Get();
}
inline void SchedulePayemntRequest::_internal_set_pwd_2digit(const std::string& value) {
  
  pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedulePayemntRequest::set_pwd_2digit(std::string&& value) {
  
  pwd_2digit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.SchedulePayemntRequest.pwd_2digit)
}
inline void SchedulePayemntRequest::set_pwd_2digit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.SchedulePayemntRequest.pwd_2digit)
}
inline void SchedulePayemntRequest::set_pwd_2digit(const char* value,
    size_t size) {
  
  pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.SchedulePayemntRequest.pwd_2digit)
}
inline std::string* SchedulePayemntRequest::_internal_mutable_pwd_2digit() {
  
  return pwd_2digit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedulePayemntRequest::release_pwd_2digit() {
  // @@protoc_insertion_point(field_release:subscribe.SchedulePayemntRequest.pwd_2digit)
  return pwd_2digit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedulePayemntRequest::set_allocated_pwd_2digit(std::string* pwd_2digit) {
  if (pwd_2digit != nullptr) {
    
  } else {
    
  }
  pwd_2digit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd_2digit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.SchedulePayemntRequest.pwd_2digit)
}

// string pg = 7;
inline void SchedulePayemntRequest::clear_pg() {
  pg_.ClearToEmpty();
}
inline const std::string& SchedulePayemntRequest::pg() const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePayemntRequest.pg)
  return _internal_pg();
}
inline void SchedulePayemntRequest::set_pg(const std::string& value) {
  _internal_set_pg(value);
  // @@protoc_insertion_point(field_set:subscribe.SchedulePayemntRequest.pg)
}
inline std::string* SchedulePayemntRequest::mutable_pg() {
  // @@protoc_insertion_point(field_mutable:subscribe.SchedulePayemntRequest.pg)
  return _internal_mutable_pg();
}
inline const std::string& SchedulePayemntRequest::_internal_pg() const {
  return pg_.Get();
}
inline void SchedulePayemntRequest::_internal_set_pg(const std::string& value) {
  
  pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedulePayemntRequest::set_pg(std::string&& value) {
  
  pg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.SchedulePayemntRequest.pg)
}
inline void SchedulePayemntRequest::set_pg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.SchedulePayemntRequest.pg)
}
inline void SchedulePayemntRequest::set_pg(const char* value,
    size_t size) {
  
  pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.SchedulePayemntRequest.pg)
}
inline std::string* SchedulePayemntRequest::_internal_mutable_pg() {
  
  return pg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedulePayemntRequest::release_pg() {
  // @@protoc_insertion_point(field_release:subscribe.SchedulePayemntRequest.pg)
  return pg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedulePayemntRequest::set_allocated_pg(std::string* pg) {
  if (pg != nullptr) {
    
  } else {
    
  }
  pg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.SchedulePayemntRequest.pg)
}

// repeated .subscribe.PaymentScheduleParam schedules = 8;
inline int SchedulePayemntRequest::_internal_schedules_size() const {
  return schedules_.size();
}
inline int SchedulePayemntRequest::schedules_size() const {
  return _internal_schedules_size();
}
inline void SchedulePayemntRequest::clear_schedules() {
  schedules_.Clear();
}
inline ::subscribe::PaymentScheduleParam* SchedulePayemntRequest::mutable_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SchedulePayemntRequest.schedules)
  return schedules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::PaymentScheduleParam >*
SchedulePayemntRequest::mutable_schedules() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SchedulePayemntRequest.schedules)
  return &schedules_;
}
inline const ::subscribe::PaymentScheduleParam& SchedulePayemntRequest::_internal_schedules(int index) const {
  return schedules_.Get(index);
}
inline const ::subscribe::PaymentScheduleParam& SchedulePayemntRequest::schedules(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePayemntRequest.schedules)
  return _internal_schedules(index);
}
inline ::subscribe::PaymentScheduleParam* SchedulePayemntRequest::_internal_add_schedules() {
  return schedules_.Add();
}
inline ::subscribe::PaymentScheduleParam* SchedulePayemntRequest::add_schedules() {
  // @@protoc_insertion_point(field_add:subscribe.SchedulePayemntRequest.schedules)
  return _internal_add_schedules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::PaymentScheduleParam >&
SchedulePayemntRequest::schedules() const {
  // @@protoc_insertion_point(field_list:subscribe.SchedulePayemntRequest.schedules)
  return schedules_;
}

// -------------------------------------------------------------------

// SchedulePaymentResponse

// int32 code = 1;
inline void SchedulePaymentResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchedulePaymentResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchedulePaymentResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePaymentResponse.code)
  return _internal_code();
}
inline void SchedulePaymentResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SchedulePaymentResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe.SchedulePaymentResponse.code)
}

// string message = 2;
inline void SchedulePaymentResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SchedulePaymentResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePaymentResponse.message)
  return _internal_message();
}
inline void SchedulePaymentResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe.SchedulePaymentResponse.message)
}
inline std::string* SchedulePaymentResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe.SchedulePaymentResponse.message)
  return _internal_mutable_message();
}
inline const std::string& SchedulePaymentResponse::_internal_message() const {
  return message_.Get();
}
inline void SchedulePaymentResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedulePaymentResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.SchedulePaymentResponse.message)
}
inline void SchedulePaymentResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.SchedulePaymentResponse.message)
}
inline void SchedulePaymentResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.SchedulePaymentResponse.message)
}
inline std::string* SchedulePaymentResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedulePaymentResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe.SchedulePaymentResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedulePaymentResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.SchedulePaymentResponse.message)
}

// repeated .subscribe.UnitSchedulePaymentResponse response = 3;
inline int SchedulePaymentResponse::_internal_response_size() const {
  return response_.size();
}
inline int SchedulePaymentResponse::response_size() const {
  return _internal_response_size();
}
inline void SchedulePaymentResponse::clear_response() {
  response_.Clear();
}
inline ::subscribe::UnitSchedulePaymentResponse* SchedulePaymentResponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.SchedulePaymentResponse.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >*
SchedulePaymentResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.SchedulePaymentResponse.response)
  return &response_;
}
inline const ::subscribe::UnitSchedulePaymentResponse& SchedulePaymentResponse::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::subscribe::UnitSchedulePaymentResponse& SchedulePaymentResponse::response(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.SchedulePaymentResponse.response)
  return _internal_response(index);
}
inline ::subscribe::UnitSchedulePaymentResponse* SchedulePaymentResponse::_internal_add_response() {
  return response_.Add();
}
inline ::subscribe::UnitSchedulePaymentResponse* SchedulePaymentResponse::add_response() {
  // @@protoc_insertion_point(field_add:subscribe.SchedulePaymentResponse.response)
  return _internal_add_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >&
SchedulePaymentResponse::response() const {
  // @@protoc_insertion_point(field_list:subscribe.SchedulePaymentResponse.response)
  return response_;
}

// -------------------------------------------------------------------

// UnschedulePaymentRequest

// string customer_uid = 1;
inline void UnschedulePaymentRequest::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& UnschedulePaymentRequest::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.UnschedulePaymentRequest.customer_uid)
  return _internal_customer_uid();
}
inline void UnschedulePaymentRequest::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.UnschedulePaymentRequest.customer_uid)
}
inline std::string* UnschedulePaymentRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnschedulePaymentRequest.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& UnschedulePaymentRequest::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void UnschedulePaymentRequest::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnschedulePaymentRequest::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnschedulePaymentRequest.customer_uid)
}
inline void UnschedulePaymentRequest::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnschedulePaymentRequest.customer_uid)
}
inline void UnschedulePaymentRequest::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnschedulePaymentRequest.customer_uid)
}
inline std::string* UnschedulePaymentRequest::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnschedulePaymentRequest::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe.UnschedulePaymentRequest.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnschedulePaymentRequest::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnschedulePaymentRequest.customer_uid)
}

// repeated string merchant_uid = 2;
inline int UnschedulePaymentRequest::_internal_merchant_uid_size() const {
  return merchant_uid_.size();
}
inline int UnschedulePaymentRequest::merchant_uid_size() const {
  return _internal_merchant_uid_size();
}
inline void UnschedulePaymentRequest::clear_merchant_uid() {
  merchant_uid_.Clear();
}
inline std::string* UnschedulePaymentRequest::add_merchant_uid() {
  // @@protoc_insertion_point(field_add_mutable:subscribe.UnschedulePaymentRequest.merchant_uid)
  return _internal_add_merchant_uid();
}
inline const std::string& UnschedulePaymentRequest::_internal_merchant_uid(int index) const {
  return merchant_uid_.Get(index);
}
inline const std::string& UnschedulePaymentRequest::merchant_uid(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.UnschedulePaymentRequest.merchant_uid)
  return _internal_merchant_uid(index);
}
inline std::string* UnschedulePaymentRequest::mutable_merchant_uid(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.UnschedulePaymentRequest.merchant_uid)
  return merchant_uid_.Mutable(index);
}
inline void UnschedulePaymentRequest::set_merchant_uid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:subscribe.UnschedulePaymentRequest.merchant_uid)
  merchant_uid_.Mutable(index)->assign(value);
}
inline void UnschedulePaymentRequest::set_merchant_uid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:subscribe.UnschedulePaymentRequest.merchant_uid)
  merchant_uid_.Mutable(index)->assign(std::move(value));
}
inline void UnschedulePaymentRequest::set_merchant_uid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  merchant_uid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:subscribe.UnschedulePaymentRequest.merchant_uid)
}
inline void UnschedulePaymentRequest::set_merchant_uid(int index, const char* value, size_t size) {
  merchant_uid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnschedulePaymentRequest.merchant_uid)
}
inline std::string* UnschedulePaymentRequest::_internal_add_merchant_uid() {
  return merchant_uid_.Add();
}
inline void UnschedulePaymentRequest::add_merchant_uid(const std::string& value) {
  merchant_uid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:subscribe.UnschedulePaymentRequest.merchant_uid)
}
inline void UnschedulePaymentRequest::add_merchant_uid(std::string&& value) {
  merchant_uid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:subscribe.UnschedulePaymentRequest.merchant_uid)
}
inline void UnschedulePaymentRequest::add_merchant_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  merchant_uid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:subscribe.UnschedulePaymentRequest.merchant_uid)
}
inline void UnschedulePaymentRequest::add_merchant_uid(const char* value, size_t size) {
  merchant_uid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:subscribe.UnschedulePaymentRequest.merchant_uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UnschedulePaymentRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_list:subscribe.UnschedulePaymentRequest.merchant_uid)
  return merchant_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UnschedulePaymentRequest::mutable_merchant_uid() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.UnschedulePaymentRequest.merchant_uid)
  return &merchant_uid_;
}

// -------------------------------------------------------------------

// UnschedulePaymentResponse

// int32 code = 1;
inline void UnschedulePaymentResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnschedulePaymentResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnschedulePaymentResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe.UnschedulePaymentResponse.code)
  return _internal_code();
}
inline void UnschedulePaymentResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void UnschedulePaymentResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe.UnschedulePaymentResponse.code)
}

// string message = 2;
inline void UnschedulePaymentResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& UnschedulePaymentResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe.UnschedulePaymentResponse.message)
  return _internal_message();
}
inline void UnschedulePaymentResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe.UnschedulePaymentResponse.message)
}
inline std::string* UnschedulePaymentResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe.UnschedulePaymentResponse.message)
  return _internal_mutable_message();
}
inline const std::string& UnschedulePaymentResponse::_internal_message() const {
  return message_.Get();
}
inline void UnschedulePaymentResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnschedulePaymentResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.UnschedulePaymentResponse.message)
}
inline void UnschedulePaymentResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.UnschedulePaymentResponse.message)
}
inline void UnschedulePaymentResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.UnschedulePaymentResponse.message)
}
inline std::string* UnschedulePaymentResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnschedulePaymentResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe.UnschedulePaymentResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnschedulePaymentResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.UnschedulePaymentResponse.message)
}

// repeated .subscribe.UnitSchedulePaymentResponse response = 3;
inline int UnschedulePaymentResponse::_internal_response_size() const {
  return response_.size();
}
inline int UnschedulePaymentResponse::response_size() const {
  return _internal_response_size();
}
inline void UnschedulePaymentResponse::clear_response() {
  response_.Clear();
}
inline ::subscribe::UnitSchedulePaymentResponse* UnschedulePaymentResponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.UnschedulePaymentResponse.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >*
UnschedulePaymentResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.UnschedulePaymentResponse.response)
  return &response_;
}
inline const ::subscribe::UnitSchedulePaymentResponse& UnschedulePaymentResponse::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::subscribe::UnitSchedulePaymentResponse& UnschedulePaymentResponse::response(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.UnschedulePaymentResponse.response)
  return _internal_response(index);
}
inline ::subscribe::UnitSchedulePaymentResponse* UnschedulePaymentResponse::_internal_add_response() {
  return response_.Add();
}
inline ::subscribe::UnitSchedulePaymentResponse* UnschedulePaymentResponse::add_response() {
  // @@protoc_insertion_point(field_add:subscribe.UnschedulePaymentResponse.response)
  return _internal_add_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >&
UnschedulePaymentResponse::response() const {
  // @@protoc_insertion_point(field_list:subscribe.UnschedulePaymentResponse.response)
  return response_;
}

// -------------------------------------------------------------------

// GetPaymentScheduleRequest

// string merchant_uid = 1;
inline void GetPaymentScheduleRequest::clear_merchant_uid() {
  merchant_uid_.ClearToEmpty();
}
inline const std::string& GetPaymentScheduleRequest::merchant_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleRequest.merchant_uid)
  return _internal_merchant_uid();
}
inline void GetPaymentScheduleRequest::set_merchant_uid(const std::string& value) {
  _internal_set_merchant_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.GetPaymentScheduleRequest.merchant_uid)
}
inline std::string* GetPaymentScheduleRequest::mutable_merchant_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.GetPaymentScheduleRequest.merchant_uid)
  return _internal_mutable_merchant_uid();
}
inline const std::string& GetPaymentScheduleRequest::_internal_merchant_uid() const {
  return merchant_uid_.Get();
}
inline void GetPaymentScheduleRequest::_internal_set_merchant_uid(const std::string& value) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPaymentScheduleRequest::set_merchant_uid(std::string&& value) {
  
  merchant_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.GetPaymentScheduleRequest.merchant_uid)
}
inline void GetPaymentScheduleRequest::set_merchant_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.GetPaymentScheduleRequest.merchant_uid)
}
inline void GetPaymentScheduleRequest::set_merchant_uid(const char* value,
    size_t size) {
  
  merchant_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.GetPaymentScheduleRequest.merchant_uid)
}
inline std::string* GetPaymentScheduleRequest::_internal_mutable_merchant_uid() {
  
  return merchant_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPaymentScheduleRequest::release_merchant_uid() {
  // @@protoc_insertion_point(field_release:subscribe.GetPaymentScheduleRequest.merchant_uid)
  return merchant_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPaymentScheduleRequest::set_allocated_merchant_uid(std::string* merchant_uid) {
  if (merchant_uid != nullptr) {
    
  } else {
    
  }
  merchant_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.GetPaymentScheduleRequest.merchant_uid)
}

// -------------------------------------------------------------------

// GetPaymentScheduleResponse

// int32 code = 1;
inline void GetPaymentScheduleResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaymentScheduleResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaymentScheduleResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleResponse.code)
  return _internal_code();
}
inline void GetPaymentScheduleResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetPaymentScheduleResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe.GetPaymentScheduleResponse.code)
}

// string message = 2;
inline void GetPaymentScheduleResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GetPaymentScheduleResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleResponse.message)
  return _internal_message();
}
inline void GetPaymentScheduleResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe.GetPaymentScheduleResponse.message)
}
inline std::string* GetPaymentScheduleResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe.GetPaymentScheduleResponse.message)
  return _internal_mutable_message();
}
inline const std::string& GetPaymentScheduleResponse::_internal_message() const {
  return message_.Get();
}
inline void GetPaymentScheduleResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPaymentScheduleResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.GetPaymentScheduleResponse.message)
}
inline void GetPaymentScheduleResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.GetPaymentScheduleResponse.message)
}
inline void GetPaymentScheduleResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.GetPaymentScheduleResponse.message)
}
inline std::string* GetPaymentScheduleResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPaymentScheduleResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe.GetPaymentScheduleResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPaymentScheduleResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.GetPaymentScheduleResponse.message)
}

// .subscribe.UnitSchedulePaymentResponse response = 3;
inline bool GetPaymentScheduleResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool GetPaymentScheduleResponse::has_response() const {
  return _internal_has_response();
}
inline void GetPaymentScheduleResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::subscribe::UnitSchedulePaymentResponse& GetPaymentScheduleResponse::_internal_response() const {
  const ::subscribe::UnitSchedulePaymentResponse* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscribe::UnitSchedulePaymentResponse&>(
      ::subscribe::_UnitSchedulePaymentResponse_default_instance_);
}
inline const ::subscribe::UnitSchedulePaymentResponse& GetPaymentScheduleResponse::response() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleResponse.response)
  return _internal_response();
}
inline void GetPaymentScheduleResponse::unsafe_arena_set_allocated_response(
    ::subscribe::UnitSchedulePaymentResponse* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscribe.GetPaymentScheduleResponse.response)
}
inline ::subscribe::UnitSchedulePaymentResponse* GetPaymentScheduleResponse::release_response() {
  
  ::subscribe::UnitSchedulePaymentResponse* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::subscribe::UnitSchedulePaymentResponse* GetPaymentScheduleResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:subscribe.GetPaymentScheduleResponse.response)
  
  ::subscribe::UnitSchedulePaymentResponse* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::subscribe::UnitSchedulePaymentResponse* GetPaymentScheduleResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscribe::UnitSchedulePaymentResponse>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::subscribe::UnitSchedulePaymentResponse* GetPaymentScheduleResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:subscribe.GetPaymentScheduleResponse.response)
  return _internal_mutable_response();
}
inline void GetPaymentScheduleResponse::set_allocated_response(::subscribe::UnitSchedulePaymentResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:subscribe.GetPaymentScheduleResponse.response)
}

// -------------------------------------------------------------------

// GetPaymentScheduleByCustomerRequest

// string customer_uid = 1;
inline void GetPaymentScheduleByCustomerRequest::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& GetPaymentScheduleByCustomerRequest::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleByCustomerRequest.customer_uid)
  return _internal_customer_uid();
}
inline void GetPaymentScheduleByCustomerRequest::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe.GetPaymentScheduleByCustomerRequest.customer_uid)
}
inline std::string* GetPaymentScheduleByCustomerRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe.GetPaymentScheduleByCustomerRequest.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& GetPaymentScheduleByCustomerRequest::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void GetPaymentScheduleByCustomerRequest::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPaymentScheduleByCustomerRequest::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.GetPaymentScheduleByCustomerRequest.customer_uid)
}
inline void GetPaymentScheduleByCustomerRequest::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.GetPaymentScheduleByCustomerRequest.customer_uid)
}
inline void GetPaymentScheduleByCustomerRequest::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.GetPaymentScheduleByCustomerRequest.customer_uid)
}
inline std::string* GetPaymentScheduleByCustomerRequest::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPaymentScheduleByCustomerRequest::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe.GetPaymentScheduleByCustomerRequest.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPaymentScheduleByCustomerRequest::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.GetPaymentScheduleByCustomerRequest.customer_uid)
}

// int32 page = 2;
inline void GetPaymentScheduleByCustomerRequest::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaymentScheduleByCustomerRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaymentScheduleByCustomerRequest::page() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleByCustomerRequest.page)
  return _internal_page();
}
inline void GetPaymentScheduleByCustomerRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void GetPaymentScheduleByCustomerRequest::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:subscribe.GetPaymentScheduleByCustomerRequest.page)
}

// int32 from = 3;
inline void GetPaymentScheduleByCustomerRequest::clear_from() {
  from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaymentScheduleByCustomerRequest::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaymentScheduleByCustomerRequest::from() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleByCustomerRequest.from)
  return _internal_from();
}
inline void GetPaymentScheduleByCustomerRequest::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ = value;
}
inline void GetPaymentScheduleByCustomerRequest::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:subscribe.GetPaymentScheduleByCustomerRequest.from)
}

// int32 to = 4;
inline void GetPaymentScheduleByCustomerRequest::clear_to() {
  to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaymentScheduleByCustomerRequest::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaymentScheduleByCustomerRequest::to() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleByCustomerRequest.to)
  return _internal_to();
}
inline void GetPaymentScheduleByCustomerRequest::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ = value;
}
inline void GetPaymentScheduleByCustomerRequest::set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:subscribe.GetPaymentScheduleByCustomerRequest.to)
}

// string schedule_status = 5;
inline void GetPaymentScheduleByCustomerRequest::clear_schedule_status() {
  schedule_status_.ClearToEmpty();
}
inline const std::string& GetPaymentScheduleByCustomerRequest::schedule_status() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleByCustomerRequest.schedule_status)
  return _internal_schedule_status();
}
inline void GetPaymentScheduleByCustomerRequest::set_schedule_status(const std::string& value) {
  _internal_set_schedule_status(value);
  // @@protoc_insertion_point(field_set:subscribe.GetPaymentScheduleByCustomerRequest.schedule_status)
}
inline std::string* GetPaymentScheduleByCustomerRequest::mutable_schedule_status() {
  // @@protoc_insertion_point(field_mutable:subscribe.GetPaymentScheduleByCustomerRequest.schedule_status)
  return _internal_mutable_schedule_status();
}
inline const std::string& GetPaymentScheduleByCustomerRequest::_internal_schedule_status() const {
  return schedule_status_.Get();
}
inline void GetPaymentScheduleByCustomerRequest::_internal_set_schedule_status(const std::string& value) {
  
  schedule_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPaymentScheduleByCustomerRequest::set_schedule_status(std::string&& value) {
  
  schedule_status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.GetPaymentScheduleByCustomerRequest.schedule_status)
}
inline void GetPaymentScheduleByCustomerRequest::set_schedule_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schedule_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.GetPaymentScheduleByCustomerRequest.schedule_status)
}
inline void GetPaymentScheduleByCustomerRequest::set_schedule_status(const char* value,
    size_t size) {
  
  schedule_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.GetPaymentScheduleByCustomerRequest.schedule_status)
}
inline std::string* GetPaymentScheduleByCustomerRequest::_internal_mutable_schedule_status() {
  
  return schedule_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPaymentScheduleByCustomerRequest::release_schedule_status() {
  // @@protoc_insertion_point(field_release:subscribe.GetPaymentScheduleByCustomerRequest.schedule_status)
  return schedule_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPaymentScheduleByCustomerRequest::set_allocated_schedule_status(std::string* schedule_status) {
  if (schedule_status != nullptr) {
    
  } else {
    
  }
  schedule_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schedule_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.GetPaymentScheduleByCustomerRequest.schedule_status)
}

// -------------------------------------------------------------------

// NestedGetPaymentScheduleByCustomerData

// int32 total = 1;
inline void NestedGetPaymentScheduleByCustomerData::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaymentScheduleByCustomerData::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaymentScheduleByCustomerData::total() const {
  // @@protoc_insertion_point(field_get:subscribe.NestedGetPaymentScheduleByCustomerData.total)
  return _internal_total();
}
inline void NestedGetPaymentScheduleByCustomerData::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void NestedGetPaymentScheduleByCustomerData::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:subscribe.NestedGetPaymentScheduleByCustomerData.total)
}

// int32 previous = 2;
inline void NestedGetPaymentScheduleByCustomerData::clear_previous() {
  previous_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaymentScheduleByCustomerData::_internal_previous() const {
  return previous_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaymentScheduleByCustomerData::previous() const {
  // @@protoc_insertion_point(field_get:subscribe.NestedGetPaymentScheduleByCustomerData.previous)
  return _internal_previous();
}
inline void NestedGetPaymentScheduleByCustomerData::_internal_set_previous(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  previous_ = value;
}
inline void NestedGetPaymentScheduleByCustomerData::set_previous(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_previous(value);
  // @@protoc_insertion_point(field_set:subscribe.NestedGetPaymentScheduleByCustomerData.previous)
}

// int32 next = 3;
inline void NestedGetPaymentScheduleByCustomerData::clear_next() {
  next_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaymentScheduleByCustomerData::_internal_next() const {
  return next_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaymentScheduleByCustomerData::next() const {
  // @@protoc_insertion_point(field_get:subscribe.NestedGetPaymentScheduleByCustomerData.next)
  return _internal_next();
}
inline void NestedGetPaymentScheduleByCustomerData::_internal_set_next(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_ = value;
}
inline void NestedGetPaymentScheduleByCustomerData::set_next(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:subscribe.NestedGetPaymentScheduleByCustomerData.next)
}

// repeated .subscribe.UnitSchedulePaymentResponse list = 4;
inline int NestedGetPaymentScheduleByCustomerData::_internal_list_size() const {
  return list_.size();
}
inline int NestedGetPaymentScheduleByCustomerData::list_size() const {
  return _internal_list_size();
}
inline void NestedGetPaymentScheduleByCustomerData::clear_list() {
  list_.Clear();
}
inline ::subscribe::UnitSchedulePaymentResponse* NestedGetPaymentScheduleByCustomerData::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe.NestedGetPaymentScheduleByCustomerData.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >*
NestedGetPaymentScheduleByCustomerData::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:subscribe.NestedGetPaymentScheduleByCustomerData.list)
  return &list_;
}
inline const ::subscribe::UnitSchedulePaymentResponse& NestedGetPaymentScheduleByCustomerData::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::subscribe::UnitSchedulePaymentResponse& NestedGetPaymentScheduleByCustomerData::list(int index) const {
  // @@protoc_insertion_point(field_get:subscribe.NestedGetPaymentScheduleByCustomerData.list)
  return _internal_list(index);
}
inline ::subscribe::UnitSchedulePaymentResponse* NestedGetPaymentScheduleByCustomerData::_internal_add_list() {
  return list_.Add();
}
inline ::subscribe::UnitSchedulePaymentResponse* NestedGetPaymentScheduleByCustomerData::add_list() {
  // @@protoc_insertion_point(field_add:subscribe.NestedGetPaymentScheduleByCustomerData.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe::UnitSchedulePaymentResponse >&
NestedGetPaymentScheduleByCustomerData::list() const {
  // @@protoc_insertion_point(field_list:subscribe.NestedGetPaymentScheduleByCustomerData.list)
  return list_;
}

// -------------------------------------------------------------------

// GetPaymentScheduleByCustomerResponse

// int32 code = 1;
inline void GetPaymentScheduleByCustomerResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaymentScheduleByCustomerResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaymentScheduleByCustomerResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleByCustomerResponse.code)
  return _internal_code();
}
inline void GetPaymentScheduleByCustomerResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetPaymentScheduleByCustomerResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe.GetPaymentScheduleByCustomerResponse.code)
}

// string message = 2;
inline void GetPaymentScheduleByCustomerResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GetPaymentScheduleByCustomerResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleByCustomerResponse.message)
  return _internal_message();
}
inline void GetPaymentScheduleByCustomerResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe.GetPaymentScheduleByCustomerResponse.message)
}
inline std::string* GetPaymentScheduleByCustomerResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe.GetPaymentScheduleByCustomerResponse.message)
  return _internal_mutable_message();
}
inline const std::string& GetPaymentScheduleByCustomerResponse::_internal_message() const {
  return message_.Get();
}
inline void GetPaymentScheduleByCustomerResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPaymentScheduleByCustomerResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe.GetPaymentScheduleByCustomerResponse.message)
}
inline void GetPaymentScheduleByCustomerResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe.GetPaymentScheduleByCustomerResponse.message)
}
inline void GetPaymentScheduleByCustomerResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe.GetPaymentScheduleByCustomerResponse.message)
}
inline std::string* GetPaymentScheduleByCustomerResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPaymentScheduleByCustomerResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe.GetPaymentScheduleByCustomerResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPaymentScheduleByCustomerResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe.GetPaymentScheduleByCustomerResponse.message)
}

// .subscribe.NestedGetPaymentScheduleByCustomerData response = 3;
inline bool GetPaymentScheduleByCustomerResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool GetPaymentScheduleByCustomerResponse::has_response() const {
  return _internal_has_response();
}
inline void GetPaymentScheduleByCustomerResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::subscribe::NestedGetPaymentScheduleByCustomerData& GetPaymentScheduleByCustomerResponse::_internal_response() const {
  const ::subscribe::NestedGetPaymentScheduleByCustomerData* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscribe::NestedGetPaymentScheduleByCustomerData&>(
      ::subscribe::_NestedGetPaymentScheduleByCustomerData_default_instance_);
}
inline const ::subscribe::NestedGetPaymentScheduleByCustomerData& GetPaymentScheduleByCustomerResponse::response() const {
  // @@protoc_insertion_point(field_get:subscribe.GetPaymentScheduleByCustomerResponse.response)
  return _internal_response();
}
inline void GetPaymentScheduleByCustomerResponse::unsafe_arena_set_allocated_response(
    ::subscribe::NestedGetPaymentScheduleByCustomerData* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscribe.GetPaymentScheduleByCustomerResponse.response)
}
inline ::subscribe::NestedGetPaymentScheduleByCustomerData* GetPaymentScheduleByCustomerResponse::release_response() {
  
  ::subscribe::NestedGetPaymentScheduleByCustomerData* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::subscribe::NestedGetPaymentScheduleByCustomerData* GetPaymentScheduleByCustomerResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:subscribe.GetPaymentScheduleByCustomerResponse.response)
  
  ::subscribe::NestedGetPaymentScheduleByCustomerData* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::subscribe::NestedGetPaymentScheduleByCustomerData* GetPaymentScheduleByCustomerResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscribe::NestedGetPaymentScheduleByCustomerData>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::subscribe::NestedGetPaymentScheduleByCustomerData* GetPaymentScheduleByCustomerResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:subscribe.GetPaymentScheduleByCustomerResponse.response)
  return _internal_mutable_response();
}
inline void GetPaymentScheduleByCustomerResponse::set_allocated_response(::subscribe::NestedGetPaymentScheduleByCustomerData* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:subscribe.GetPaymentScheduleByCustomerResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace subscribe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_v1_2fsubscribe_2fsubscribe_2eproto
