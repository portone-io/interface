// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/subscribe_customers/subscribe_customers.proto

#include "v1/subscribe_customers/subscribe_customers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace subscribe_customers {
constexpr CustomerBillingKey::CustomerBillingKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : card_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , card_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , card_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_postcode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_tel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pg_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pg_provider_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , card_type_(0)
  , inserted_(0)
  , updated_(0){}
struct CustomerBillingKeyDefaultTypeInternal {
  constexpr CustomerBillingKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CustomerBillingKeyDefaultTypeInternal() {}
  union {
    CustomerBillingKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CustomerBillingKeyDefaultTypeInternal _CustomerBillingKey_default_instance_;
constexpr GetMultipleCustomerBillingKeyRequest::GetMultipleCustomerBillingKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customer_uid_(){}
struct GetMultipleCustomerBillingKeyRequestDefaultTypeInternal {
  constexpr GetMultipleCustomerBillingKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMultipleCustomerBillingKeyRequestDefaultTypeInternal() {}
  union {
    GetMultipleCustomerBillingKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMultipleCustomerBillingKeyRequestDefaultTypeInternal _GetMultipleCustomerBillingKeyRequest_default_instance_;
constexpr GetMultipleCustomerBillingKeyResponse::GetMultipleCustomerBillingKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_()
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0){}
struct GetMultipleCustomerBillingKeyResponseDefaultTypeInternal {
  constexpr GetMultipleCustomerBillingKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMultipleCustomerBillingKeyResponseDefaultTypeInternal() {}
  union {
    GetMultipleCustomerBillingKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMultipleCustomerBillingKeyResponseDefaultTypeInternal _GetMultipleCustomerBillingKeyResponse_default_instance_;
constexpr DeleteCustomerBillingKeyRequest::DeleteCustomerBillingKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customer_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requester_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteCustomerBillingKeyRequestDefaultTypeInternal {
  constexpr DeleteCustomerBillingKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteCustomerBillingKeyRequestDefaultTypeInternal() {}
  union {
    DeleteCustomerBillingKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteCustomerBillingKeyRequestDefaultTypeInternal _DeleteCustomerBillingKeyRequest_default_instance_;
constexpr DeleteCustomerBillingKeyResponse::DeleteCustomerBillingKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_(nullptr)
  , code_(0){}
struct DeleteCustomerBillingKeyResponseDefaultTypeInternal {
  constexpr DeleteCustomerBillingKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteCustomerBillingKeyResponseDefaultTypeInternal() {}
  union {
    DeleteCustomerBillingKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteCustomerBillingKeyResponseDefaultTypeInternal _DeleteCustomerBillingKeyResponse_default_instance_;
constexpr GetCustomerBillingKeyRequest::GetCustomerBillingKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customer_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetCustomerBillingKeyRequestDefaultTypeInternal {
  constexpr GetCustomerBillingKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCustomerBillingKeyRequestDefaultTypeInternal() {}
  union {
    GetCustomerBillingKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCustomerBillingKeyRequestDefaultTypeInternal _GetCustomerBillingKeyRequest_default_instance_;
constexpr GetCustomerBillingKeyResponse::GetCustomerBillingKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_(nullptr)
  , code_(0){}
struct GetCustomerBillingKeyResponseDefaultTypeInternal {
  constexpr GetCustomerBillingKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCustomerBillingKeyResponseDefaultTypeInternal() {}
  union {
    GetCustomerBillingKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCustomerBillingKeyResponseDefaultTypeInternal _GetCustomerBillingKeyResponse_default_instance_;
constexpr InsertCustomerBillingKeyRequest::InsertCustomerBillingKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customer_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , card_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expiry_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , birth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pwd_2digit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_tel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , customer_postcode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InsertCustomerBillingKeyRequestDefaultTypeInternal {
  constexpr InsertCustomerBillingKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertCustomerBillingKeyRequestDefaultTypeInternal() {}
  union {
    InsertCustomerBillingKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertCustomerBillingKeyRequestDefaultTypeInternal _InsertCustomerBillingKeyRequest_default_instance_;
constexpr InsertCustomerBillingKeyResponse::InsertCustomerBillingKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_(nullptr)
  , code_(0){}
struct InsertCustomerBillingKeyResponseDefaultTypeInternal {
  constexpr InsertCustomerBillingKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertCustomerBillingKeyResponseDefaultTypeInternal() {}
  union {
    InsertCustomerBillingKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertCustomerBillingKeyResponseDefaultTypeInternal _InsertCustomerBillingKeyResponse_default_instance_;
constexpr GetPaidByBillingKeyListRequest::GetPaidByBillingKeyListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customer_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_(0){}
struct GetPaidByBillingKeyListRequestDefaultTypeInternal {
  constexpr GetPaidByBillingKeyListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPaidByBillingKeyListRequestDefaultTypeInternal() {}
  union {
    GetPaidByBillingKeyListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPaidByBillingKeyListRequestDefaultTypeInternal _GetPaidByBillingKeyListRequest_default_instance_;
constexpr NestedGetPaidByBillingKeyListData::NestedGetPaidByBillingKeyListData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_()
  , total_(0)
  , previous_(0)
  , next_(0){}
struct NestedGetPaidByBillingKeyListDataDefaultTypeInternal {
  constexpr NestedGetPaidByBillingKeyListDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NestedGetPaidByBillingKeyListDataDefaultTypeInternal() {}
  union {
    NestedGetPaidByBillingKeyListData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NestedGetPaidByBillingKeyListDataDefaultTypeInternal _NestedGetPaidByBillingKeyListData_default_instance_;
constexpr GetPaidByBillingKeyListResponse::GetPaidByBillingKeyListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_(nullptr)
  , code_(0){}
struct GetPaidByBillingKeyListResponseDefaultTypeInternal {
  constexpr GetPaidByBillingKeyListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPaidByBillingKeyListResponseDefaultTypeInternal() {}
  union {
    GetPaidByBillingKeyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPaidByBillingKeyListResponseDefaultTypeInternal _GetPaidByBillingKeyListResponse_default_instance_;
}  // namespace subscribe_customers
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, card_code_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, card_name_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, card_number_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, card_type_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, customer_addr_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, customer_email_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, customer_name_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, customer_postcode_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, customer_tel_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, customer_uid_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, inserted_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, pg_id_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, pg_provider_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::CustomerBillingKey, updated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetMultipleCustomerBillingKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetMultipleCustomerBillingKeyRequest, customer_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetMultipleCustomerBillingKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetMultipleCustomerBillingKeyResponse, code_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetMultipleCustomerBillingKeyResponse, message_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetMultipleCustomerBillingKeyResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::DeleteCustomerBillingKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::DeleteCustomerBillingKeyRequest, customer_uid_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::DeleteCustomerBillingKeyRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::DeleteCustomerBillingKeyRequest, requester_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::DeleteCustomerBillingKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::DeleteCustomerBillingKeyResponse, code_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::DeleteCustomerBillingKeyResponse, message_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::DeleteCustomerBillingKeyResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetCustomerBillingKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetCustomerBillingKeyRequest, customer_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetCustomerBillingKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetCustomerBillingKeyResponse, code_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetCustomerBillingKeyResponse, message_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetCustomerBillingKeyResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, customer_uid_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, pg_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, card_number_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, expiry_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, birth_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, pwd_2digit_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, customer_name_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, customer_tel_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, customer_email_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, customer_addr_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyRequest, customer_postcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyResponse, code_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyResponse, message_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::InsertCustomerBillingKeyResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetPaidByBillingKeyListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetPaidByBillingKeyListRequest, customer_uid_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetPaidByBillingKeyListRequest, page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::NestedGetPaidByBillingKeyListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::NestedGetPaidByBillingKeyListData, total_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::NestedGetPaidByBillingKeyListData, previous_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::NestedGetPaidByBillingKeyListData, next_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::NestedGetPaidByBillingKeyListData, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetPaidByBillingKeyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetPaidByBillingKeyListResponse, code_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetPaidByBillingKeyListResponse, message_),
  PROTOBUF_FIELD_OFFSET(::subscribe_customers::GetPaidByBillingKeyListResponse, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::subscribe_customers::CustomerBillingKey)},
  { 19, -1, sizeof(::subscribe_customers::GetMultipleCustomerBillingKeyRequest)},
  { 25, -1, sizeof(::subscribe_customers::GetMultipleCustomerBillingKeyResponse)},
  { 33, -1, sizeof(::subscribe_customers::DeleteCustomerBillingKeyRequest)},
  { 41, -1, sizeof(::subscribe_customers::DeleteCustomerBillingKeyResponse)},
  { 49, -1, sizeof(::subscribe_customers::GetCustomerBillingKeyRequest)},
  { 55, -1, sizeof(::subscribe_customers::GetCustomerBillingKeyResponse)},
  { 63, -1, sizeof(::subscribe_customers::InsertCustomerBillingKeyRequest)},
  { 79, -1, sizeof(::subscribe_customers::InsertCustomerBillingKeyResponse)},
  { 87, -1, sizeof(::subscribe_customers::GetPaidByBillingKeyListRequest)},
  { 94, -1, sizeof(::subscribe_customers::NestedGetPaidByBillingKeyListData)},
  { 103, -1, sizeof(::subscribe_customers::GetPaidByBillingKeyListResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_CustomerBillingKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_GetMultipleCustomerBillingKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_GetMultipleCustomerBillingKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_DeleteCustomerBillingKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_DeleteCustomerBillingKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_GetCustomerBillingKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_GetCustomerBillingKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_InsertCustomerBillingKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_InsertCustomerBillingKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_GetPaidByBillingKeyListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_NestedGetPaidByBillingKeyListData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::subscribe_customers::_GetPaidByBillingKeyListResponse_default_instance_),
};

const char descriptor_table_protodef_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0v1/subscribe_customers/subscribe_custo"
  "mers.proto\022\023subscribe_customers\032\034google/"
  "api/annotations.proto\032\030v1/payment/paymen"
  "t.proto\032\034v1/subscribe/subscribe.proto\"\266\002"
  "\n\022CustomerBillingKey\022\021\n\tcard_code\030\001 \001(\t\022"
  "\021\n\tcard_name\030\002 \001(\t\022\023\n\013card_number\030\003 \001(\t\022"
  "\021\n\tcard_type\030\004 \001(\005\022\025\n\rcustomer_addr\030\005 \001("
  "\t\022\026\n\016customer_email\030\006 \001(\t\022\025\n\rcustomer_na"
  "me\030\007 \001(\t\022\031\n\021customer_postcode\030\010 \001(\t\022\024\n\014c"
  "ustomer_tel\030\t \001(\t\022\024\n\014customer_uid\030\n \001(\t\022"
  "\020\n\010inserted\030\013 \001(\005\022\r\n\005pg_id\030\014 \001(\t\022\023\n\013pg_p"
  "rovider\030\r \001(\t\022\017\n\007updated\030\016 \001(\005\"<\n$GetMul"
  "tipleCustomerBillingKeyRequest\022\024\n\014custom"
  "er_uid\030\001 \003(\t\"\201\001\n%GetMultipleCustomerBill"
  "ingKeyResponse\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030"
  "\002 \001(\t\0229\n\010response\030\003 \003(\0132\'.subscribe_cust"
  "omers.CustomerBillingKey\"Z\n\037DeleteCustom"
  "erBillingKeyRequest\022\024\n\014customer_uid\030\001 \001("
  "\t\022\016\n\006reason\030\002 \001(\t\022\021\n\trequester\030\003 \001(\t\"|\n "
  "DeleteCustomerBillingKeyResponse\022\014\n\004code"
  "\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\0229\n\010response\030\003 \001("
  "\0132\'.subscribe_customers.CustomerBillingK"
  "ey\"4\n\034GetCustomerBillingKeyRequest\022\024\n\014cu"
  "stomer_uid\030\001 \001(\t\"y\n\035GetCustomerBillingKe"
  "yResponse\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030\002 \001(\t"
  "\0229\n\010response\030\003 \001(\0132\'.subscribe_customers"
  ".CustomerBillingKey\"\202\002\n\037InsertCustomerBi"
  "llingKeyRequest\022\024\n\014customer_uid\030\001 \001(\t\022\n\n"
  "\002pg\030\002 \001(\t\022\023\n\013card_number\030\003 \001(\t\022\016\n\006expiry"
  "\030\004 \001(\t\022\r\n\005birth\030\005 \001(\t\022\022\n\npwd_2digit\030\006 \001("
  "\t\022\025\n\rcustomer_name\030\007 \001(\t\022\024\n\014customer_tel"
  "\030\010 \001(\t\022\026\n\016customer_email\030\t \001(\t\022\025\n\rcustom"
  "er_addr\030\n \001(\t\022\031\n\021customer_postcode\030\013 \001(\t"
  "\"|\n InsertCustomerBillingKeyResponse\022\014\n\004"
  "code\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\0229\n\010response\030"
  "\003 \001(\0132\'.subscribe_customers.CustomerBill"
  "ingKey\"D\n\036GetPaidByBillingKeyListRequest"
  "\022\024\n\014customer_uid\030\001 \001(\t\022\014\n\004page\030\002 \001(\005\"r\n!"
  "NestedGetPaidByBillingKeyListData\022\r\n\005tot"
  "al\030\001 \001(\005\022\020\n\010previous\030\002 \001(\005\022\014\n\004next\030\003 \001(\005"
  "\022\036\n\004list\030\004 \003(\0132\020.payment.Payment\"\212\001\n\037Get"
  "PaidByBillingKeyListResponse\022\014\n\004code\030\001 \001"
  "(\005\022\017\n\007message\030\002 \001(\t\022H\n\010response\030\003 \001(\01326."
  "subscribe_customers.NestedGetPaidByBilli"
  "ngKeyListData2\331\t\n\031SubscribeCustomersServ"
  "ice\022\307\001\n GetMultipleCustomerBillingKeyRPC"
  "\0229.subscribe_customers.GetMultipleCustom"
  "erBillingKeyRequest\032:.subscribe_customer"
  "s.GetMultipleCustomerBillingKeyResponse\""
  ",\202\323\344\223\002&\022$/api/payments/v1/subscribe/cust"
  "omers\022\307\001\n\033DeleteCustomerBillingKeyRPC\0224."
  "subscribe_customers.DeleteCustomerBillin"
  "gKeyRequest\0325.subscribe_customers.Delete"
  "CustomerBillingKeyResponse\";\202\323\344\223\0025*3/api"
  "/payments/v1/subscribe/customers/{custom"
  "er_uid}\022\276\001\n\030GetCustomerBillingKeyRPC\0221.s"
  "ubscribe_customers.GetCustomerBillingKey"
  "Request\0322.subscribe_customers.GetCustome"
  "rBillingKeyResponse\";\202\323\344\223\0025\0223/api/paymen"
  "ts/v1/subscribe/customers/{customer_uid}"
  "\022\312\001\n\033InsertCustomerBillingKeyRPC\0224.subsc"
  "ribe_customers.InsertCustomerBillingKeyR"
  "equest\0325.subscribe_customers.InsertCusto"
  "merBillingKeyResponse\">\202\323\344\223\0028\"3/api/paym"
  "ents/v1/subscribe/customers/{customer_ui"
  "d}:\001*\022\315\001\n\032GetPaidByBillingKeyListRPC\0223.s"
  "ubscribe_customers.GetPaidByBillingKeyLi"
  "stRequest\0324.subscribe_customers.GetPaidB"
  "yBillingKeyListResponse\"D\202\323\344\223\002>\022</api/pa"
  "yments/v1/subscribe/customers/{customer_"
  "uid}/payments\022\311\001\n\037GetPaymentScheduleByCu"
  "stomerRPC\022..subscribe.GetPaymentSchedule"
  "ByCustomerRequest\032/.subscribe.GetPayment"
  "ScheduleByCustomerResponse\"E\202\323\344\223\002\?\022=/api"
  "/payments/v1/subscribe/customers/{custom"
  "er_uid}/schedulesBXZ>github.com/iamport/"
  "interface/gen_src/go/v1/subscribe_custom"
  "ers\252\002\025V1.SubscribeCustomersb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_v1_2fpayment_2fpayment_2eproto,
  &::descriptor_table_v1_2fsubscribe_2fsubscribe_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto = {
  false, false, 3115, descriptor_table_protodef_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto, "v1/subscribe_customers/subscribe_customers.proto", 
  &descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto_once, descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto_deps, 3, 12,
  schemas, file_default_instances, TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto::offsets,
  file_level_metadata_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto, file_level_enum_descriptors_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto, file_level_service_descriptors_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
  return descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto(&descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
namespace subscribe_customers {

// ===================================================================

class CustomerBillingKey::_Internal {
 public:
};

CustomerBillingKey::CustomerBillingKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.CustomerBillingKey)
}
CustomerBillingKey::CustomerBillingKey(const CustomerBillingKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  card_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_card_code().empty()) {
    card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_card_code(), 
      GetArena());
  }
  card_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_card_name().empty()) {
    card_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_card_name(), 
      GetArena());
  }
  card_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_card_number().empty()) {
    card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_card_number(), 
      GetArena());
  }
  customer_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_addr().empty()) {
    customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_addr(), 
      GetArena());
  }
  customer_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_email().empty()) {
    customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_email(), 
      GetArena());
  }
  customer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_name().empty()) {
    customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_name(), 
      GetArena());
  }
  customer_postcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_postcode().empty()) {
    customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_postcode(), 
      GetArena());
  }
  customer_tel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_tel().empty()) {
    customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_tel(), 
      GetArena());
  }
  customer_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_uid().empty()) {
    customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_uid(), 
      GetArena());
  }
  pg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pg_id().empty()) {
    pg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pg_id(), 
      GetArena());
  }
  pg_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pg_provider().empty()) {
    pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pg_provider(), 
      GetArena());
  }
  ::memcpy(&card_type_, &from.card_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_) -
    reinterpret_cast<char*>(&card_type_)) + sizeof(updated_));
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.CustomerBillingKey)
}

void CustomerBillingKey::SharedCtor() {
card_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
card_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
card_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_postcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_tel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pg_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&card_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updated_) -
    reinterpret_cast<char*>(&card_type_)) + sizeof(updated_));
}

CustomerBillingKey::~CustomerBillingKey() {
  // @@protoc_insertion_point(destructor:subscribe_customers.CustomerBillingKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomerBillingKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  card_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_postcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_tel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pg_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pg_provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomerBillingKey::ArenaDtor(void* object) {
  CustomerBillingKey* _this = reinterpret_cast< CustomerBillingKey* >(object);
  (void)_this;
}
void CustomerBillingKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomerBillingKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomerBillingKey::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.CustomerBillingKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_code_.ClearToEmpty();
  card_name_.ClearToEmpty();
  card_number_.ClearToEmpty();
  customer_addr_.ClearToEmpty();
  customer_email_.ClearToEmpty();
  customer_name_.ClearToEmpty();
  customer_postcode_.ClearToEmpty();
  customer_tel_.ClearToEmpty();
  customer_uid_.ClearToEmpty();
  pg_id_.ClearToEmpty();
  pg_provider_.ClearToEmpty();
  ::memset(&card_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_) -
      reinterpret_cast<char*>(&card_type_)) + sizeof(updated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomerBillingKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string card_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_card_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.card_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string card_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_card_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.card_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string card_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_card_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.card_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 card_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          card_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_customer_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.customer_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_email = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_customer_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.customer_email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_customer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.customer_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_postcode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_customer_postcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.customer_postcode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_tel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_customer_tel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.customer_tel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_customer_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.customer_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inserted = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          inserted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pg_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_pg_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.pg_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pg_provider = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_pg_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.CustomerBillingKey.pg_provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 updated = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomerBillingKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.CustomerBillingKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string card_code = 1;
  if (this->card_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_card_code().data(), static_cast<int>(this->_internal_card_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.card_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_card_code(), target);
  }

  // string card_name = 2;
  if (this->card_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_card_name().data(), static_cast<int>(this->_internal_card_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.card_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_card_name(), target);
  }

  // string card_number = 3;
  if (this->card_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_card_number().data(), static_cast<int>(this->_internal_card_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.card_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_card_number(), target);
  }

  // int32 card_type = 4;
  if (this->card_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_card_type(), target);
  }

  // string customer_addr = 5;
  if (this->customer_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_addr().data(), static_cast<int>(this->_internal_customer_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.customer_addr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_customer_addr(), target);
  }

  // string customer_email = 6;
  if (this->customer_email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_email().data(), static_cast<int>(this->_internal_customer_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.customer_email");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_customer_email(), target);
  }

  // string customer_name = 7;
  if (this->customer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_name().data(), static_cast<int>(this->_internal_customer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.customer_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_customer_name(), target);
  }

  // string customer_postcode = 8;
  if (this->customer_postcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_postcode().data(), static_cast<int>(this->_internal_customer_postcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.customer_postcode");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_customer_postcode(), target);
  }

  // string customer_tel = 9;
  if (this->customer_tel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_tel().data(), static_cast<int>(this->_internal_customer_tel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.customer_tel");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_customer_tel(), target);
  }

  // string customer_uid = 10;
  if (this->customer_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_uid().data(), static_cast<int>(this->_internal_customer_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.customer_uid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_customer_uid(), target);
  }

  // int32 inserted = 11;
  if (this->inserted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_inserted(), target);
  }

  // string pg_id = 12;
  if (this->pg_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pg_id().data(), static_cast<int>(this->_internal_pg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.pg_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_pg_id(), target);
  }

  // string pg_provider = 13;
  if (this->pg_provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pg_provider().data(), static_cast<int>(this->_internal_pg_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.CustomerBillingKey.pg_provider");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_pg_provider(), target);
  }

  // int32 updated = 14;
  if (this->updated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_updated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.CustomerBillingKey)
  return target;
}

size_t CustomerBillingKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.CustomerBillingKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string card_code = 1;
  if (this->card_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_card_code());
  }

  // string card_name = 2;
  if (this->card_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_card_name());
  }

  // string card_number = 3;
  if (this->card_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_card_number());
  }

  // string customer_addr = 5;
  if (this->customer_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_addr());
  }

  // string customer_email = 6;
  if (this->customer_email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_email());
  }

  // string customer_name = 7;
  if (this->customer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_name());
  }

  // string customer_postcode = 8;
  if (this->customer_postcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_postcode());
  }

  // string customer_tel = 9;
  if (this->customer_tel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_tel());
  }

  // string customer_uid = 10;
  if (this->customer_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_uid());
  }

  // string pg_id = 12;
  if (this->pg_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pg_id());
  }

  // string pg_provider = 13;
  if (this->pg_provider().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pg_provider());
  }

  // int32 card_type = 4;
  if (this->card_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_card_type());
  }

  // int32 inserted = 11;
  if (this->inserted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inserted());
  }

  // int32 updated = 14;
  if (this->updated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_updated());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerBillingKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.CustomerBillingKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerBillingKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomerBillingKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.CustomerBillingKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.CustomerBillingKey)
    MergeFrom(*source);
  }
}

void CustomerBillingKey::MergeFrom(const CustomerBillingKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.CustomerBillingKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_code().size() > 0) {
    _internal_set_card_code(from._internal_card_code());
  }
  if (from.card_name().size() > 0) {
    _internal_set_card_name(from._internal_card_name());
  }
  if (from.card_number().size() > 0) {
    _internal_set_card_number(from._internal_card_number());
  }
  if (from.customer_addr().size() > 0) {
    _internal_set_customer_addr(from._internal_customer_addr());
  }
  if (from.customer_email().size() > 0) {
    _internal_set_customer_email(from._internal_customer_email());
  }
  if (from.customer_name().size() > 0) {
    _internal_set_customer_name(from._internal_customer_name());
  }
  if (from.customer_postcode().size() > 0) {
    _internal_set_customer_postcode(from._internal_customer_postcode());
  }
  if (from.customer_tel().size() > 0) {
    _internal_set_customer_tel(from._internal_customer_tel());
  }
  if (from.customer_uid().size() > 0) {
    _internal_set_customer_uid(from._internal_customer_uid());
  }
  if (from.pg_id().size() > 0) {
    _internal_set_pg_id(from._internal_pg_id());
  }
  if (from.pg_provider().size() > 0) {
    _internal_set_pg_provider(from._internal_pg_provider());
  }
  if (from.card_type() != 0) {
    _internal_set_card_type(from._internal_card_type());
  }
  if (from.inserted() != 0) {
    _internal_set_inserted(from._internal_inserted());
  }
  if (from.updated() != 0) {
    _internal_set_updated(from._internal_updated());
  }
}

void CustomerBillingKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.CustomerBillingKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerBillingKey::CopyFrom(const CustomerBillingKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.CustomerBillingKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerBillingKey::IsInitialized() const {
  return true;
}

void CustomerBillingKey::InternalSwap(CustomerBillingKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  card_code_.Swap(&other->card_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  card_name_.Swap(&other->card_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  card_number_.Swap(&other->card_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_addr_.Swap(&other->customer_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_email_.Swap(&other->customer_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_name_.Swap(&other->customer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_postcode_.Swap(&other->customer_postcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_tel_.Swap(&other->customer_tel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_uid_.Swap(&other->customer_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pg_id_.Swap(&other->pg_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pg_provider_.Swap(&other->pg_provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomerBillingKey, updated_)
      + sizeof(CustomerBillingKey::updated_)
      - PROTOBUF_FIELD_OFFSET(CustomerBillingKey, card_type_)>(
          reinterpret_cast<char*>(&card_type_),
          reinterpret_cast<char*>(&other->card_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomerBillingKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetMultipleCustomerBillingKeyRequest::_Internal {
 public:
};

GetMultipleCustomerBillingKeyRequest::GetMultipleCustomerBillingKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  customer_uid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
}
GetMultipleCustomerBillingKeyRequest::GetMultipleCustomerBillingKeyRequest(const GetMultipleCustomerBillingKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      customer_uid_(from.customer_uid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
}

void GetMultipleCustomerBillingKeyRequest::SharedCtor() {
}

GetMultipleCustomerBillingKeyRequest::~GetMultipleCustomerBillingKeyRequest() {
  // @@protoc_insertion_point(destructor:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMultipleCustomerBillingKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMultipleCustomerBillingKeyRequest::ArenaDtor(void* object) {
  GetMultipleCustomerBillingKeyRequest* _this = reinterpret_cast< GetMultipleCustomerBillingKeyRequest* >(object);
  (void)_this;
}
void GetMultipleCustomerBillingKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMultipleCustomerBillingKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMultipleCustomerBillingKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_uid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMultipleCustomerBillingKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string customer_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_customer_uid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMultipleCustomerBillingKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string customer_uid = 1;
  for (int i = 0, n = this->_internal_customer_uid_size(); i < n; i++) {
    const auto& s = this->_internal_customer_uid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
  return target;
}

size_t GetMultipleCustomerBillingKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string customer_uid = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(customer_uid_.size());
  for (int i = 0, n = customer_uid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      customer_uid_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMultipleCustomerBillingKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMultipleCustomerBillingKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMultipleCustomerBillingKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
    MergeFrom(*source);
  }
}

void GetMultipleCustomerBillingKeyRequest::MergeFrom(const GetMultipleCustomerBillingKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  customer_uid_.MergeFrom(from.customer_uid_);
}

void GetMultipleCustomerBillingKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMultipleCustomerBillingKeyRequest::CopyFrom(const GetMultipleCustomerBillingKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultipleCustomerBillingKeyRequest::IsInitialized() const {
  return true;
}

void GetMultipleCustomerBillingKeyRequest::InternalSwap(GetMultipleCustomerBillingKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customer_uid_.InternalSwap(&other->customer_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMultipleCustomerBillingKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetMultipleCustomerBillingKeyResponse::_Internal {
 public:
};

GetMultipleCustomerBillingKeyResponse::GetMultipleCustomerBillingKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  response_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
}
GetMultipleCustomerBillingKeyResponse::GetMultipleCustomerBillingKeyResponse(const GetMultipleCustomerBillingKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      response_(from.response_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
}

void GetMultipleCustomerBillingKeyResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_ = 0;
}

GetMultipleCustomerBillingKeyResponse::~GetMultipleCustomerBillingKeyResponse() {
  // @@protoc_insertion_point(destructor:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMultipleCustomerBillingKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMultipleCustomerBillingKeyResponse::ArenaDtor(void* object) {
  GetMultipleCustomerBillingKeyResponse* _this = reinterpret_cast< GetMultipleCustomerBillingKeyResponse* >(object);
  (void)_this;
}
void GetMultipleCustomerBillingKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMultipleCustomerBillingKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMultipleCustomerBillingKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.Clear();
  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMultipleCustomerBillingKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.GetMultipleCustomerBillingKeyResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .subscribe_customers.CustomerBillingKey response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMultipleCustomerBillingKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.GetMultipleCustomerBillingKeyResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .subscribe_customers.CustomerBillingKey response = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_response(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
  return target;
}

size_t GetMultipleCustomerBillingKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .subscribe_customers.CustomerBillingKey response = 3;
  total_size += 1UL * this->_internal_response_size();
  for (const auto& msg : this->response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMultipleCustomerBillingKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMultipleCustomerBillingKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMultipleCustomerBillingKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
    MergeFrom(*source);
  }
}

void GetMultipleCustomerBillingKeyResponse::MergeFrom(const GetMultipleCustomerBillingKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_.MergeFrom(from.response_);
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void GetMultipleCustomerBillingKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMultipleCustomerBillingKeyResponse::CopyFrom(const GetMultipleCustomerBillingKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultipleCustomerBillingKeyResponse::IsInitialized() const {
  return true;
}

void GetMultipleCustomerBillingKeyResponse::InternalSwap(GetMultipleCustomerBillingKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.InternalSwap(&other->response_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMultipleCustomerBillingKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteCustomerBillingKeyRequest::_Internal {
 public:
};

DeleteCustomerBillingKeyRequest::DeleteCustomerBillingKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.DeleteCustomerBillingKeyRequest)
}
DeleteCustomerBillingKeyRequest::DeleteCustomerBillingKeyRequest(const DeleteCustomerBillingKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customer_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_uid().empty()) {
    customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_uid(), 
      GetArena());
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_requester().empty()) {
    requester_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_requester(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.DeleteCustomerBillingKeyRequest)
}

void DeleteCustomerBillingKeyRequest::SharedCtor() {
customer_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
requester_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteCustomerBillingKeyRequest::~DeleteCustomerBillingKeyRequest() {
  // @@protoc_insertion_point(destructor:subscribe_customers.DeleteCustomerBillingKeyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteCustomerBillingKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customer_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requester_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteCustomerBillingKeyRequest::ArenaDtor(void* object) {
  DeleteCustomerBillingKeyRequest* _this = reinterpret_cast< DeleteCustomerBillingKeyRequest* >(object);
  (void)_this;
}
void DeleteCustomerBillingKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCustomerBillingKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteCustomerBillingKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.DeleteCustomerBillingKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_uid_.ClearToEmpty();
  reason_.ClearToEmpty();
  requester_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCustomerBillingKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.DeleteCustomerBillingKeyRequest.customer_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.DeleteCustomerBillingKeyRequest.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string requester = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_requester();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.DeleteCustomerBillingKeyRequest.requester"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCustomerBillingKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.DeleteCustomerBillingKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_uid = 1;
  if (this->customer_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_uid().data(), static_cast<int>(this->_internal_customer_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.DeleteCustomerBillingKeyRequest.customer_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_uid(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.DeleteCustomerBillingKeyRequest.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // string requester = 3;
  if (this->requester().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requester().data(), static_cast<int>(this->_internal_requester().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.DeleteCustomerBillingKeyRequest.requester");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_requester(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.DeleteCustomerBillingKeyRequest)
  return target;
}

size_t DeleteCustomerBillingKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.DeleteCustomerBillingKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customer_uid = 1;
  if (this->customer_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_uid());
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // string requester = 3;
  if (this->requester().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requester());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCustomerBillingKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.DeleteCustomerBillingKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCustomerBillingKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCustomerBillingKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.DeleteCustomerBillingKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.DeleteCustomerBillingKeyRequest)
    MergeFrom(*source);
  }
}

void DeleteCustomerBillingKeyRequest::MergeFrom(const DeleteCustomerBillingKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.DeleteCustomerBillingKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customer_uid().size() > 0) {
    _internal_set_customer_uid(from._internal_customer_uid());
  }
  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.requester().size() > 0) {
    _internal_set_requester(from._internal_requester());
  }
}

void DeleteCustomerBillingKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.DeleteCustomerBillingKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCustomerBillingKeyRequest::CopyFrom(const DeleteCustomerBillingKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.DeleteCustomerBillingKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCustomerBillingKeyRequest::IsInitialized() const {
  return true;
}

void DeleteCustomerBillingKeyRequest::InternalSwap(DeleteCustomerBillingKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customer_uid_.Swap(&other->customer_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requester_.Swap(&other->requester_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCustomerBillingKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteCustomerBillingKeyResponse::_Internal {
 public:
  static const ::subscribe_customers::CustomerBillingKey& response(const DeleteCustomerBillingKeyResponse* msg);
};

const ::subscribe_customers::CustomerBillingKey&
DeleteCustomerBillingKeyResponse::_Internal::response(const DeleteCustomerBillingKeyResponse* msg) {
  return *msg->response_;
}
DeleteCustomerBillingKeyResponse::DeleteCustomerBillingKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.DeleteCustomerBillingKeyResponse)
}
DeleteCustomerBillingKeyResponse::DeleteCustomerBillingKeyResponse(const DeleteCustomerBillingKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  if (from._internal_has_response()) {
    response_ = new ::subscribe_customers::CustomerBillingKey(*from.response_);
  } else {
    response_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.DeleteCustomerBillingKeyResponse)
}

void DeleteCustomerBillingKeyResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&response_)) + sizeof(code_));
}

DeleteCustomerBillingKeyResponse::~DeleteCustomerBillingKeyResponse() {
  // @@protoc_insertion_point(destructor:subscribe_customers.DeleteCustomerBillingKeyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteCustomerBillingKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void DeleteCustomerBillingKeyResponse::ArenaDtor(void* object) {
  DeleteCustomerBillingKeyResponse* _this = reinterpret_cast< DeleteCustomerBillingKeyResponse* >(object);
  (void)_this;
}
void DeleteCustomerBillingKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCustomerBillingKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteCustomerBillingKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.DeleteCustomerBillingKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCustomerBillingKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.DeleteCustomerBillingKeyResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .subscribe_customers.CustomerBillingKey response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCustomerBillingKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.DeleteCustomerBillingKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.DeleteCustomerBillingKeyResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .subscribe_customers.CustomerBillingKey response = 3;
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.DeleteCustomerBillingKeyResponse)
  return target;
}

size_t DeleteCustomerBillingKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.DeleteCustomerBillingKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .subscribe_customers.CustomerBillingKey response = 3;
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCustomerBillingKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.DeleteCustomerBillingKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCustomerBillingKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCustomerBillingKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.DeleteCustomerBillingKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.DeleteCustomerBillingKeyResponse)
    MergeFrom(*source);
  }
}

void DeleteCustomerBillingKeyResponse::MergeFrom(const DeleteCustomerBillingKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.DeleteCustomerBillingKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_response()) {
    _internal_mutable_response()->::subscribe_customers::CustomerBillingKey::MergeFrom(from._internal_response());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void DeleteCustomerBillingKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.DeleteCustomerBillingKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCustomerBillingKeyResponse::CopyFrom(const DeleteCustomerBillingKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.DeleteCustomerBillingKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCustomerBillingKeyResponse::IsInitialized() const {
  return true;
}

void DeleteCustomerBillingKeyResponse::InternalSwap(DeleteCustomerBillingKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteCustomerBillingKeyResponse, code_)
      + sizeof(DeleteCustomerBillingKeyResponse::code_)
      - PROTOBUF_FIELD_OFFSET(DeleteCustomerBillingKeyResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCustomerBillingKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetCustomerBillingKeyRequest::_Internal {
 public:
};

GetCustomerBillingKeyRequest::GetCustomerBillingKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.GetCustomerBillingKeyRequest)
}
GetCustomerBillingKeyRequest::GetCustomerBillingKeyRequest(const GetCustomerBillingKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customer_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_uid().empty()) {
    customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_uid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.GetCustomerBillingKeyRequest)
}

void GetCustomerBillingKeyRequest::SharedCtor() {
customer_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCustomerBillingKeyRequest::~GetCustomerBillingKeyRequest() {
  // @@protoc_insertion_point(destructor:subscribe_customers.GetCustomerBillingKeyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCustomerBillingKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customer_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCustomerBillingKeyRequest::ArenaDtor(void* object) {
  GetCustomerBillingKeyRequest* _this = reinterpret_cast< GetCustomerBillingKeyRequest* >(object);
  (void)_this;
}
void GetCustomerBillingKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCustomerBillingKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCustomerBillingKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.GetCustomerBillingKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCustomerBillingKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.GetCustomerBillingKeyRequest.customer_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCustomerBillingKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.GetCustomerBillingKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_uid = 1;
  if (this->customer_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_uid().data(), static_cast<int>(this->_internal_customer_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.GetCustomerBillingKeyRequest.customer_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.GetCustomerBillingKeyRequest)
  return target;
}

size_t GetCustomerBillingKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.GetCustomerBillingKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customer_uid = 1;
  if (this->customer_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCustomerBillingKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.GetCustomerBillingKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCustomerBillingKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCustomerBillingKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.GetCustomerBillingKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.GetCustomerBillingKeyRequest)
    MergeFrom(*source);
  }
}

void GetCustomerBillingKeyRequest::MergeFrom(const GetCustomerBillingKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.GetCustomerBillingKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customer_uid().size() > 0) {
    _internal_set_customer_uid(from._internal_customer_uid());
  }
}

void GetCustomerBillingKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.GetCustomerBillingKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCustomerBillingKeyRequest::CopyFrom(const GetCustomerBillingKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.GetCustomerBillingKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCustomerBillingKeyRequest::IsInitialized() const {
  return true;
}

void GetCustomerBillingKeyRequest::InternalSwap(GetCustomerBillingKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customer_uid_.Swap(&other->customer_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCustomerBillingKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetCustomerBillingKeyResponse::_Internal {
 public:
  static const ::subscribe_customers::CustomerBillingKey& response(const GetCustomerBillingKeyResponse* msg);
};

const ::subscribe_customers::CustomerBillingKey&
GetCustomerBillingKeyResponse::_Internal::response(const GetCustomerBillingKeyResponse* msg) {
  return *msg->response_;
}
GetCustomerBillingKeyResponse::GetCustomerBillingKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.GetCustomerBillingKeyResponse)
}
GetCustomerBillingKeyResponse::GetCustomerBillingKeyResponse(const GetCustomerBillingKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  if (from._internal_has_response()) {
    response_ = new ::subscribe_customers::CustomerBillingKey(*from.response_);
  } else {
    response_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.GetCustomerBillingKeyResponse)
}

void GetCustomerBillingKeyResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&response_)) + sizeof(code_));
}

GetCustomerBillingKeyResponse::~GetCustomerBillingKeyResponse() {
  // @@protoc_insertion_point(destructor:subscribe_customers.GetCustomerBillingKeyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCustomerBillingKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void GetCustomerBillingKeyResponse::ArenaDtor(void* object) {
  GetCustomerBillingKeyResponse* _this = reinterpret_cast< GetCustomerBillingKeyResponse* >(object);
  (void)_this;
}
void GetCustomerBillingKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCustomerBillingKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCustomerBillingKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.GetCustomerBillingKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCustomerBillingKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.GetCustomerBillingKeyResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .subscribe_customers.CustomerBillingKey response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCustomerBillingKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.GetCustomerBillingKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.GetCustomerBillingKeyResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .subscribe_customers.CustomerBillingKey response = 3;
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.GetCustomerBillingKeyResponse)
  return target;
}

size_t GetCustomerBillingKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.GetCustomerBillingKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .subscribe_customers.CustomerBillingKey response = 3;
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCustomerBillingKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.GetCustomerBillingKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCustomerBillingKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCustomerBillingKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.GetCustomerBillingKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.GetCustomerBillingKeyResponse)
    MergeFrom(*source);
  }
}

void GetCustomerBillingKeyResponse::MergeFrom(const GetCustomerBillingKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.GetCustomerBillingKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_response()) {
    _internal_mutable_response()->::subscribe_customers::CustomerBillingKey::MergeFrom(from._internal_response());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void GetCustomerBillingKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.GetCustomerBillingKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCustomerBillingKeyResponse::CopyFrom(const GetCustomerBillingKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.GetCustomerBillingKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCustomerBillingKeyResponse::IsInitialized() const {
  return true;
}

void GetCustomerBillingKeyResponse::InternalSwap(GetCustomerBillingKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCustomerBillingKeyResponse, code_)
      + sizeof(GetCustomerBillingKeyResponse::code_)
      - PROTOBUF_FIELD_OFFSET(GetCustomerBillingKeyResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCustomerBillingKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertCustomerBillingKeyRequest::_Internal {
 public:
};

InsertCustomerBillingKeyRequest::InsertCustomerBillingKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.InsertCustomerBillingKeyRequest)
}
InsertCustomerBillingKeyRequest::InsertCustomerBillingKeyRequest(const InsertCustomerBillingKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customer_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_uid().empty()) {
    customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_uid(), 
      GetArena());
  }
  pg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pg().empty()) {
    pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pg(), 
      GetArena());
  }
  card_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_card_number().empty()) {
    card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_card_number(), 
      GetArena());
  }
  expiry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expiry().empty()) {
    expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_expiry(), 
      GetArena());
  }
  birth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_birth().empty()) {
    birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_birth(), 
      GetArena());
  }
  pwd_2digit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd_2digit().empty()) {
    pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwd_2digit(), 
      GetArena());
  }
  customer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_name().empty()) {
    customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_name(), 
      GetArena());
  }
  customer_tel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_tel().empty()) {
    customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_tel(), 
      GetArena());
  }
  customer_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_email().empty()) {
    customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_email(), 
      GetArena());
  }
  customer_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_addr().empty()) {
    customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_addr(), 
      GetArena());
  }
  customer_postcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_postcode().empty()) {
    customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_postcode(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.InsertCustomerBillingKeyRequest)
}

void InsertCustomerBillingKeyRequest::SharedCtor() {
customer_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
card_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
expiry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
birth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pwd_2digit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_tel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
customer_postcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InsertCustomerBillingKeyRequest::~InsertCustomerBillingKeyRequest() {
  // @@protoc_insertion_point(destructor:subscribe_customers.InsertCustomerBillingKeyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertCustomerBillingKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customer_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  card_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  birth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_2digit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_tel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_postcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsertCustomerBillingKeyRequest::ArenaDtor(void* object) {
  InsertCustomerBillingKeyRequest* _this = reinterpret_cast< InsertCustomerBillingKeyRequest* >(object);
  (void)_this;
}
void InsertCustomerBillingKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertCustomerBillingKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertCustomerBillingKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.InsertCustomerBillingKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_uid_.ClearToEmpty();
  pg_.ClearToEmpty();
  card_number_.ClearToEmpty();
  expiry_.ClearToEmpty();
  birth_.ClearToEmpty();
  pwd_2digit_.ClearToEmpty();
  customer_name_.ClearToEmpty();
  customer_tel_.ClearToEmpty();
  customer_email_.ClearToEmpty();
  customer_addr_.ClearToEmpty();
  customer_postcode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertCustomerBillingKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.customer_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.pg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string card_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_card_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.card_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expiry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_expiry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.expiry"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string birth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_birth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.birth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pwd_2digit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_pwd_2digit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.pwd_2digit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_customer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.customer_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_tel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_customer_tel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.customer_tel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_email = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_customer_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.customer_email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_addr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_customer_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.customer_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_postcode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_customer_postcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyRequest.customer_postcode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertCustomerBillingKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.InsertCustomerBillingKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_uid = 1;
  if (this->customer_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_uid().data(), static_cast<int>(this->_internal_customer_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.customer_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_uid(), target);
  }

  // string pg = 2;
  if (this->pg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pg().data(), static_cast<int>(this->_internal_pg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.pg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pg(), target);
  }

  // string card_number = 3;
  if (this->card_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_card_number().data(), static_cast<int>(this->_internal_card_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.card_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_card_number(), target);
  }

  // string expiry = 4;
  if (this->expiry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expiry().data(), static_cast<int>(this->_internal_expiry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.expiry");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_expiry(), target);
  }

  // string birth = 5;
  if (this->birth().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_birth().data(), static_cast<int>(this->_internal_birth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.birth");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_birth(), target);
  }

  // string pwd_2digit = 6;
  if (this->pwd_2digit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd_2digit().data(), static_cast<int>(this->_internal_pwd_2digit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.pwd_2digit");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pwd_2digit(), target);
  }

  // string customer_name = 7;
  if (this->customer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_name().data(), static_cast<int>(this->_internal_customer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.customer_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_customer_name(), target);
  }

  // string customer_tel = 8;
  if (this->customer_tel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_tel().data(), static_cast<int>(this->_internal_customer_tel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.customer_tel");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_customer_tel(), target);
  }

  // string customer_email = 9;
  if (this->customer_email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_email().data(), static_cast<int>(this->_internal_customer_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.customer_email");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_customer_email(), target);
  }

  // string customer_addr = 10;
  if (this->customer_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_addr().data(), static_cast<int>(this->_internal_customer_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.customer_addr");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_customer_addr(), target);
  }

  // string customer_postcode = 11;
  if (this->customer_postcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_postcode().data(), static_cast<int>(this->_internal_customer_postcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyRequest.customer_postcode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_customer_postcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.InsertCustomerBillingKeyRequest)
  return target;
}

size_t InsertCustomerBillingKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.InsertCustomerBillingKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customer_uid = 1;
  if (this->customer_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_uid());
  }

  // string pg = 2;
  if (this->pg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pg());
  }

  // string card_number = 3;
  if (this->card_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_card_number());
  }

  // string expiry = 4;
  if (this->expiry().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expiry());
  }

  // string birth = 5;
  if (this->birth().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_birth());
  }

  // string pwd_2digit = 6;
  if (this->pwd_2digit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd_2digit());
  }

  // string customer_name = 7;
  if (this->customer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_name());
  }

  // string customer_tel = 8;
  if (this->customer_tel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_tel());
  }

  // string customer_email = 9;
  if (this->customer_email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_email());
  }

  // string customer_addr = 10;
  if (this->customer_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_addr());
  }

  // string customer_postcode = 11;
  if (this->customer_postcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_postcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertCustomerBillingKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.InsertCustomerBillingKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertCustomerBillingKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertCustomerBillingKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.InsertCustomerBillingKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.InsertCustomerBillingKeyRequest)
    MergeFrom(*source);
  }
}

void InsertCustomerBillingKeyRequest::MergeFrom(const InsertCustomerBillingKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.InsertCustomerBillingKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customer_uid().size() > 0) {
    _internal_set_customer_uid(from._internal_customer_uid());
  }
  if (from.pg().size() > 0) {
    _internal_set_pg(from._internal_pg());
  }
  if (from.card_number().size() > 0) {
    _internal_set_card_number(from._internal_card_number());
  }
  if (from.expiry().size() > 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.birth().size() > 0) {
    _internal_set_birth(from._internal_birth());
  }
  if (from.pwd_2digit().size() > 0) {
    _internal_set_pwd_2digit(from._internal_pwd_2digit());
  }
  if (from.customer_name().size() > 0) {
    _internal_set_customer_name(from._internal_customer_name());
  }
  if (from.customer_tel().size() > 0) {
    _internal_set_customer_tel(from._internal_customer_tel());
  }
  if (from.customer_email().size() > 0) {
    _internal_set_customer_email(from._internal_customer_email());
  }
  if (from.customer_addr().size() > 0) {
    _internal_set_customer_addr(from._internal_customer_addr());
  }
  if (from.customer_postcode().size() > 0) {
    _internal_set_customer_postcode(from._internal_customer_postcode());
  }
}

void InsertCustomerBillingKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.InsertCustomerBillingKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertCustomerBillingKeyRequest::CopyFrom(const InsertCustomerBillingKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.InsertCustomerBillingKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertCustomerBillingKeyRequest::IsInitialized() const {
  return true;
}

void InsertCustomerBillingKeyRequest::InternalSwap(InsertCustomerBillingKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customer_uid_.Swap(&other->customer_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pg_.Swap(&other->pg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  card_number_.Swap(&other->card_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expiry_.Swap(&other->expiry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  birth_.Swap(&other->birth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pwd_2digit_.Swap(&other->pwd_2digit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_name_.Swap(&other->customer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_tel_.Swap(&other->customer_tel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_email_.Swap(&other->customer_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_addr_.Swap(&other->customer_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_postcode_.Swap(&other->customer_postcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertCustomerBillingKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertCustomerBillingKeyResponse::_Internal {
 public:
  static const ::subscribe_customers::CustomerBillingKey& response(const InsertCustomerBillingKeyResponse* msg);
};

const ::subscribe_customers::CustomerBillingKey&
InsertCustomerBillingKeyResponse::_Internal::response(const InsertCustomerBillingKeyResponse* msg) {
  return *msg->response_;
}
InsertCustomerBillingKeyResponse::InsertCustomerBillingKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.InsertCustomerBillingKeyResponse)
}
InsertCustomerBillingKeyResponse::InsertCustomerBillingKeyResponse(const InsertCustomerBillingKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  if (from._internal_has_response()) {
    response_ = new ::subscribe_customers::CustomerBillingKey(*from.response_);
  } else {
    response_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.InsertCustomerBillingKeyResponse)
}

void InsertCustomerBillingKeyResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&response_)) + sizeof(code_));
}

InsertCustomerBillingKeyResponse::~InsertCustomerBillingKeyResponse() {
  // @@protoc_insertion_point(destructor:subscribe_customers.InsertCustomerBillingKeyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertCustomerBillingKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void InsertCustomerBillingKeyResponse::ArenaDtor(void* object) {
  InsertCustomerBillingKeyResponse* _this = reinterpret_cast< InsertCustomerBillingKeyResponse* >(object);
  (void)_this;
}
void InsertCustomerBillingKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertCustomerBillingKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertCustomerBillingKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.InsertCustomerBillingKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertCustomerBillingKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.InsertCustomerBillingKeyResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .subscribe_customers.CustomerBillingKey response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertCustomerBillingKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.InsertCustomerBillingKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.InsertCustomerBillingKeyResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .subscribe_customers.CustomerBillingKey response = 3;
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.InsertCustomerBillingKeyResponse)
  return target;
}

size_t InsertCustomerBillingKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.InsertCustomerBillingKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .subscribe_customers.CustomerBillingKey response = 3;
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertCustomerBillingKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.InsertCustomerBillingKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertCustomerBillingKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertCustomerBillingKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.InsertCustomerBillingKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.InsertCustomerBillingKeyResponse)
    MergeFrom(*source);
  }
}

void InsertCustomerBillingKeyResponse::MergeFrom(const InsertCustomerBillingKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.InsertCustomerBillingKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_response()) {
    _internal_mutable_response()->::subscribe_customers::CustomerBillingKey::MergeFrom(from._internal_response());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void InsertCustomerBillingKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.InsertCustomerBillingKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertCustomerBillingKeyResponse::CopyFrom(const InsertCustomerBillingKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.InsertCustomerBillingKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertCustomerBillingKeyResponse::IsInitialized() const {
  return true;
}

void InsertCustomerBillingKeyResponse::InternalSwap(InsertCustomerBillingKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertCustomerBillingKeyResponse, code_)
      + sizeof(InsertCustomerBillingKeyResponse::code_)
      - PROTOBUF_FIELD_OFFSET(InsertCustomerBillingKeyResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertCustomerBillingKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetPaidByBillingKeyListRequest::_Internal {
 public:
};

GetPaidByBillingKeyListRequest::GetPaidByBillingKeyListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.GetPaidByBillingKeyListRequest)
}
GetPaidByBillingKeyListRequest::GetPaidByBillingKeyListRequest(const GetPaidByBillingKeyListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customer_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_uid().empty()) {
    customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_uid(), 
      GetArena());
  }
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.GetPaidByBillingKeyListRequest)
}

void GetPaidByBillingKeyListRequest::SharedCtor() {
customer_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
page_ = 0;
}

GetPaidByBillingKeyListRequest::~GetPaidByBillingKeyListRequest() {
  // @@protoc_insertion_point(destructor:subscribe_customers.GetPaidByBillingKeyListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPaidByBillingKeyListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customer_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPaidByBillingKeyListRequest::ArenaDtor(void* object) {
  GetPaidByBillingKeyListRequest* _this = reinterpret_cast< GetPaidByBillingKeyListRequest* >(object);
  (void)_this;
}
void GetPaidByBillingKeyListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPaidByBillingKeyListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPaidByBillingKeyListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.GetPaidByBillingKeyListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_uid_.ClearToEmpty();
  page_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPaidByBillingKeyListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.GetPaidByBillingKeyListRequest.customer_uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPaidByBillingKeyListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.GetPaidByBillingKeyListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_uid = 1;
  if (this->customer_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_uid().data(), static_cast<int>(this->_internal_customer_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.GetPaidByBillingKeyListRequest.customer_uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_uid(), target);
  }

  // int32 page = 2;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.GetPaidByBillingKeyListRequest)
  return target;
}

size_t GetPaidByBillingKeyListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.GetPaidByBillingKeyListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customer_uid = 1;
  if (this->customer_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_uid());
  }

  // int32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPaidByBillingKeyListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.GetPaidByBillingKeyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPaidByBillingKeyListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPaidByBillingKeyListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.GetPaidByBillingKeyListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.GetPaidByBillingKeyListRequest)
    MergeFrom(*source);
  }
}

void GetPaidByBillingKeyListRequest::MergeFrom(const GetPaidByBillingKeyListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.GetPaidByBillingKeyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customer_uid().size() > 0) {
    _internal_set_customer_uid(from._internal_customer_uid());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
}

void GetPaidByBillingKeyListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.GetPaidByBillingKeyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPaidByBillingKeyListRequest::CopyFrom(const GetPaidByBillingKeyListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.GetPaidByBillingKeyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPaidByBillingKeyListRequest::IsInitialized() const {
  return true;
}

void GetPaidByBillingKeyListRequest::InternalSwap(GetPaidByBillingKeyListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customer_uid_.Swap(&other->customer_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPaidByBillingKeyListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NestedGetPaidByBillingKeyListData::_Internal {
 public:
};

void NestedGetPaidByBillingKeyListData::clear_list() {
  list_.Clear();
}
NestedGetPaidByBillingKeyListData::NestedGetPaidByBillingKeyListData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.NestedGetPaidByBillingKeyListData)
}
NestedGetPaidByBillingKeyListData::NestedGetPaidByBillingKeyListData(const NestedGetPaidByBillingKeyListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_) -
    reinterpret_cast<char*>(&total_)) + sizeof(next_));
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.NestedGetPaidByBillingKeyListData)
}

void NestedGetPaidByBillingKeyListData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_) -
    reinterpret_cast<char*>(&total_)) + sizeof(next_));
}

NestedGetPaidByBillingKeyListData::~NestedGetPaidByBillingKeyListData() {
  // @@protoc_insertion_point(destructor:subscribe_customers.NestedGetPaidByBillingKeyListData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NestedGetPaidByBillingKeyListData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NestedGetPaidByBillingKeyListData::ArenaDtor(void* object) {
  NestedGetPaidByBillingKeyListData* _this = reinterpret_cast< NestedGetPaidByBillingKeyListData* >(object);
  (void)_this;
}
void NestedGetPaidByBillingKeyListData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NestedGetPaidByBillingKeyListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NestedGetPaidByBillingKeyListData::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.NestedGetPaidByBillingKeyListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_) -
      reinterpret_cast<char*>(&total_)) + sizeof(next_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NestedGetPaidByBillingKeyListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 previous = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          previous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 next = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .payment.Payment list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NestedGetPaidByBillingKeyListData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.NestedGetPaidByBillingKeyListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total = 1;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total(), target);
  }

  // int32 previous = 2;
  if (this->previous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_previous(), target);
  }

  // int32 next = 3;
  if (this->next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_next(), target);
  }

  // repeated .payment.Payment list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.NestedGetPaidByBillingKeyListData)
  return target;
}

size_t NestedGetPaidByBillingKeyListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.NestedGetPaidByBillingKeyListData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .payment.Payment list = 4;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 previous = 2;
  if (this->previous() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_previous());
  }

  // int32 next = 3;
  if (this->next() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_next());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NestedGetPaidByBillingKeyListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.NestedGetPaidByBillingKeyListData)
  GOOGLE_DCHECK_NE(&from, this);
  const NestedGetPaidByBillingKeyListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NestedGetPaidByBillingKeyListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.NestedGetPaidByBillingKeyListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.NestedGetPaidByBillingKeyListData)
    MergeFrom(*source);
  }
}

void NestedGetPaidByBillingKeyListData::MergeFrom(const NestedGetPaidByBillingKeyListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.NestedGetPaidByBillingKeyListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.previous() != 0) {
    _internal_set_previous(from._internal_previous());
  }
  if (from.next() != 0) {
    _internal_set_next(from._internal_next());
  }
}

void NestedGetPaidByBillingKeyListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.NestedGetPaidByBillingKeyListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedGetPaidByBillingKeyListData::CopyFrom(const NestedGetPaidByBillingKeyListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.NestedGetPaidByBillingKeyListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedGetPaidByBillingKeyListData::IsInitialized() const {
  return true;
}

void NestedGetPaidByBillingKeyListData::InternalSwap(NestedGetPaidByBillingKeyListData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NestedGetPaidByBillingKeyListData, next_)
      + sizeof(NestedGetPaidByBillingKeyListData::next_)
      - PROTOBUF_FIELD_OFFSET(NestedGetPaidByBillingKeyListData, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedGetPaidByBillingKeyListData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetPaidByBillingKeyListResponse::_Internal {
 public:
  static const ::subscribe_customers::NestedGetPaidByBillingKeyListData& response(const GetPaidByBillingKeyListResponse* msg);
};

const ::subscribe_customers::NestedGetPaidByBillingKeyListData&
GetPaidByBillingKeyListResponse::_Internal::response(const GetPaidByBillingKeyListResponse* msg) {
  return *msg->response_;
}
GetPaidByBillingKeyListResponse::GetPaidByBillingKeyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:subscribe_customers.GetPaidByBillingKeyListResponse)
}
GetPaidByBillingKeyListResponse::GetPaidByBillingKeyListResponse(const GetPaidByBillingKeyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  if (from._internal_has_response()) {
    response_ = new ::subscribe_customers::NestedGetPaidByBillingKeyListData(*from.response_);
  } else {
    response_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:subscribe_customers.GetPaidByBillingKeyListResponse)
}

void GetPaidByBillingKeyListResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&response_)) + sizeof(code_));
}

GetPaidByBillingKeyListResponse::~GetPaidByBillingKeyListResponse() {
  // @@protoc_insertion_point(destructor:subscribe_customers.GetPaidByBillingKeyListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPaidByBillingKeyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void GetPaidByBillingKeyListResponse::ArenaDtor(void* object) {
  GetPaidByBillingKeyListResponse* _this = reinterpret_cast< GetPaidByBillingKeyListResponse* >(object);
  (void)_this;
}
void GetPaidByBillingKeyListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPaidByBillingKeyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPaidByBillingKeyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:subscribe_customers.GetPaidByBillingKeyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPaidByBillingKeyListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "subscribe_customers.GetPaidByBillingKeyListResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .subscribe_customers.NestedGetPaidByBillingKeyListData response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPaidByBillingKeyListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:subscribe_customers.GetPaidByBillingKeyListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "subscribe_customers.GetPaidByBillingKeyListResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .subscribe_customers.NestedGetPaidByBillingKeyListData response = 3;
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:subscribe_customers.GetPaidByBillingKeyListResponse)
  return target;
}

size_t GetPaidByBillingKeyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:subscribe_customers.GetPaidByBillingKeyListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .subscribe_customers.NestedGetPaidByBillingKeyListData response = 3;
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPaidByBillingKeyListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:subscribe_customers.GetPaidByBillingKeyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPaidByBillingKeyListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPaidByBillingKeyListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:subscribe_customers.GetPaidByBillingKeyListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:subscribe_customers.GetPaidByBillingKeyListResponse)
    MergeFrom(*source);
  }
}

void GetPaidByBillingKeyListResponse::MergeFrom(const GetPaidByBillingKeyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:subscribe_customers.GetPaidByBillingKeyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_response()) {
    _internal_mutable_response()->::subscribe_customers::NestedGetPaidByBillingKeyListData::MergeFrom(from._internal_response());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void GetPaidByBillingKeyListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:subscribe_customers.GetPaidByBillingKeyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPaidByBillingKeyListResponse::CopyFrom(const GetPaidByBillingKeyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:subscribe_customers.GetPaidByBillingKeyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPaidByBillingKeyListResponse::IsInitialized() const {
  return true;
}

void GetPaidByBillingKeyListResponse::InternalSwap(GetPaidByBillingKeyListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPaidByBillingKeyListResponse, code_)
      + sizeof(GetPaidByBillingKeyListResponse::code_)
      - PROTOBUF_FIELD_OFFSET(GetPaidByBillingKeyListResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPaidByBillingKeyListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace subscribe_customers
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::subscribe_customers::CustomerBillingKey* Arena::CreateMaybeMessage< ::subscribe_customers::CustomerBillingKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::CustomerBillingKey >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::GetMultipleCustomerBillingKeyRequest* Arena::CreateMaybeMessage< ::subscribe_customers::GetMultipleCustomerBillingKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::GetMultipleCustomerBillingKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::GetMultipleCustomerBillingKeyResponse* Arena::CreateMaybeMessage< ::subscribe_customers::GetMultipleCustomerBillingKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::GetMultipleCustomerBillingKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::DeleteCustomerBillingKeyRequest* Arena::CreateMaybeMessage< ::subscribe_customers::DeleteCustomerBillingKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::DeleteCustomerBillingKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::DeleteCustomerBillingKeyResponse* Arena::CreateMaybeMessage< ::subscribe_customers::DeleteCustomerBillingKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::DeleteCustomerBillingKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::GetCustomerBillingKeyRequest* Arena::CreateMaybeMessage< ::subscribe_customers::GetCustomerBillingKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::GetCustomerBillingKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::GetCustomerBillingKeyResponse* Arena::CreateMaybeMessage< ::subscribe_customers::GetCustomerBillingKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::GetCustomerBillingKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::InsertCustomerBillingKeyRequest* Arena::CreateMaybeMessage< ::subscribe_customers::InsertCustomerBillingKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::InsertCustomerBillingKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::InsertCustomerBillingKeyResponse* Arena::CreateMaybeMessage< ::subscribe_customers::InsertCustomerBillingKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::InsertCustomerBillingKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::GetPaidByBillingKeyListRequest* Arena::CreateMaybeMessage< ::subscribe_customers::GetPaidByBillingKeyListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::GetPaidByBillingKeyListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::NestedGetPaidByBillingKeyListData* Arena::CreateMaybeMessage< ::subscribe_customers::NestedGetPaidByBillingKeyListData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::NestedGetPaidByBillingKeyListData >(arena);
}
template<> PROTOBUF_NOINLINE ::subscribe_customers::GetPaidByBillingKeyListResponse* Arena::CreateMaybeMessage< ::subscribe_customers::GetPaidByBillingKeyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::subscribe_customers::GetPaidByBillingKeyListResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
