// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/subscribe_customers/subscribe_customers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "v1/payment/payment.pb.h"
#include "v1/subscribe/subscribe.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
namespace subscribe_customers {
class CustomerBillingKey;
class CustomerBillingKeyDefaultTypeInternal;
extern CustomerBillingKeyDefaultTypeInternal _CustomerBillingKey_default_instance_;
class DeleteCustomerBillingKeyRequest;
class DeleteCustomerBillingKeyRequestDefaultTypeInternal;
extern DeleteCustomerBillingKeyRequestDefaultTypeInternal _DeleteCustomerBillingKeyRequest_default_instance_;
class DeleteCustomerBillingKeyResponse;
class DeleteCustomerBillingKeyResponseDefaultTypeInternal;
extern DeleteCustomerBillingKeyResponseDefaultTypeInternal _DeleteCustomerBillingKeyResponse_default_instance_;
class GetCustomerBillingKeyRequest;
class GetCustomerBillingKeyRequestDefaultTypeInternal;
extern GetCustomerBillingKeyRequestDefaultTypeInternal _GetCustomerBillingKeyRequest_default_instance_;
class GetCustomerBillingKeyResponse;
class GetCustomerBillingKeyResponseDefaultTypeInternal;
extern GetCustomerBillingKeyResponseDefaultTypeInternal _GetCustomerBillingKeyResponse_default_instance_;
class GetMultipleCustomerBillingKeyRequest;
class GetMultipleCustomerBillingKeyRequestDefaultTypeInternal;
extern GetMultipleCustomerBillingKeyRequestDefaultTypeInternal _GetMultipleCustomerBillingKeyRequest_default_instance_;
class GetMultipleCustomerBillingKeyResponse;
class GetMultipleCustomerBillingKeyResponseDefaultTypeInternal;
extern GetMultipleCustomerBillingKeyResponseDefaultTypeInternal _GetMultipleCustomerBillingKeyResponse_default_instance_;
class GetPaidByBillingKeyListRequest;
class GetPaidByBillingKeyListRequestDefaultTypeInternal;
extern GetPaidByBillingKeyListRequestDefaultTypeInternal _GetPaidByBillingKeyListRequest_default_instance_;
class GetPaidByBillingKeyListResponse;
class GetPaidByBillingKeyListResponseDefaultTypeInternal;
extern GetPaidByBillingKeyListResponseDefaultTypeInternal _GetPaidByBillingKeyListResponse_default_instance_;
class InsertCustomerBillingKeyRequest;
class InsertCustomerBillingKeyRequestDefaultTypeInternal;
extern InsertCustomerBillingKeyRequestDefaultTypeInternal _InsertCustomerBillingKeyRequest_default_instance_;
class InsertCustomerBillingKeyResponse;
class InsertCustomerBillingKeyResponseDefaultTypeInternal;
extern InsertCustomerBillingKeyResponseDefaultTypeInternal _InsertCustomerBillingKeyResponse_default_instance_;
class NestedGetPaidByBillingKeyListData;
class NestedGetPaidByBillingKeyListDataDefaultTypeInternal;
extern NestedGetPaidByBillingKeyListDataDefaultTypeInternal _NestedGetPaidByBillingKeyListData_default_instance_;
}  // namespace subscribe_customers
PROTOBUF_NAMESPACE_OPEN
template<> ::subscribe_customers::CustomerBillingKey* Arena::CreateMaybeMessage<::subscribe_customers::CustomerBillingKey>(Arena*);
template<> ::subscribe_customers::DeleteCustomerBillingKeyRequest* Arena::CreateMaybeMessage<::subscribe_customers::DeleteCustomerBillingKeyRequest>(Arena*);
template<> ::subscribe_customers::DeleteCustomerBillingKeyResponse* Arena::CreateMaybeMessage<::subscribe_customers::DeleteCustomerBillingKeyResponse>(Arena*);
template<> ::subscribe_customers::GetCustomerBillingKeyRequest* Arena::CreateMaybeMessage<::subscribe_customers::GetCustomerBillingKeyRequest>(Arena*);
template<> ::subscribe_customers::GetCustomerBillingKeyResponse* Arena::CreateMaybeMessage<::subscribe_customers::GetCustomerBillingKeyResponse>(Arena*);
template<> ::subscribe_customers::GetMultipleCustomerBillingKeyRequest* Arena::CreateMaybeMessage<::subscribe_customers::GetMultipleCustomerBillingKeyRequest>(Arena*);
template<> ::subscribe_customers::GetMultipleCustomerBillingKeyResponse* Arena::CreateMaybeMessage<::subscribe_customers::GetMultipleCustomerBillingKeyResponse>(Arena*);
template<> ::subscribe_customers::GetPaidByBillingKeyListRequest* Arena::CreateMaybeMessage<::subscribe_customers::GetPaidByBillingKeyListRequest>(Arena*);
template<> ::subscribe_customers::GetPaidByBillingKeyListResponse* Arena::CreateMaybeMessage<::subscribe_customers::GetPaidByBillingKeyListResponse>(Arena*);
template<> ::subscribe_customers::InsertCustomerBillingKeyRequest* Arena::CreateMaybeMessage<::subscribe_customers::InsertCustomerBillingKeyRequest>(Arena*);
template<> ::subscribe_customers::InsertCustomerBillingKeyResponse* Arena::CreateMaybeMessage<::subscribe_customers::InsertCustomerBillingKeyResponse>(Arena*);
template<> ::subscribe_customers::NestedGetPaidByBillingKeyListData* Arena::CreateMaybeMessage<::subscribe_customers::NestedGetPaidByBillingKeyListData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace subscribe_customers {

// ===================================================================

class CustomerBillingKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.CustomerBillingKey) */ {
 public:
  inline CustomerBillingKey() : CustomerBillingKey(nullptr) {}
  virtual ~CustomerBillingKey();

  CustomerBillingKey(const CustomerBillingKey& from);
  CustomerBillingKey(CustomerBillingKey&& from) noexcept
    : CustomerBillingKey() {
    *this = ::std::move(from);
  }

  inline CustomerBillingKey& operator=(const CustomerBillingKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerBillingKey& operator=(CustomerBillingKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerBillingKey& default_instance();

  static inline const CustomerBillingKey* internal_default_instance() {
    return reinterpret_cast<const CustomerBillingKey*>(
               &_CustomerBillingKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CustomerBillingKey& a, CustomerBillingKey& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerBillingKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerBillingKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerBillingKey* New() const final {
    return CreateMaybeMessage<CustomerBillingKey>(nullptr);
  }

  CustomerBillingKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerBillingKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerBillingKey& from);
  void MergeFrom(const CustomerBillingKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerBillingKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.CustomerBillingKey";
  }
  protected:
  explicit CustomerBillingKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardCodeFieldNumber = 1,
    kCardNameFieldNumber = 2,
    kCardNumberFieldNumber = 3,
    kCustomerAddrFieldNumber = 5,
    kCustomerEmailFieldNumber = 6,
    kCustomerNameFieldNumber = 7,
    kCustomerPostcodeFieldNumber = 8,
    kCustomerTelFieldNumber = 9,
    kCustomerUidFieldNumber = 10,
    kPgIdFieldNumber = 12,
    kPgProviderFieldNumber = 13,
    kCardTypeFieldNumber = 4,
    kInsertedFieldNumber = 11,
    kUpdatedFieldNumber = 14,
  };
  // string card_code = 1;
  void clear_card_code();
  const std::string& card_code() const;
  void set_card_code(const std::string& value);
  void set_card_code(std::string&& value);
  void set_card_code(const char* value);
  void set_card_code(const char* value, size_t size);
  std::string* mutable_card_code();
  std::string* release_card_code();
  void set_allocated_card_code(std::string* card_code);
  private:
  const std::string& _internal_card_code() const;
  void _internal_set_card_code(const std::string& value);
  std::string* _internal_mutable_card_code();
  public:

  // string card_name = 2;
  void clear_card_name();
  const std::string& card_name() const;
  void set_card_name(const std::string& value);
  void set_card_name(std::string&& value);
  void set_card_name(const char* value);
  void set_card_name(const char* value, size_t size);
  std::string* mutable_card_name();
  std::string* release_card_name();
  void set_allocated_card_name(std::string* card_name);
  private:
  const std::string& _internal_card_name() const;
  void _internal_set_card_name(const std::string& value);
  std::string* _internal_mutable_card_name();
  public:

  // string card_number = 3;
  void clear_card_number();
  const std::string& card_number() const;
  void set_card_number(const std::string& value);
  void set_card_number(std::string&& value);
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  std::string* mutable_card_number();
  std::string* release_card_number();
  void set_allocated_card_number(std::string* card_number);
  private:
  const std::string& _internal_card_number() const;
  void _internal_set_card_number(const std::string& value);
  std::string* _internal_mutable_card_number();
  public:

  // string customer_addr = 5;
  void clear_customer_addr();
  const std::string& customer_addr() const;
  void set_customer_addr(const std::string& value);
  void set_customer_addr(std::string&& value);
  void set_customer_addr(const char* value);
  void set_customer_addr(const char* value, size_t size);
  std::string* mutable_customer_addr();
  std::string* release_customer_addr();
  void set_allocated_customer_addr(std::string* customer_addr);
  private:
  const std::string& _internal_customer_addr() const;
  void _internal_set_customer_addr(const std::string& value);
  std::string* _internal_mutable_customer_addr();
  public:

  // string customer_email = 6;
  void clear_customer_email();
  const std::string& customer_email() const;
  void set_customer_email(const std::string& value);
  void set_customer_email(std::string&& value);
  void set_customer_email(const char* value);
  void set_customer_email(const char* value, size_t size);
  std::string* mutable_customer_email();
  std::string* release_customer_email();
  void set_allocated_customer_email(std::string* customer_email);
  private:
  const std::string& _internal_customer_email() const;
  void _internal_set_customer_email(const std::string& value);
  std::string* _internal_mutable_customer_email();
  public:

  // string customer_name = 7;
  void clear_customer_name();
  const std::string& customer_name() const;
  void set_customer_name(const std::string& value);
  void set_customer_name(std::string&& value);
  void set_customer_name(const char* value);
  void set_customer_name(const char* value, size_t size);
  std::string* mutable_customer_name();
  std::string* release_customer_name();
  void set_allocated_customer_name(std::string* customer_name);
  private:
  const std::string& _internal_customer_name() const;
  void _internal_set_customer_name(const std::string& value);
  std::string* _internal_mutable_customer_name();
  public:

  // string customer_postcode = 8;
  void clear_customer_postcode();
  const std::string& customer_postcode() const;
  void set_customer_postcode(const std::string& value);
  void set_customer_postcode(std::string&& value);
  void set_customer_postcode(const char* value);
  void set_customer_postcode(const char* value, size_t size);
  std::string* mutable_customer_postcode();
  std::string* release_customer_postcode();
  void set_allocated_customer_postcode(std::string* customer_postcode);
  private:
  const std::string& _internal_customer_postcode() const;
  void _internal_set_customer_postcode(const std::string& value);
  std::string* _internal_mutable_customer_postcode();
  public:

  // string customer_tel = 9;
  void clear_customer_tel();
  const std::string& customer_tel() const;
  void set_customer_tel(const std::string& value);
  void set_customer_tel(std::string&& value);
  void set_customer_tel(const char* value);
  void set_customer_tel(const char* value, size_t size);
  std::string* mutable_customer_tel();
  std::string* release_customer_tel();
  void set_allocated_customer_tel(std::string* customer_tel);
  private:
  const std::string& _internal_customer_tel() const;
  void _internal_set_customer_tel(const std::string& value);
  std::string* _internal_mutable_customer_tel();
  public:

  // string customer_uid = 10;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // string pg_id = 12;
  void clear_pg_id();
  const std::string& pg_id() const;
  void set_pg_id(const std::string& value);
  void set_pg_id(std::string&& value);
  void set_pg_id(const char* value);
  void set_pg_id(const char* value, size_t size);
  std::string* mutable_pg_id();
  std::string* release_pg_id();
  void set_allocated_pg_id(std::string* pg_id);
  private:
  const std::string& _internal_pg_id() const;
  void _internal_set_pg_id(const std::string& value);
  std::string* _internal_mutable_pg_id();
  public:

  // string pg_provider = 13;
  void clear_pg_provider();
  const std::string& pg_provider() const;
  void set_pg_provider(const std::string& value);
  void set_pg_provider(std::string&& value);
  void set_pg_provider(const char* value);
  void set_pg_provider(const char* value, size_t size);
  std::string* mutable_pg_provider();
  std::string* release_pg_provider();
  void set_allocated_pg_provider(std::string* pg_provider);
  private:
  const std::string& _internal_pg_provider() const;
  void _internal_set_pg_provider(const std::string& value);
  std::string* _internal_mutable_pg_provider();
  public:

  // int32 card_type = 4;
  void clear_card_type();
  ::PROTOBUF_NAMESPACE_ID::int32 card_type() const;
  void set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_card_type() const;
  void _internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inserted = 11;
  void clear_inserted();
  ::PROTOBUF_NAMESPACE_ID::int32 inserted() const;
  void set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inserted() const;
  void _internal_set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 updated = 14;
  void clear_updated();
  ::PROTOBUF_NAMESPACE_ID::int32 updated() const;
  void set_updated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_updated() const;
  void _internal_set_updated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.CustomerBillingKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_postcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_provider_;
  ::PROTOBUF_NAMESPACE_ID::int32 card_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 inserted_;
  ::PROTOBUF_NAMESPACE_ID::int32 updated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class GetMultipleCustomerBillingKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.GetMultipleCustomerBillingKeyRequest) */ {
 public:
  inline GetMultipleCustomerBillingKeyRequest() : GetMultipleCustomerBillingKeyRequest(nullptr) {}
  virtual ~GetMultipleCustomerBillingKeyRequest();

  GetMultipleCustomerBillingKeyRequest(const GetMultipleCustomerBillingKeyRequest& from);
  GetMultipleCustomerBillingKeyRequest(GetMultipleCustomerBillingKeyRequest&& from) noexcept
    : GetMultipleCustomerBillingKeyRequest() {
    *this = ::std::move(from);
  }

  inline GetMultipleCustomerBillingKeyRequest& operator=(const GetMultipleCustomerBillingKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMultipleCustomerBillingKeyRequest& operator=(GetMultipleCustomerBillingKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMultipleCustomerBillingKeyRequest& default_instance();

  static inline const GetMultipleCustomerBillingKeyRequest* internal_default_instance() {
    return reinterpret_cast<const GetMultipleCustomerBillingKeyRequest*>(
               &_GetMultipleCustomerBillingKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetMultipleCustomerBillingKeyRequest& a, GetMultipleCustomerBillingKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMultipleCustomerBillingKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMultipleCustomerBillingKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMultipleCustomerBillingKeyRequest* New() const final {
    return CreateMaybeMessage<GetMultipleCustomerBillingKeyRequest>(nullptr);
  }

  GetMultipleCustomerBillingKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMultipleCustomerBillingKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMultipleCustomerBillingKeyRequest& from);
  void MergeFrom(const GetMultipleCustomerBillingKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMultipleCustomerBillingKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.GetMultipleCustomerBillingKeyRequest";
  }
  protected:
  explicit GetMultipleCustomerBillingKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerUidFieldNumber = 1,
  };
  // repeated string customer_uid = 1;
  int customer_uid_size() const;
  private:
  int _internal_customer_uid_size() const;
  public:
  void clear_customer_uid();
  const std::string& customer_uid(int index) const;
  std::string* mutable_customer_uid(int index);
  void set_customer_uid(int index, const std::string& value);
  void set_customer_uid(int index, std::string&& value);
  void set_customer_uid(int index, const char* value);
  void set_customer_uid(int index, const char* value, size_t size);
  std::string* add_customer_uid();
  void add_customer_uid(const std::string& value);
  void add_customer_uid(std::string&& value);
  void add_customer_uid(const char* value);
  void add_customer_uid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& customer_uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_customer_uid();
  private:
  const std::string& _internal_customer_uid(int index) const;
  std::string* _internal_add_customer_uid();
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.GetMultipleCustomerBillingKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> customer_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class GetMultipleCustomerBillingKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.GetMultipleCustomerBillingKeyResponse) */ {
 public:
  inline GetMultipleCustomerBillingKeyResponse() : GetMultipleCustomerBillingKeyResponse(nullptr) {}
  virtual ~GetMultipleCustomerBillingKeyResponse();

  GetMultipleCustomerBillingKeyResponse(const GetMultipleCustomerBillingKeyResponse& from);
  GetMultipleCustomerBillingKeyResponse(GetMultipleCustomerBillingKeyResponse&& from) noexcept
    : GetMultipleCustomerBillingKeyResponse() {
    *this = ::std::move(from);
  }

  inline GetMultipleCustomerBillingKeyResponse& operator=(const GetMultipleCustomerBillingKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMultipleCustomerBillingKeyResponse& operator=(GetMultipleCustomerBillingKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMultipleCustomerBillingKeyResponse& default_instance();

  static inline const GetMultipleCustomerBillingKeyResponse* internal_default_instance() {
    return reinterpret_cast<const GetMultipleCustomerBillingKeyResponse*>(
               &_GetMultipleCustomerBillingKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetMultipleCustomerBillingKeyResponse& a, GetMultipleCustomerBillingKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMultipleCustomerBillingKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMultipleCustomerBillingKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMultipleCustomerBillingKeyResponse* New() const final {
    return CreateMaybeMessage<GetMultipleCustomerBillingKeyResponse>(nullptr);
  }

  GetMultipleCustomerBillingKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMultipleCustomerBillingKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMultipleCustomerBillingKeyResponse& from);
  void MergeFrom(const GetMultipleCustomerBillingKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMultipleCustomerBillingKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.GetMultipleCustomerBillingKeyResponse";
  }
  protected:
  explicit GetMultipleCustomerBillingKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .subscribe_customers.CustomerBillingKey response = 3;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::subscribe_customers::CustomerBillingKey* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe_customers::CustomerBillingKey >*
      mutable_response();
  private:
  const ::subscribe_customers::CustomerBillingKey& _internal_response(int index) const;
  ::subscribe_customers::CustomerBillingKey* _internal_add_response();
  public:
  const ::subscribe_customers::CustomerBillingKey& response(int index) const;
  ::subscribe_customers::CustomerBillingKey* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe_customers::CustomerBillingKey >&
      response() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.GetMultipleCustomerBillingKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe_customers::CustomerBillingKey > response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class DeleteCustomerBillingKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.DeleteCustomerBillingKeyRequest) */ {
 public:
  inline DeleteCustomerBillingKeyRequest() : DeleteCustomerBillingKeyRequest(nullptr) {}
  virtual ~DeleteCustomerBillingKeyRequest();

  DeleteCustomerBillingKeyRequest(const DeleteCustomerBillingKeyRequest& from);
  DeleteCustomerBillingKeyRequest(DeleteCustomerBillingKeyRequest&& from) noexcept
    : DeleteCustomerBillingKeyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCustomerBillingKeyRequest& operator=(const DeleteCustomerBillingKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCustomerBillingKeyRequest& operator=(DeleteCustomerBillingKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCustomerBillingKeyRequest& default_instance();

  static inline const DeleteCustomerBillingKeyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCustomerBillingKeyRequest*>(
               &_DeleteCustomerBillingKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteCustomerBillingKeyRequest& a, DeleteCustomerBillingKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCustomerBillingKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCustomerBillingKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCustomerBillingKeyRequest* New() const final {
    return CreateMaybeMessage<DeleteCustomerBillingKeyRequest>(nullptr);
  }

  DeleteCustomerBillingKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCustomerBillingKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCustomerBillingKeyRequest& from);
  void MergeFrom(const DeleteCustomerBillingKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCustomerBillingKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.DeleteCustomerBillingKeyRequest";
  }
  protected:
  explicit DeleteCustomerBillingKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerUidFieldNumber = 1,
    kReasonFieldNumber = 2,
    kRequesterFieldNumber = 3,
  };
  // string customer_uid = 1;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string requester = 3;
  void clear_requester();
  const std::string& requester() const;
  void set_requester(const std::string& value);
  void set_requester(std::string&& value);
  void set_requester(const char* value);
  void set_requester(const char* value, size_t size);
  std::string* mutable_requester();
  std::string* release_requester();
  void set_allocated_requester(std::string* requester);
  private:
  const std::string& _internal_requester() const;
  void _internal_set_requester(const std::string& value);
  std::string* _internal_mutable_requester();
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.DeleteCustomerBillingKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requester_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class DeleteCustomerBillingKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.DeleteCustomerBillingKeyResponse) */ {
 public:
  inline DeleteCustomerBillingKeyResponse() : DeleteCustomerBillingKeyResponse(nullptr) {}
  virtual ~DeleteCustomerBillingKeyResponse();

  DeleteCustomerBillingKeyResponse(const DeleteCustomerBillingKeyResponse& from);
  DeleteCustomerBillingKeyResponse(DeleteCustomerBillingKeyResponse&& from) noexcept
    : DeleteCustomerBillingKeyResponse() {
    *this = ::std::move(from);
  }

  inline DeleteCustomerBillingKeyResponse& operator=(const DeleteCustomerBillingKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCustomerBillingKeyResponse& operator=(DeleteCustomerBillingKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCustomerBillingKeyResponse& default_instance();

  static inline const DeleteCustomerBillingKeyResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteCustomerBillingKeyResponse*>(
               &_DeleteCustomerBillingKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteCustomerBillingKeyResponse& a, DeleteCustomerBillingKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCustomerBillingKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCustomerBillingKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCustomerBillingKeyResponse* New() const final {
    return CreateMaybeMessage<DeleteCustomerBillingKeyResponse>(nullptr);
  }

  DeleteCustomerBillingKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCustomerBillingKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCustomerBillingKeyResponse& from);
  void MergeFrom(const DeleteCustomerBillingKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCustomerBillingKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.DeleteCustomerBillingKeyResponse";
  }
  protected:
  explicit DeleteCustomerBillingKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .subscribe_customers.CustomerBillingKey response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::subscribe_customers::CustomerBillingKey& response() const;
  ::subscribe_customers::CustomerBillingKey* release_response();
  ::subscribe_customers::CustomerBillingKey* mutable_response();
  void set_allocated_response(::subscribe_customers::CustomerBillingKey* response);
  private:
  const ::subscribe_customers::CustomerBillingKey& _internal_response() const;
  ::subscribe_customers::CustomerBillingKey* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::subscribe_customers::CustomerBillingKey* response);
  ::subscribe_customers::CustomerBillingKey* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.DeleteCustomerBillingKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::subscribe_customers::CustomerBillingKey* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class GetCustomerBillingKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.GetCustomerBillingKeyRequest) */ {
 public:
  inline GetCustomerBillingKeyRequest() : GetCustomerBillingKeyRequest(nullptr) {}
  virtual ~GetCustomerBillingKeyRequest();

  GetCustomerBillingKeyRequest(const GetCustomerBillingKeyRequest& from);
  GetCustomerBillingKeyRequest(GetCustomerBillingKeyRequest&& from) noexcept
    : GetCustomerBillingKeyRequest() {
    *this = ::std::move(from);
  }

  inline GetCustomerBillingKeyRequest& operator=(const GetCustomerBillingKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCustomerBillingKeyRequest& operator=(GetCustomerBillingKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCustomerBillingKeyRequest& default_instance();

  static inline const GetCustomerBillingKeyRequest* internal_default_instance() {
    return reinterpret_cast<const GetCustomerBillingKeyRequest*>(
               &_GetCustomerBillingKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetCustomerBillingKeyRequest& a, GetCustomerBillingKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCustomerBillingKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCustomerBillingKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCustomerBillingKeyRequest* New() const final {
    return CreateMaybeMessage<GetCustomerBillingKeyRequest>(nullptr);
  }

  GetCustomerBillingKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCustomerBillingKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCustomerBillingKeyRequest& from);
  void MergeFrom(const GetCustomerBillingKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCustomerBillingKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.GetCustomerBillingKeyRequest";
  }
  protected:
  explicit GetCustomerBillingKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerUidFieldNumber = 1,
  };
  // string customer_uid = 1;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.GetCustomerBillingKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class GetCustomerBillingKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.GetCustomerBillingKeyResponse) */ {
 public:
  inline GetCustomerBillingKeyResponse() : GetCustomerBillingKeyResponse(nullptr) {}
  virtual ~GetCustomerBillingKeyResponse();

  GetCustomerBillingKeyResponse(const GetCustomerBillingKeyResponse& from);
  GetCustomerBillingKeyResponse(GetCustomerBillingKeyResponse&& from) noexcept
    : GetCustomerBillingKeyResponse() {
    *this = ::std::move(from);
  }

  inline GetCustomerBillingKeyResponse& operator=(const GetCustomerBillingKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCustomerBillingKeyResponse& operator=(GetCustomerBillingKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCustomerBillingKeyResponse& default_instance();

  static inline const GetCustomerBillingKeyResponse* internal_default_instance() {
    return reinterpret_cast<const GetCustomerBillingKeyResponse*>(
               &_GetCustomerBillingKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetCustomerBillingKeyResponse& a, GetCustomerBillingKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCustomerBillingKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCustomerBillingKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCustomerBillingKeyResponse* New() const final {
    return CreateMaybeMessage<GetCustomerBillingKeyResponse>(nullptr);
  }

  GetCustomerBillingKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCustomerBillingKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCustomerBillingKeyResponse& from);
  void MergeFrom(const GetCustomerBillingKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCustomerBillingKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.GetCustomerBillingKeyResponse";
  }
  protected:
  explicit GetCustomerBillingKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .subscribe_customers.CustomerBillingKey response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::subscribe_customers::CustomerBillingKey& response() const;
  ::subscribe_customers::CustomerBillingKey* release_response();
  ::subscribe_customers::CustomerBillingKey* mutable_response();
  void set_allocated_response(::subscribe_customers::CustomerBillingKey* response);
  private:
  const ::subscribe_customers::CustomerBillingKey& _internal_response() const;
  ::subscribe_customers::CustomerBillingKey* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::subscribe_customers::CustomerBillingKey* response);
  ::subscribe_customers::CustomerBillingKey* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.GetCustomerBillingKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::subscribe_customers::CustomerBillingKey* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class InsertCustomerBillingKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.InsertCustomerBillingKeyRequest) */ {
 public:
  inline InsertCustomerBillingKeyRequest() : InsertCustomerBillingKeyRequest(nullptr) {}
  virtual ~InsertCustomerBillingKeyRequest();

  InsertCustomerBillingKeyRequest(const InsertCustomerBillingKeyRequest& from);
  InsertCustomerBillingKeyRequest(InsertCustomerBillingKeyRequest&& from) noexcept
    : InsertCustomerBillingKeyRequest() {
    *this = ::std::move(from);
  }

  inline InsertCustomerBillingKeyRequest& operator=(const InsertCustomerBillingKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertCustomerBillingKeyRequest& operator=(InsertCustomerBillingKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertCustomerBillingKeyRequest& default_instance();

  static inline const InsertCustomerBillingKeyRequest* internal_default_instance() {
    return reinterpret_cast<const InsertCustomerBillingKeyRequest*>(
               &_InsertCustomerBillingKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InsertCustomerBillingKeyRequest& a, InsertCustomerBillingKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertCustomerBillingKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertCustomerBillingKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertCustomerBillingKeyRequest* New() const final {
    return CreateMaybeMessage<InsertCustomerBillingKeyRequest>(nullptr);
  }

  InsertCustomerBillingKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertCustomerBillingKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertCustomerBillingKeyRequest& from);
  void MergeFrom(const InsertCustomerBillingKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertCustomerBillingKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.InsertCustomerBillingKeyRequest";
  }
  protected:
  explicit InsertCustomerBillingKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerUidFieldNumber = 1,
    kPgFieldNumber = 2,
    kCardNumberFieldNumber = 3,
    kExpiryFieldNumber = 4,
    kBirthFieldNumber = 5,
    kPwd2DigitFieldNumber = 6,
    kCustomerNameFieldNumber = 7,
    kCustomerTelFieldNumber = 8,
    kCustomerEmailFieldNumber = 9,
    kCustomerAddrFieldNumber = 10,
    kCustomerPostcodeFieldNumber = 11,
  };
  // string customer_uid = 1;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // string pg = 2;
  void clear_pg();
  const std::string& pg() const;
  void set_pg(const std::string& value);
  void set_pg(std::string&& value);
  void set_pg(const char* value);
  void set_pg(const char* value, size_t size);
  std::string* mutable_pg();
  std::string* release_pg();
  void set_allocated_pg(std::string* pg);
  private:
  const std::string& _internal_pg() const;
  void _internal_set_pg(const std::string& value);
  std::string* _internal_mutable_pg();
  public:

  // string card_number = 3;
  void clear_card_number();
  const std::string& card_number() const;
  void set_card_number(const std::string& value);
  void set_card_number(std::string&& value);
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  std::string* mutable_card_number();
  std::string* release_card_number();
  void set_allocated_card_number(std::string* card_number);
  private:
  const std::string& _internal_card_number() const;
  void _internal_set_card_number(const std::string& value);
  std::string* _internal_mutable_card_number();
  public:

  // string expiry = 4;
  void clear_expiry();
  const std::string& expiry() const;
  void set_expiry(const std::string& value);
  void set_expiry(std::string&& value);
  void set_expiry(const char* value);
  void set_expiry(const char* value, size_t size);
  std::string* mutable_expiry();
  std::string* release_expiry();
  void set_allocated_expiry(std::string* expiry);
  private:
  const std::string& _internal_expiry() const;
  void _internal_set_expiry(const std::string& value);
  std::string* _internal_mutable_expiry();
  public:

  // string birth = 5;
  void clear_birth();
  const std::string& birth() const;
  void set_birth(const std::string& value);
  void set_birth(std::string&& value);
  void set_birth(const char* value);
  void set_birth(const char* value, size_t size);
  std::string* mutable_birth();
  std::string* release_birth();
  void set_allocated_birth(std::string* birth);
  private:
  const std::string& _internal_birth() const;
  void _internal_set_birth(const std::string& value);
  std::string* _internal_mutable_birth();
  public:

  // string pwd_2digit = 6;
  void clear_pwd_2digit();
  const std::string& pwd_2digit() const;
  void set_pwd_2digit(const std::string& value);
  void set_pwd_2digit(std::string&& value);
  void set_pwd_2digit(const char* value);
  void set_pwd_2digit(const char* value, size_t size);
  std::string* mutable_pwd_2digit();
  std::string* release_pwd_2digit();
  void set_allocated_pwd_2digit(std::string* pwd_2digit);
  private:
  const std::string& _internal_pwd_2digit() const;
  void _internal_set_pwd_2digit(const std::string& value);
  std::string* _internal_mutable_pwd_2digit();
  public:

  // string customer_name = 7;
  void clear_customer_name();
  const std::string& customer_name() const;
  void set_customer_name(const std::string& value);
  void set_customer_name(std::string&& value);
  void set_customer_name(const char* value);
  void set_customer_name(const char* value, size_t size);
  std::string* mutable_customer_name();
  std::string* release_customer_name();
  void set_allocated_customer_name(std::string* customer_name);
  private:
  const std::string& _internal_customer_name() const;
  void _internal_set_customer_name(const std::string& value);
  std::string* _internal_mutable_customer_name();
  public:

  // string customer_tel = 8;
  void clear_customer_tel();
  const std::string& customer_tel() const;
  void set_customer_tel(const std::string& value);
  void set_customer_tel(std::string&& value);
  void set_customer_tel(const char* value);
  void set_customer_tel(const char* value, size_t size);
  std::string* mutable_customer_tel();
  std::string* release_customer_tel();
  void set_allocated_customer_tel(std::string* customer_tel);
  private:
  const std::string& _internal_customer_tel() const;
  void _internal_set_customer_tel(const std::string& value);
  std::string* _internal_mutable_customer_tel();
  public:

  // string customer_email = 9;
  void clear_customer_email();
  const std::string& customer_email() const;
  void set_customer_email(const std::string& value);
  void set_customer_email(std::string&& value);
  void set_customer_email(const char* value);
  void set_customer_email(const char* value, size_t size);
  std::string* mutable_customer_email();
  std::string* release_customer_email();
  void set_allocated_customer_email(std::string* customer_email);
  private:
  const std::string& _internal_customer_email() const;
  void _internal_set_customer_email(const std::string& value);
  std::string* _internal_mutable_customer_email();
  public:

  // string customer_addr = 10;
  void clear_customer_addr();
  const std::string& customer_addr() const;
  void set_customer_addr(const std::string& value);
  void set_customer_addr(std::string&& value);
  void set_customer_addr(const char* value);
  void set_customer_addr(const char* value, size_t size);
  std::string* mutable_customer_addr();
  std::string* release_customer_addr();
  void set_allocated_customer_addr(std::string* customer_addr);
  private:
  const std::string& _internal_customer_addr() const;
  void _internal_set_customer_addr(const std::string& value);
  std::string* _internal_mutable_customer_addr();
  public:

  // string customer_postcode = 11;
  void clear_customer_postcode();
  const std::string& customer_postcode() const;
  void set_customer_postcode(const std::string& value);
  void set_customer_postcode(std::string&& value);
  void set_customer_postcode(const char* value);
  void set_customer_postcode(const char* value, size_t size);
  std::string* mutable_customer_postcode();
  std::string* release_customer_postcode();
  void set_allocated_customer_postcode(std::string* customer_postcode);
  private:
  const std::string& _internal_customer_postcode() const;
  void _internal_set_customer_postcode(const std::string& value);
  std::string* _internal_mutable_customer_postcode();
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.InsertCustomerBillingKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_2digit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_postcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class InsertCustomerBillingKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.InsertCustomerBillingKeyResponse) */ {
 public:
  inline InsertCustomerBillingKeyResponse() : InsertCustomerBillingKeyResponse(nullptr) {}
  virtual ~InsertCustomerBillingKeyResponse();

  InsertCustomerBillingKeyResponse(const InsertCustomerBillingKeyResponse& from);
  InsertCustomerBillingKeyResponse(InsertCustomerBillingKeyResponse&& from) noexcept
    : InsertCustomerBillingKeyResponse() {
    *this = ::std::move(from);
  }

  inline InsertCustomerBillingKeyResponse& operator=(const InsertCustomerBillingKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertCustomerBillingKeyResponse& operator=(InsertCustomerBillingKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertCustomerBillingKeyResponse& default_instance();

  static inline const InsertCustomerBillingKeyResponse* internal_default_instance() {
    return reinterpret_cast<const InsertCustomerBillingKeyResponse*>(
               &_InsertCustomerBillingKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InsertCustomerBillingKeyResponse& a, InsertCustomerBillingKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertCustomerBillingKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertCustomerBillingKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertCustomerBillingKeyResponse* New() const final {
    return CreateMaybeMessage<InsertCustomerBillingKeyResponse>(nullptr);
  }

  InsertCustomerBillingKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertCustomerBillingKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertCustomerBillingKeyResponse& from);
  void MergeFrom(const InsertCustomerBillingKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertCustomerBillingKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.InsertCustomerBillingKeyResponse";
  }
  protected:
  explicit InsertCustomerBillingKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .subscribe_customers.CustomerBillingKey response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::subscribe_customers::CustomerBillingKey& response() const;
  ::subscribe_customers::CustomerBillingKey* release_response();
  ::subscribe_customers::CustomerBillingKey* mutable_response();
  void set_allocated_response(::subscribe_customers::CustomerBillingKey* response);
  private:
  const ::subscribe_customers::CustomerBillingKey& _internal_response() const;
  ::subscribe_customers::CustomerBillingKey* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::subscribe_customers::CustomerBillingKey* response);
  ::subscribe_customers::CustomerBillingKey* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.InsertCustomerBillingKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::subscribe_customers::CustomerBillingKey* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class GetPaidByBillingKeyListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.GetPaidByBillingKeyListRequest) */ {
 public:
  inline GetPaidByBillingKeyListRequest() : GetPaidByBillingKeyListRequest(nullptr) {}
  virtual ~GetPaidByBillingKeyListRequest();

  GetPaidByBillingKeyListRequest(const GetPaidByBillingKeyListRequest& from);
  GetPaidByBillingKeyListRequest(GetPaidByBillingKeyListRequest&& from) noexcept
    : GetPaidByBillingKeyListRequest() {
    *this = ::std::move(from);
  }

  inline GetPaidByBillingKeyListRequest& operator=(const GetPaidByBillingKeyListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPaidByBillingKeyListRequest& operator=(GetPaidByBillingKeyListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPaidByBillingKeyListRequest& default_instance();

  static inline const GetPaidByBillingKeyListRequest* internal_default_instance() {
    return reinterpret_cast<const GetPaidByBillingKeyListRequest*>(
               &_GetPaidByBillingKeyListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetPaidByBillingKeyListRequest& a, GetPaidByBillingKeyListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPaidByBillingKeyListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPaidByBillingKeyListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPaidByBillingKeyListRequest* New() const final {
    return CreateMaybeMessage<GetPaidByBillingKeyListRequest>(nullptr);
  }

  GetPaidByBillingKeyListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPaidByBillingKeyListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPaidByBillingKeyListRequest& from);
  void MergeFrom(const GetPaidByBillingKeyListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPaidByBillingKeyListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.GetPaidByBillingKeyListRequest";
  }
  protected:
  explicit GetPaidByBillingKeyListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerUidFieldNumber = 1,
    kPageFieldNumber = 2,
  };
  // string customer_uid = 1;
  void clear_customer_uid();
  const std::string& customer_uid() const;
  void set_customer_uid(const std::string& value);
  void set_customer_uid(std::string&& value);
  void set_customer_uid(const char* value);
  void set_customer_uid(const char* value, size_t size);
  std::string* mutable_customer_uid();
  std::string* release_customer_uid();
  void set_allocated_customer_uid(std::string* customer_uid);
  private:
  const std::string& _internal_customer_uid() const;
  void _internal_set_customer_uid(const std::string& value);
  std::string* _internal_mutable_customer_uid();
  public:

  // int32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.GetPaidByBillingKeyListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class NestedGetPaidByBillingKeyListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.NestedGetPaidByBillingKeyListData) */ {
 public:
  inline NestedGetPaidByBillingKeyListData() : NestedGetPaidByBillingKeyListData(nullptr) {}
  virtual ~NestedGetPaidByBillingKeyListData();

  NestedGetPaidByBillingKeyListData(const NestedGetPaidByBillingKeyListData& from);
  NestedGetPaidByBillingKeyListData(NestedGetPaidByBillingKeyListData&& from) noexcept
    : NestedGetPaidByBillingKeyListData() {
    *this = ::std::move(from);
  }

  inline NestedGetPaidByBillingKeyListData& operator=(const NestedGetPaidByBillingKeyListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestedGetPaidByBillingKeyListData& operator=(NestedGetPaidByBillingKeyListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NestedGetPaidByBillingKeyListData& default_instance();

  static inline const NestedGetPaidByBillingKeyListData* internal_default_instance() {
    return reinterpret_cast<const NestedGetPaidByBillingKeyListData*>(
               &_NestedGetPaidByBillingKeyListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NestedGetPaidByBillingKeyListData& a, NestedGetPaidByBillingKeyListData& b) {
    a.Swap(&b);
  }
  inline void Swap(NestedGetPaidByBillingKeyListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestedGetPaidByBillingKeyListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NestedGetPaidByBillingKeyListData* New() const final {
    return CreateMaybeMessage<NestedGetPaidByBillingKeyListData>(nullptr);
  }

  NestedGetPaidByBillingKeyListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NestedGetPaidByBillingKeyListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NestedGetPaidByBillingKeyListData& from);
  void MergeFrom(const NestedGetPaidByBillingKeyListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedGetPaidByBillingKeyListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.NestedGetPaidByBillingKeyListData";
  }
  protected:
  explicit NestedGetPaidByBillingKeyListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 4,
    kTotalFieldNumber = 1,
    kPreviousFieldNumber = 2,
    kNextFieldNumber = 3,
  };
  // repeated .payment.Payment list = 4;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::payment::Payment* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >*
      mutable_list();
  private:
  const ::payment::Payment& _internal_list(int index) const;
  ::payment::Payment* _internal_add_list();
  public:
  const ::payment::Payment& list(int index) const;
  ::payment::Payment* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >&
      list() const;

  // int32 total = 1;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 previous = 2;
  void clear_previous();
  ::PROTOBUF_NAMESPACE_ID::int32 previous() const;
  void set_previous(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_previous() const;
  void _internal_set_previous(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 next = 3;
  void clear_next();
  ::PROTOBUF_NAMESPACE_ID::int32 next() const;
  void set_next(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_next() const;
  void _internal_set_next(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.NestedGetPaidByBillingKeyListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 previous_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// -------------------------------------------------------------------

class GetPaidByBillingKeyListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:subscribe_customers.GetPaidByBillingKeyListResponse) */ {
 public:
  inline GetPaidByBillingKeyListResponse() : GetPaidByBillingKeyListResponse(nullptr) {}
  virtual ~GetPaidByBillingKeyListResponse();

  GetPaidByBillingKeyListResponse(const GetPaidByBillingKeyListResponse& from);
  GetPaidByBillingKeyListResponse(GetPaidByBillingKeyListResponse&& from) noexcept
    : GetPaidByBillingKeyListResponse() {
    *this = ::std::move(from);
  }

  inline GetPaidByBillingKeyListResponse& operator=(const GetPaidByBillingKeyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPaidByBillingKeyListResponse& operator=(GetPaidByBillingKeyListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPaidByBillingKeyListResponse& default_instance();

  static inline const GetPaidByBillingKeyListResponse* internal_default_instance() {
    return reinterpret_cast<const GetPaidByBillingKeyListResponse*>(
               &_GetPaidByBillingKeyListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetPaidByBillingKeyListResponse& a, GetPaidByBillingKeyListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPaidByBillingKeyListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPaidByBillingKeyListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPaidByBillingKeyListResponse* New() const final {
    return CreateMaybeMessage<GetPaidByBillingKeyListResponse>(nullptr);
  }

  GetPaidByBillingKeyListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPaidByBillingKeyListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPaidByBillingKeyListResponse& from);
  void MergeFrom(const GetPaidByBillingKeyListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPaidByBillingKeyListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "subscribe_customers.GetPaidByBillingKeyListResponse";
  }
  protected:
  explicit GetPaidByBillingKeyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto);
    return ::descriptor_table_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kResponseFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .subscribe_customers.NestedGetPaidByBillingKeyListData response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::subscribe_customers::NestedGetPaidByBillingKeyListData& response() const;
  ::subscribe_customers::NestedGetPaidByBillingKeyListData* release_response();
  ::subscribe_customers::NestedGetPaidByBillingKeyListData* mutable_response();
  void set_allocated_response(::subscribe_customers::NestedGetPaidByBillingKeyListData* response);
  private:
  const ::subscribe_customers::NestedGetPaidByBillingKeyListData& _internal_response() const;
  ::subscribe_customers::NestedGetPaidByBillingKeyListData* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::subscribe_customers::NestedGetPaidByBillingKeyListData* response);
  ::subscribe_customers::NestedGetPaidByBillingKeyListData* unsafe_arena_release_response();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:subscribe_customers.GetPaidByBillingKeyListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::subscribe_customers::NestedGetPaidByBillingKeyListData* response_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustomerBillingKey

// string card_code = 1;
inline void CustomerBillingKey::clear_card_code() {
  card_code_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::card_code() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.card_code)
  return _internal_card_code();
}
inline void CustomerBillingKey::set_card_code(const std::string& value) {
  _internal_set_card_code(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.card_code)
}
inline std::string* CustomerBillingKey::mutable_card_code() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.card_code)
  return _internal_mutable_card_code();
}
inline const std::string& CustomerBillingKey::_internal_card_code() const {
  return card_code_.Get();
}
inline void CustomerBillingKey::_internal_set_card_code(const std::string& value) {
  
  card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_card_code(std::string&& value) {
  
  card_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.card_code)
}
inline void CustomerBillingKey::set_card_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.card_code)
}
inline void CustomerBillingKey::set_card_code(const char* value,
    size_t size) {
  
  card_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.card_code)
}
inline std::string* CustomerBillingKey::_internal_mutable_card_code() {
  
  return card_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_card_code() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.card_code)
  return card_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_card_code(std::string* card_code) {
  if (card_code != nullptr) {
    
  } else {
    
  }
  card_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.card_code)
}

// string card_name = 2;
inline void CustomerBillingKey::clear_card_name() {
  card_name_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::card_name() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.card_name)
  return _internal_card_name();
}
inline void CustomerBillingKey::set_card_name(const std::string& value) {
  _internal_set_card_name(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.card_name)
}
inline std::string* CustomerBillingKey::mutable_card_name() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.card_name)
  return _internal_mutable_card_name();
}
inline const std::string& CustomerBillingKey::_internal_card_name() const {
  return card_name_.Get();
}
inline void CustomerBillingKey::_internal_set_card_name(const std::string& value) {
  
  card_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_card_name(std::string&& value) {
  
  card_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.card_name)
}
inline void CustomerBillingKey::set_card_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.card_name)
}
inline void CustomerBillingKey::set_card_name(const char* value,
    size_t size) {
  
  card_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.card_name)
}
inline std::string* CustomerBillingKey::_internal_mutable_card_name() {
  
  return card_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_card_name() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.card_name)
  return card_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_card_name(std::string* card_name) {
  if (card_name != nullptr) {
    
  } else {
    
  }
  card_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.card_name)
}

// string card_number = 3;
inline void CustomerBillingKey::clear_card_number() {
  card_number_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::card_number() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.card_number)
  return _internal_card_number();
}
inline void CustomerBillingKey::set_card_number(const std::string& value) {
  _internal_set_card_number(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.card_number)
}
inline std::string* CustomerBillingKey::mutable_card_number() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.card_number)
  return _internal_mutable_card_number();
}
inline const std::string& CustomerBillingKey::_internal_card_number() const {
  return card_number_.Get();
}
inline void CustomerBillingKey::_internal_set_card_number(const std::string& value) {
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_card_number(std::string&& value) {
  
  card_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.card_number)
}
inline void CustomerBillingKey::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.card_number)
}
inline void CustomerBillingKey::set_card_number(const char* value,
    size_t size) {
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.card_number)
}
inline std::string* CustomerBillingKey::_internal_mutable_card_number() {
  
  return card_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_card_number() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.card_number)
  return card_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_card_number(std::string* card_number) {
  if (card_number != nullptr) {
    
  } else {
    
  }
  card_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.card_number)
}

// int32 card_type = 4;
inline void CustomerBillingKey::clear_card_type() {
  card_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerBillingKey::_internal_card_type() const {
  return card_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerBillingKey::card_type() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.card_type)
  return _internal_card_type();
}
inline void CustomerBillingKey::_internal_set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  card_type_ = value;
}
inline void CustomerBillingKey::set_card_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_card_type(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.card_type)
}

// string customer_addr = 5;
inline void CustomerBillingKey::clear_customer_addr() {
  customer_addr_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::customer_addr() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.customer_addr)
  return _internal_customer_addr();
}
inline void CustomerBillingKey::set_customer_addr(const std::string& value) {
  _internal_set_customer_addr(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.customer_addr)
}
inline std::string* CustomerBillingKey::mutable_customer_addr() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.customer_addr)
  return _internal_mutable_customer_addr();
}
inline const std::string& CustomerBillingKey::_internal_customer_addr() const {
  return customer_addr_.Get();
}
inline void CustomerBillingKey::_internal_set_customer_addr(const std::string& value) {
  
  customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_customer_addr(std::string&& value) {
  
  customer_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.customer_addr)
}
inline void CustomerBillingKey::set_customer_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.customer_addr)
}
inline void CustomerBillingKey::set_customer_addr(const char* value,
    size_t size) {
  
  customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.customer_addr)
}
inline std::string* CustomerBillingKey::_internal_mutable_customer_addr() {
  
  return customer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_customer_addr() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.customer_addr)
  return customer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_customer_addr(std::string* customer_addr) {
  if (customer_addr != nullptr) {
    
  } else {
    
  }
  customer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.customer_addr)
}

// string customer_email = 6;
inline void CustomerBillingKey::clear_customer_email() {
  customer_email_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::customer_email() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.customer_email)
  return _internal_customer_email();
}
inline void CustomerBillingKey::set_customer_email(const std::string& value) {
  _internal_set_customer_email(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.customer_email)
}
inline std::string* CustomerBillingKey::mutable_customer_email() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.customer_email)
  return _internal_mutable_customer_email();
}
inline const std::string& CustomerBillingKey::_internal_customer_email() const {
  return customer_email_.Get();
}
inline void CustomerBillingKey::_internal_set_customer_email(const std::string& value) {
  
  customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_customer_email(std::string&& value) {
  
  customer_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.customer_email)
}
inline void CustomerBillingKey::set_customer_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.customer_email)
}
inline void CustomerBillingKey::set_customer_email(const char* value,
    size_t size) {
  
  customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.customer_email)
}
inline std::string* CustomerBillingKey::_internal_mutable_customer_email() {
  
  return customer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_customer_email() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.customer_email)
  return customer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_customer_email(std::string* customer_email) {
  if (customer_email != nullptr) {
    
  } else {
    
  }
  customer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.customer_email)
}

// string customer_name = 7;
inline void CustomerBillingKey::clear_customer_name() {
  customer_name_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::customer_name() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.customer_name)
  return _internal_customer_name();
}
inline void CustomerBillingKey::set_customer_name(const std::string& value) {
  _internal_set_customer_name(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.customer_name)
}
inline std::string* CustomerBillingKey::mutable_customer_name() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.customer_name)
  return _internal_mutable_customer_name();
}
inline const std::string& CustomerBillingKey::_internal_customer_name() const {
  return customer_name_.Get();
}
inline void CustomerBillingKey::_internal_set_customer_name(const std::string& value) {
  
  customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_customer_name(std::string&& value) {
  
  customer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.customer_name)
}
inline void CustomerBillingKey::set_customer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.customer_name)
}
inline void CustomerBillingKey::set_customer_name(const char* value,
    size_t size) {
  
  customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.customer_name)
}
inline std::string* CustomerBillingKey::_internal_mutable_customer_name() {
  
  return customer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_customer_name() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.customer_name)
  return customer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_customer_name(std::string* customer_name) {
  if (customer_name != nullptr) {
    
  } else {
    
  }
  customer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.customer_name)
}

// string customer_postcode = 8;
inline void CustomerBillingKey::clear_customer_postcode() {
  customer_postcode_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::customer_postcode() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.customer_postcode)
  return _internal_customer_postcode();
}
inline void CustomerBillingKey::set_customer_postcode(const std::string& value) {
  _internal_set_customer_postcode(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.customer_postcode)
}
inline std::string* CustomerBillingKey::mutable_customer_postcode() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.customer_postcode)
  return _internal_mutable_customer_postcode();
}
inline const std::string& CustomerBillingKey::_internal_customer_postcode() const {
  return customer_postcode_.Get();
}
inline void CustomerBillingKey::_internal_set_customer_postcode(const std::string& value) {
  
  customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_customer_postcode(std::string&& value) {
  
  customer_postcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.customer_postcode)
}
inline void CustomerBillingKey::set_customer_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.customer_postcode)
}
inline void CustomerBillingKey::set_customer_postcode(const char* value,
    size_t size) {
  
  customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.customer_postcode)
}
inline std::string* CustomerBillingKey::_internal_mutable_customer_postcode() {
  
  return customer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_customer_postcode() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.customer_postcode)
  return customer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_customer_postcode(std::string* customer_postcode) {
  if (customer_postcode != nullptr) {
    
  } else {
    
  }
  customer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.customer_postcode)
}

// string customer_tel = 9;
inline void CustomerBillingKey::clear_customer_tel() {
  customer_tel_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::customer_tel() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.customer_tel)
  return _internal_customer_tel();
}
inline void CustomerBillingKey::set_customer_tel(const std::string& value) {
  _internal_set_customer_tel(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.customer_tel)
}
inline std::string* CustomerBillingKey::mutable_customer_tel() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.customer_tel)
  return _internal_mutable_customer_tel();
}
inline const std::string& CustomerBillingKey::_internal_customer_tel() const {
  return customer_tel_.Get();
}
inline void CustomerBillingKey::_internal_set_customer_tel(const std::string& value) {
  
  customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_customer_tel(std::string&& value) {
  
  customer_tel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.customer_tel)
}
inline void CustomerBillingKey::set_customer_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.customer_tel)
}
inline void CustomerBillingKey::set_customer_tel(const char* value,
    size_t size) {
  
  customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.customer_tel)
}
inline std::string* CustomerBillingKey::_internal_mutable_customer_tel() {
  
  return customer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_customer_tel() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.customer_tel)
  return customer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_customer_tel(std::string* customer_tel) {
  if (customer_tel != nullptr) {
    
  } else {
    
  }
  customer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.customer_tel)
}

// string customer_uid = 10;
inline void CustomerBillingKey::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.customer_uid)
  return _internal_customer_uid();
}
inline void CustomerBillingKey::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.customer_uid)
}
inline std::string* CustomerBillingKey::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& CustomerBillingKey::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void CustomerBillingKey::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.customer_uid)
}
inline void CustomerBillingKey::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.customer_uid)
}
inline void CustomerBillingKey::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.customer_uid)
}
inline std::string* CustomerBillingKey::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.customer_uid)
}

// int32 inserted = 11;
inline void CustomerBillingKey::clear_inserted() {
  inserted_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerBillingKey::_internal_inserted() const {
  return inserted_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerBillingKey::inserted() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.inserted)
  return _internal_inserted();
}
inline void CustomerBillingKey::_internal_set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inserted_ = value;
}
inline void CustomerBillingKey::set_inserted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inserted(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.inserted)
}

// string pg_id = 12;
inline void CustomerBillingKey::clear_pg_id() {
  pg_id_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::pg_id() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.pg_id)
  return _internal_pg_id();
}
inline void CustomerBillingKey::set_pg_id(const std::string& value) {
  _internal_set_pg_id(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.pg_id)
}
inline std::string* CustomerBillingKey::mutable_pg_id() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.pg_id)
  return _internal_mutable_pg_id();
}
inline const std::string& CustomerBillingKey::_internal_pg_id() const {
  return pg_id_.Get();
}
inline void CustomerBillingKey::_internal_set_pg_id(const std::string& value) {
  
  pg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_pg_id(std::string&& value) {
  
  pg_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.pg_id)
}
inline void CustomerBillingKey::set_pg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.pg_id)
}
inline void CustomerBillingKey::set_pg_id(const char* value,
    size_t size) {
  
  pg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.pg_id)
}
inline std::string* CustomerBillingKey::_internal_mutable_pg_id() {
  
  return pg_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_pg_id() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.pg_id)
  return pg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_pg_id(std::string* pg_id) {
  if (pg_id != nullptr) {
    
  } else {
    
  }
  pg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.pg_id)
}

// string pg_provider = 13;
inline void CustomerBillingKey::clear_pg_provider() {
  pg_provider_.ClearToEmpty();
}
inline const std::string& CustomerBillingKey::pg_provider() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.pg_provider)
  return _internal_pg_provider();
}
inline void CustomerBillingKey::set_pg_provider(const std::string& value) {
  _internal_set_pg_provider(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.pg_provider)
}
inline std::string* CustomerBillingKey::mutable_pg_provider() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.CustomerBillingKey.pg_provider)
  return _internal_mutable_pg_provider();
}
inline const std::string& CustomerBillingKey::_internal_pg_provider() const {
  return pg_provider_.Get();
}
inline void CustomerBillingKey::_internal_set_pg_provider(const std::string& value) {
  
  pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerBillingKey::set_pg_provider(std::string&& value) {
  
  pg_provider_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.CustomerBillingKey.pg_provider)
}
inline void CustomerBillingKey::set_pg_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.CustomerBillingKey.pg_provider)
}
inline void CustomerBillingKey::set_pg_provider(const char* value,
    size_t size) {
  
  pg_provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.CustomerBillingKey.pg_provider)
}
inline std::string* CustomerBillingKey::_internal_mutable_pg_provider() {
  
  return pg_provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerBillingKey::release_pg_provider() {
  // @@protoc_insertion_point(field_release:subscribe_customers.CustomerBillingKey.pg_provider)
  return pg_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerBillingKey::set_allocated_pg_provider(std::string* pg_provider) {
  if (pg_provider != nullptr) {
    
  } else {
    
  }
  pg_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg_provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.CustomerBillingKey.pg_provider)
}

// int32 updated = 14;
inline void CustomerBillingKey::clear_updated() {
  updated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerBillingKey::_internal_updated() const {
  return updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomerBillingKey::updated() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.CustomerBillingKey.updated)
  return _internal_updated();
}
inline void CustomerBillingKey::_internal_set_updated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  updated_ = value;
}
inline void CustomerBillingKey::set_updated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_updated(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.CustomerBillingKey.updated)
}

// -------------------------------------------------------------------

// GetMultipleCustomerBillingKeyRequest

// repeated string customer_uid = 1;
inline int GetMultipleCustomerBillingKeyRequest::_internal_customer_uid_size() const {
  return customer_uid_.size();
}
inline int GetMultipleCustomerBillingKeyRequest::customer_uid_size() const {
  return _internal_customer_uid_size();
}
inline void GetMultipleCustomerBillingKeyRequest::clear_customer_uid() {
  customer_uid_.Clear();
}
inline std::string* GetMultipleCustomerBillingKeyRequest::add_customer_uid() {
  // @@protoc_insertion_point(field_add_mutable:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
  return _internal_add_customer_uid();
}
inline const std::string& GetMultipleCustomerBillingKeyRequest::_internal_customer_uid(int index) const {
  return customer_uid_.Get(index);
}
inline const std::string& GetMultipleCustomerBillingKeyRequest::customer_uid(int index) const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
  return _internal_customer_uid(index);
}
inline std::string* GetMultipleCustomerBillingKeyRequest::mutable_customer_uid(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
  return customer_uid_.Mutable(index);
}
inline void GetMultipleCustomerBillingKeyRequest::set_customer_uid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
  customer_uid_.Mutable(index)->assign(value);
}
inline void GetMultipleCustomerBillingKeyRequest::set_customer_uid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
  customer_uid_.Mutable(index)->assign(std::move(value));
}
inline void GetMultipleCustomerBillingKeyRequest::set_customer_uid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  customer_uid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
}
inline void GetMultipleCustomerBillingKeyRequest::set_customer_uid(int index, const char* value, size_t size) {
  customer_uid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
}
inline std::string* GetMultipleCustomerBillingKeyRequest::_internal_add_customer_uid() {
  return customer_uid_.Add();
}
inline void GetMultipleCustomerBillingKeyRequest::add_customer_uid(const std::string& value) {
  customer_uid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
}
inline void GetMultipleCustomerBillingKeyRequest::add_customer_uid(std::string&& value) {
  customer_uid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
}
inline void GetMultipleCustomerBillingKeyRequest::add_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  customer_uid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
}
inline void GetMultipleCustomerBillingKeyRequest::add_customer_uid(const char* value, size_t size) {
  customer_uid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetMultipleCustomerBillingKeyRequest::customer_uid() const {
  // @@protoc_insertion_point(field_list:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
  return customer_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetMultipleCustomerBillingKeyRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable_list:subscribe_customers.GetMultipleCustomerBillingKeyRequest.customer_uid)
  return &customer_uid_;
}

// -------------------------------------------------------------------

// GetMultipleCustomerBillingKeyResponse

// int32 code = 1;
inline void GetMultipleCustomerBillingKeyResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMultipleCustomerBillingKeyResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMultipleCustomerBillingKeyResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetMultipleCustomerBillingKeyResponse.code)
  return _internal_code();
}
inline void GetMultipleCustomerBillingKeyResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetMultipleCustomerBillingKeyResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.GetMultipleCustomerBillingKeyResponse.code)
}

// string message = 2;
inline void GetMultipleCustomerBillingKeyResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GetMultipleCustomerBillingKeyResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetMultipleCustomerBillingKeyResponse.message)
  return _internal_message();
}
inline void GetMultipleCustomerBillingKeyResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.GetMultipleCustomerBillingKeyResponse.message)
}
inline std::string* GetMultipleCustomerBillingKeyResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.GetMultipleCustomerBillingKeyResponse.message)
  return _internal_mutable_message();
}
inline const std::string& GetMultipleCustomerBillingKeyResponse::_internal_message() const {
  return message_.Get();
}
inline void GetMultipleCustomerBillingKeyResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetMultipleCustomerBillingKeyResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.GetMultipleCustomerBillingKeyResponse.message)
}
inline void GetMultipleCustomerBillingKeyResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.GetMultipleCustomerBillingKeyResponse.message)
}
inline void GetMultipleCustomerBillingKeyResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.GetMultipleCustomerBillingKeyResponse.message)
}
inline std::string* GetMultipleCustomerBillingKeyResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetMultipleCustomerBillingKeyResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe_customers.GetMultipleCustomerBillingKeyResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMultipleCustomerBillingKeyResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.GetMultipleCustomerBillingKeyResponse.message)
}

// repeated .subscribe_customers.CustomerBillingKey response = 3;
inline int GetMultipleCustomerBillingKeyResponse::_internal_response_size() const {
  return response_.size();
}
inline int GetMultipleCustomerBillingKeyResponse::response_size() const {
  return _internal_response_size();
}
inline void GetMultipleCustomerBillingKeyResponse::clear_response() {
  response_.Clear();
}
inline ::subscribe_customers::CustomerBillingKey* GetMultipleCustomerBillingKeyResponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.GetMultipleCustomerBillingKeyResponse.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe_customers::CustomerBillingKey >*
GetMultipleCustomerBillingKeyResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:subscribe_customers.GetMultipleCustomerBillingKeyResponse.response)
  return &response_;
}
inline const ::subscribe_customers::CustomerBillingKey& GetMultipleCustomerBillingKeyResponse::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::subscribe_customers::CustomerBillingKey& GetMultipleCustomerBillingKeyResponse::response(int index) const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetMultipleCustomerBillingKeyResponse.response)
  return _internal_response(index);
}
inline ::subscribe_customers::CustomerBillingKey* GetMultipleCustomerBillingKeyResponse::_internal_add_response() {
  return response_.Add();
}
inline ::subscribe_customers::CustomerBillingKey* GetMultipleCustomerBillingKeyResponse::add_response() {
  // @@protoc_insertion_point(field_add:subscribe_customers.GetMultipleCustomerBillingKeyResponse.response)
  return _internal_add_response();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::subscribe_customers::CustomerBillingKey >&
GetMultipleCustomerBillingKeyResponse::response() const {
  // @@protoc_insertion_point(field_list:subscribe_customers.GetMultipleCustomerBillingKeyResponse.response)
  return response_;
}

// -------------------------------------------------------------------

// DeleteCustomerBillingKeyRequest

// string customer_uid = 1;
inline void DeleteCustomerBillingKeyRequest::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& DeleteCustomerBillingKeyRequest::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.DeleteCustomerBillingKeyRequest.customer_uid)
  return _internal_customer_uid();
}
inline void DeleteCustomerBillingKeyRequest::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.DeleteCustomerBillingKeyRequest.customer_uid)
}
inline std::string* DeleteCustomerBillingKeyRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.DeleteCustomerBillingKeyRequest.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& DeleteCustomerBillingKeyRequest::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void DeleteCustomerBillingKeyRequest::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteCustomerBillingKeyRequest::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.DeleteCustomerBillingKeyRequest.customer_uid)
}
inline void DeleteCustomerBillingKeyRequest::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.DeleteCustomerBillingKeyRequest.customer_uid)
}
inline void DeleteCustomerBillingKeyRequest::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.DeleteCustomerBillingKeyRequest.customer_uid)
}
inline std::string* DeleteCustomerBillingKeyRequest::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteCustomerBillingKeyRequest::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe_customers.DeleteCustomerBillingKeyRequest.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteCustomerBillingKeyRequest::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.DeleteCustomerBillingKeyRequest.customer_uid)
}

// string reason = 2;
inline void DeleteCustomerBillingKeyRequest::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& DeleteCustomerBillingKeyRequest::reason() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.DeleteCustomerBillingKeyRequest.reason)
  return _internal_reason();
}
inline void DeleteCustomerBillingKeyRequest::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.DeleteCustomerBillingKeyRequest.reason)
}
inline std::string* DeleteCustomerBillingKeyRequest::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.DeleteCustomerBillingKeyRequest.reason)
  return _internal_mutable_reason();
}
inline const std::string& DeleteCustomerBillingKeyRequest::_internal_reason() const {
  return reason_.Get();
}
inline void DeleteCustomerBillingKeyRequest::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteCustomerBillingKeyRequest::set_reason(std::string&& value) {
  
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.DeleteCustomerBillingKeyRequest.reason)
}
inline void DeleteCustomerBillingKeyRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.DeleteCustomerBillingKeyRequest.reason)
}
inline void DeleteCustomerBillingKeyRequest::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.DeleteCustomerBillingKeyRequest.reason)
}
inline std::string* DeleteCustomerBillingKeyRequest::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteCustomerBillingKeyRequest::release_reason() {
  // @@protoc_insertion_point(field_release:subscribe_customers.DeleteCustomerBillingKeyRequest.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteCustomerBillingKeyRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.DeleteCustomerBillingKeyRequest.reason)
}

// string requester = 3;
inline void DeleteCustomerBillingKeyRequest::clear_requester() {
  requester_.ClearToEmpty();
}
inline const std::string& DeleteCustomerBillingKeyRequest::requester() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.DeleteCustomerBillingKeyRequest.requester)
  return _internal_requester();
}
inline void DeleteCustomerBillingKeyRequest::set_requester(const std::string& value) {
  _internal_set_requester(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.DeleteCustomerBillingKeyRequest.requester)
}
inline std::string* DeleteCustomerBillingKeyRequest::mutable_requester() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.DeleteCustomerBillingKeyRequest.requester)
  return _internal_mutable_requester();
}
inline const std::string& DeleteCustomerBillingKeyRequest::_internal_requester() const {
  return requester_.Get();
}
inline void DeleteCustomerBillingKeyRequest::_internal_set_requester(const std::string& value) {
  
  requester_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteCustomerBillingKeyRequest::set_requester(std::string&& value) {
  
  requester_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.DeleteCustomerBillingKeyRequest.requester)
}
inline void DeleteCustomerBillingKeyRequest::set_requester(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requester_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.DeleteCustomerBillingKeyRequest.requester)
}
inline void DeleteCustomerBillingKeyRequest::set_requester(const char* value,
    size_t size) {
  
  requester_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.DeleteCustomerBillingKeyRequest.requester)
}
inline std::string* DeleteCustomerBillingKeyRequest::_internal_mutable_requester() {
  
  return requester_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteCustomerBillingKeyRequest::release_requester() {
  // @@protoc_insertion_point(field_release:subscribe_customers.DeleteCustomerBillingKeyRequest.requester)
  return requester_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteCustomerBillingKeyRequest::set_allocated_requester(std::string* requester) {
  if (requester != nullptr) {
    
  } else {
    
  }
  requester_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requester,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.DeleteCustomerBillingKeyRequest.requester)
}

// -------------------------------------------------------------------

// DeleteCustomerBillingKeyResponse

// int32 code = 1;
inline void DeleteCustomerBillingKeyResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteCustomerBillingKeyResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteCustomerBillingKeyResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.DeleteCustomerBillingKeyResponse.code)
  return _internal_code();
}
inline void DeleteCustomerBillingKeyResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void DeleteCustomerBillingKeyResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.DeleteCustomerBillingKeyResponse.code)
}

// string message = 2;
inline void DeleteCustomerBillingKeyResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DeleteCustomerBillingKeyResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.DeleteCustomerBillingKeyResponse.message)
  return _internal_message();
}
inline void DeleteCustomerBillingKeyResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.DeleteCustomerBillingKeyResponse.message)
}
inline std::string* DeleteCustomerBillingKeyResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.DeleteCustomerBillingKeyResponse.message)
  return _internal_mutable_message();
}
inline const std::string& DeleteCustomerBillingKeyResponse::_internal_message() const {
  return message_.Get();
}
inline void DeleteCustomerBillingKeyResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteCustomerBillingKeyResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.DeleteCustomerBillingKeyResponse.message)
}
inline void DeleteCustomerBillingKeyResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.DeleteCustomerBillingKeyResponse.message)
}
inline void DeleteCustomerBillingKeyResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.DeleteCustomerBillingKeyResponse.message)
}
inline std::string* DeleteCustomerBillingKeyResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteCustomerBillingKeyResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe_customers.DeleteCustomerBillingKeyResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteCustomerBillingKeyResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.DeleteCustomerBillingKeyResponse.message)
}

// .subscribe_customers.CustomerBillingKey response = 3;
inline bool DeleteCustomerBillingKeyResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool DeleteCustomerBillingKeyResponse::has_response() const {
  return _internal_has_response();
}
inline void DeleteCustomerBillingKeyResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::subscribe_customers::CustomerBillingKey& DeleteCustomerBillingKeyResponse::_internal_response() const {
  const ::subscribe_customers::CustomerBillingKey* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscribe_customers::CustomerBillingKey&>(
      ::subscribe_customers::_CustomerBillingKey_default_instance_);
}
inline const ::subscribe_customers::CustomerBillingKey& DeleteCustomerBillingKeyResponse::response() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.DeleteCustomerBillingKeyResponse.response)
  return _internal_response();
}
inline void DeleteCustomerBillingKeyResponse::unsafe_arena_set_allocated_response(
    ::subscribe_customers::CustomerBillingKey* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscribe_customers.DeleteCustomerBillingKeyResponse.response)
}
inline ::subscribe_customers::CustomerBillingKey* DeleteCustomerBillingKeyResponse::release_response() {
  
  ::subscribe_customers::CustomerBillingKey* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::subscribe_customers::CustomerBillingKey* DeleteCustomerBillingKeyResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:subscribe_customers.DeleteCustomerBillingKeyResponse.response)
  
  ::subscribe_customers::CustomerBillingKey* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::subscribe_customers::CustomerBillingKey* DeleteCustomerBillingKeyResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscribe_customers::CustomerBillingKey>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::subscribe_customers::CustomerBillingKey* DeleteCustomerBillingKeyResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.DeleteCustomerBillingKeyResponse.response)
  return _internal_mutable_response();
}
inline void DeleteCustomerBillingKeyResponse::set_allocated_response(::subscribe_customers::CustomerBillingKey* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.DeleteCustomerBillingKeyResponse.response)
}

// -------------------------------------------------------------------

// GetCustomerBillingKeyRequest

// string customer_uid = 1;
inline void GetCustomerBillingKeyRequest::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& GetCustomerBillingKeyRequest::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetCustomerBillingKeyRequest.customer_uid)
  return _internal_customer_uid();
}
inline void GetCustomerBillingKeyRequest::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.GetCustomerBillingKeyRequest.customer_uid)
}
inline std::string* GetCustomerBillingKeyRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.GetCustomerBillingKeyRequest.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& GetCustomerBillingKeyRequest::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void GetCustomerBillingKeyRequest::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetCustomerBillingKeyRequest::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.GetCustomerBillingKeyRequest.customer_uid)
}
inline void GetCustomerBillingKeyRequest::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.GetCustomerBillingKeyRequest.customer_uid)
}
inline void GetCustomerBillingKeyRequest::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.GetCustomerBillingKeyRequest.customer_uid)
}
inline std::string* GetCustomerBillingKeyRequest::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetCustomerBillingKeyRequest::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe_customers.GetCustomerBillingKeyRequest.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCustomerBillingKeyRequest::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.GetCustomerBillingKeyRequest.customer_uid)
}

// -------------------------------------------------------------------

// GetCustomerBillingKeyResponse

// int32 code = 1;
inline void GetCustomerBillingKeyResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCustomerBillingKeyResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCustomerBillingKeyResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetCustomerBillingKeyResponse.code)
  return _internal_code();
}
inline void GetCustomerBillingKeyResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetCustomerBillingKeyResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.GetCustomerBillingKeyResponse.code)
}

// string message = 2;
inline void GetCustomerBillingKeyResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GetCustomerBillingKeyResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetCustomerBillingKeyResponse.message)
  return _internal_message();
}
inline void GetCustomerBillingKeyResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.GetCustomerBillingKeyResponse.message)
}
inline std::string* GetCustomerBillingKeyResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.GetCustomerBillingKeyResponse.message)
  return _internal_mutable_message();
}
inline const std::string& GetCustomerBillingKeyResponse::_internal_message() const {
  return message_.Get();
}
inline void GetCustomerBillingKeyResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetCustomerBillingKeyResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.GetCustomerBillingKeyResponse.message)
}
inline void GetCustomerBillingKeyResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.GetCustomerBillingKeyResponse.message)
}
inline void GetCustomerBillingKeyResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.GetCustomerBillingKeyResponse.message)
}
inline std::string* GetCustomerBillingKeyResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetCustomerBillingKeyResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe_customers.GetCustomerBillingKeyResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCustomerBillingKeyResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.GetCustomerBillingKeyResponse.message)
}

// .subscribe_customers.CustomerBillingKey response = 3;
inline bool GetCustomerBillingKeyResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool GetCustomerBillingKeyResponse::has_response() const {
  return _internal_has_response();
}
inline void GetCustomerBillingKeyResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::subscribe_customers::CustomerBillingKey& GetCustomerBillingKeyResponse::_internal_response() const {
  const ::subscribe_customers::CustomerBillingKey* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscribe_customers::CustomerBillingKey&>(
      ::subscribe_customers::_CustomerBillingKey_default_instance_);
}
inline const ::subscribe_customers::CustomerBillingKey& GetCustomerBillingKeyResponse::response() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetCustomerBillingKeyResponse.response)
  return _internal_response();
}
inline void GetCustomerBillingKeyResponse::unsafe_arena_set_allocated_response(
    ::subscribe_customers::CustomerBillingKey* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscribe_customers.GetCustomerBillingKeyResponse.response)
}
inline ::subscribe_customers::CustomerBillingKey* GetCustomerBillingKeyResponse::release_response() {
  
  ::subscribe_customers::CustomerBillingKey* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::subscribe_customers::CustomerBillingKey* GetCustomerBillingKeyResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:subscribe_customers.GetCustomerBillingKeyResponse.response)
  
  ::subscribe_customers::CustomerBillingKey* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::subscribe_customers::CustomerBillingKey* GetCustomerBillingKeyResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscribe_customers::CustomerBillingKey>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::subscribe_customers::CustomerBillingKey* GetCustomerBillingKeyResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.GetCustomerBillingKeyResponse.response)
  return _internal_mutable_response();
}
inline void GetCustomerBillingKeyResponse::set_allocated_response(::subscribe_customers::CustomerBillingKey* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.GetCustomerBillingKeyResponse.response)
}

// -------------------------------------------------------------------

// InsertCustomerBillingKeyRequest

// string customer_uid = 1;
inline void InsertCustomerBillingKeyRequest::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.customer_uid)
  return _internal_customer_uid();
}
inline void InsertCustomerBillingKeyRequest::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.customer_uid)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.customer_uid)
}
inline void InsertCustomerBillingKeyRequest::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.customer_uid)
}
inline void InsertCustomerBillingKeyRequest::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.customer_uid)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.customer_uid)
}

// string pg = 2;
inline void InsertCustomerBillingKeyRequest::clear_pg() {
  pg_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::pg() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.pg)
  return _internal_pg();
}
inline void InsertCustomerBillingKeyRequest::set_pg(const std::string& value) {
  _internal_set_pg(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.pg)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_pg() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.pg)
  return _internal_mutable_pg();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_pg() const {
  return pg_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_pg(const std::string& value) {
  
  pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_pg(std::string&& value) {
  
  pg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.pg)
}
inline void InsertCustomerBillingKeyRequest::set_pg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.pg)
}
inline void InsertCustomerBillingKeyRequest::set_pg(const char* value,
    size_t size) {
  
  pg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.pg)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_pg() {
  
  return pg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_pg() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.pg)
  return pg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_pg(std::string* pg) {
  if (pg != nullptr) {
    
  } else {
    
  }
  pg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.pg)
}

// string card_number = 3;
inline void InsertCustomerBillingKeyRequest::clear_card_number() {
  card_number_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::card_number() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.card_number)
  return _internal_card_number();
}
inline void InsertCustomerBillingKeyRequest::set_card_number(const std::string& value) {
  _internal_set_card_number(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.card_number)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_card_number() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.card_number)
  return _internal_mutable_card_number();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_card_number() const {
  return card_number_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_card_number(const std::string& value) {
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_card_number(std::string&& value) {
  
  card_number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.card_number)
}
inline void InsertCustomerBillingKeyRequest::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.card_number)
}
inline void InsertCustomerBillingKeyRequest::set_card_number(const char* value,
    size_t size) {
  
  card_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.card_number)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_card_number() {
  
  return card_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_card_number() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.card_number)
  return card_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_card_number(std::string* card_number) {
  if (card_number != nullptr) {
    
  } else {
    
  }
  card_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.card_number)
}

// string expiry = 4;
inline void InsertCustomerBillingKeyRequest::clear_expiry() {
  expiry_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::expiry() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.expiry)
  return _internal_expiry();
}
inline void InsertCustomerBillingKeyRequest::set_expiry(const std::string& value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.expiry)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_expiry() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.expiry)
  return _internal_mutable_expiry();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_expiry() const {
  return expiry_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_expiry(const std::string& value) {
  
  expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_expiry(std::string&& value) {
  
  expiry_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.expiry)
}
inline void InsertCustomerBillingKeyRequest::set_expiry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.expiry)
}
inline void InsertCustomerBillingKeyRequest::set_expiry(const char* value,
    size_t size) {
  
  expiry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.expiry)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_expiry() {
  
  return expiry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_expiry() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.expiry)
  return expiry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_expiry(std::string* expiry) {
  if (expiry != nullptr) {
    
  } else {
    
  }
  expiry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiry,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.expiry)
}

// string birth = 5;
inline void InsertCustomerBillingKeyRequest::clear_birth() {
  birth_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::birth() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.birth)
  return _internal_birth();
}
inline void InsertCustomerBillingKeyRequest::set_birth(const std::string& value) {
  _internal_set_birth(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.birth)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_birth() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.birth)
  return _internal_mutable_birth();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_birth() const {
  return birth_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_birth(const std::string& value) {
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_birth(std::string&& value) {
  
  birth_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.birth)
}
inline void InsertCustomerBillingKeyRequest::set_birth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.birth)
}
inline void InsertCustomerBillingKeyRequest::set_birth(const char* value,
    size_t size) {
  
  birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.birth)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_birth() {
  
  return birth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_birth() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.birth)
  return birth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_birth(std::string* birth) {
  if (birth != nullptr) {
    
  } else {
    
  }
  birth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.birth)
}

// string pwd_2digit = 6;
inline void InsertCustomerBillingKeyRequest::clear_pwd_2digit() {
  pwd_2digit_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::pwd_2digit() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.pwd_2digit)
  return _internal_pwd_2digit();
}
inline void InsertCustomerBillingKeyRequest::set_pwd_2digit(const std::string& value) {
  _internal_set_pwd_2digit(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.pwd_2digit)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_pwd_2digit() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.pwd_2digit)
  return _internal_mutable_pwd_2digit();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_pwd_2digit() const {
  return pwd_2digit_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_pwd_2digit(const std::string& value) {
  
  pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_pwd_2digit(std::string&& value) {
  
  pwd_2digit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.pwd_2digit)
}
inline void InsertCustomerBillingKeyRequest::set_pwd_2digit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.pwd_2digit)
}
inline void InsertCustomerBillingKeyRequest::set_pwd_2digit(const char* value,
    size_t size) {
  
  pwd_2digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.pwd_2digit)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_pwd_2digit() {
  
  return pwd_2digit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_pwd_2digit() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.pwd_2digit)
  return pwd_2digit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_pwd_2digit(std::string* pwd_2digit) {
  if (pwd_2digit != nullptr) {
    
  } else {
    
  }
  pwd_2digit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd_2digit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.pwd_2digit)
}

// string customer_name = 7;
inline void InsertCustomerBillingKeyRequest::clear_customer_name() {
  customer_name_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::customer_name() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.customer_name)
  return _internal_customer_name();
}
inline void InsertCustomerBillingKeyRequest::set_customer_name(const std::string& value) {
  _internal_set_customer_name(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.customer_name)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_customer_name() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.customer_name)
  return _internal_mutable_customer_name();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_customer_name() const {
  return customer_name_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_customer_name(const std::string& value) {
  
  customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_customer_name(std::string&& value) {
  
  customer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.customer_name)
}
inline void InsertCustomerBillingKeyRequest::set_customer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.customer_name)
}
inline void InsertCustomerBillingKeyRequest::set_customer_name(const char* value,
    size_t size) {
  
  customer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.customer_name)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_customer_name() {
  
  return customer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_customer_name() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.customer_name)
  return customer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_customer_name(std::string* customer_name) {
  if (customer_name != nullptr) {
    
  } else {
    
  }
  customer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.customer_name)
}

// string customer_tel = 8;
inline void InsertCustomerBillingKeyRequest::clear_customer_tel() {
  customer_tel_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::customer_tel() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.customer_tel)
  return _internal_customer_tel();
}
inline void InsertCustomerBillingKeyRequest::set_customer_tel(const std::string& value) {
  _internal_set_customer_tel(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.customer_tel)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_customer_tel() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.customer_tel)
  return _internal_mutable_customer_tel();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_customer_tel() const {
  return customer_tel_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_customer_tel(const std::string& value) {
  
  customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_customer_tel(std::string&& value) {
  
  customer_tel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.customer_tel)
}
inline void InsertCustomerBillingKeyRequest::set_customer_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.customer_tel)
}
inline void InsertCustomerBillingKeyRequest::set_customer_tel(const char* value,
    size_t size) {
  
  customer_tel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.customer_tel)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_customer_tel() {
  
  return customer_tel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_customer_tel() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.customer_tel)
  return customer_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_customer_tel(std::string* customer_tel) {
  if (customer_tel != nullptr) {
    
  } else {
    
  }
  customer_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.customer_tel)
}

// string customer_email = 9;
inline void InsertCustomerBillingKeyRequest::clear_customer_email() {
  customer_email_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::customer_email() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.customer_email)
  return _internal_customer_email();
}
inline void InsertCustomerBillingKeyRequest::set_customer_email(const std::string& value) {
  _internal_set_customer_email(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.customer_email)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_customer_email() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.customer_email)
  return _internal_mutable_customer_email();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_customer_email() const {
  return customer_email_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_customer_email(const std::string& value) {
  
  customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_customer_email(std::string&& value) {
  
  customer_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.customer_email)
}
inline void InsertCustomerBillingKeyRequest::set_customer_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.customer_email)
}
inline void InsertCustomerBillingKeyRequest::set_customer_email(const char* value,
    size_t size) {
  
  customer_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.customer_email)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_customer_email() {
  
  return customer_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_customer_email() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.customer_email)
  return customer_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_customer_email(std::string* customer_email) {
  if (customer_email != nullptr) {
    
  } else {
    
  }
  customer_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.customer_email)
}

// string customer_addr = 10;
inline void InsertCustomerBillingKeyRequest::clear_customer_addr() {
  customer_addr_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::customer_addr() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.customer_addr)
  return _internal_customer_addr();
}
inline void InsertCustomerBillingKeyRequest::set_customer_addr(const std::string& value) {
  _internal_set_customer_addr(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.customer_addr)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_customer_addr() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.customer_addr)
  return _internal_mutable_customer_addr();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_customer_addr() const {
  return customer_addr_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_customer_addr(const std::string& value) {
  
  customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_customer_addr(std::string&& value) {
  
  customer_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.customer_addr)
}
inline void InsertCustomerBillingKeyRequest::set_customer_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.customer_addr)
}
inline void InsertCustomerBillingKeyRequest::set_customer_addr(const char* value,
    size_t size) {
  
  customer_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.customer_addr)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_customer_addr() {
  
  return customer_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_customer_addr() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.customer_addr)
  return customer_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_customer_addr(std::string* customer_addr) {
  if (customer_addr != nullptr) {
    
  } else {
    
  }
  customer_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.customer_addr)
}

// string customer_postcode = 11;
inline void InsertCustomerBillingKeyRequest::clear_customer_postcode() {
  customer_postcode_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyRequest::customer_postcode() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyRequest.customer_postcode)
  return _internal_customer_postcode();
}
inline void InsertCustomerBillingKeyRequest::set_customer_postcode(const std::string& value) {
  _internal_set_customer_postcode(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyRequest.customer_postcode)
}
inline std::string* InsertCustomerBillingKeyRequest::mutable_customer_postcode() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyRequest.customer_postcode)
  return _internal_mutable_customer_postcode();
}
inline const std::string& InsertCustomerBillingKeyRequest::_internal_customer_postcode() const {
  return customer_postcode_.Get();
}
inline void InsertCustomerBillingKeyRequest::_internal_set_customer_postcode(const std::string& value) {
  
  customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_customer_postcode(std::string&& value) {
  
  customer_postcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyRequest.customer_postcode)
}
inline void InsertCustomerBillingKeyRequest::set_customer_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyRequest.customer_postcode)
}
inline void InsertCustomerBillingKeyRequest::set_customer_postcode(const char* value,
    size_t size) {
  
  customer_postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyRequest.customer_postcode)
}
inline std::string* InsertCustomerBillingKeyRequest::_internal_mutable_customer_postcode() {
  
  return customer_postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyRequest::release_customer_postcode() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyRequest.customer_postcode)
  return customer_postcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyRequest::set_allocated_customer_postcode(std::string* customer_postcode) {
  if (customer_postcode != nullptr) {
    
  } else {
    
  }
  customer_postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyRequest.customer_postcode)
}

// -------------------------------------------------------------------

// InsertCustomerBillingKeyResponse

// int32 code = 1;
inline void InsertCustomerBillingKeyResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertCustomerBillingKeyResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertCustomerBillingKeyResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyResponse.code)
  return _internal_code();
}
inline void InsertCustomerBillingKeyResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void InsertCustomerBillingKeyResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyResponse.code)
}

// string message = 2;
inline void InsertCustomerBillingKeyResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& InsertCustomerBillingKeyResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyResponse.message)
  return _internal_message();
}
inline void InsertCustomerBillingKeyResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.InsertCustomerBillingKeyResponse.message)
}
inline std::string* InsertCustomerBillingKeyResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyResponse.message)
  return _internal_mutable_message();
}
inline const std::string& InsertCustomerBillingKeyResponse::_internal_message() const {
  return message_.Get();
}
inline void InsertCustomerBillingKeyResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InsertCustomerBillingKeyResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.InsertCustomerBillingKeyResponse.message)
}
inline void InsertCustomerBillingKeyResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.InsertCustomerBillingKeyResponse.message)
}
inline void InsertCustomerBillingKeyResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.InsertCustomerBillingKeyResponse.message)
}
inline std::string* InsertCustomerBillingKeyResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InsertCustomerBillingKeyResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsertCustomerBillingKeyResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyResponse.message)
}

// .subscribe_customers.CustomerBillingKey response = 3;
inline bool InsertCustomerBillingKeyResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool InsertCustomerBillingKeyResponse::has_response() const {
  return _internal_has_response();
}
inline void InsertCustomerBillingKeyResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::subscribe_customers::CustomerBillingKey& InsertCustomerBillingKeyResponse::_internal_response() const {
  const ::subscribe_customers::CustomerBillingKey* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscribe_customers::CustomerBillingKey&>(
      ::subscribe_customers::_CustomerBillingKey_default_instance_);
}
inline const ::subscribe_customers::CustomerBillingKey& InsertCustomerBillingKeyResponse::response() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.InsertCustomerBillingKeyResponse.response)
  return _internal_response();
}
inline void InsertCustomerBillingKeyResponse::unsafe_arena_set_allocated_response(
    ::subscribe_customers::CustomerBillingKey* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscribe_customers.InsertCustomerBillingKeyResponse.response)
}
inline ::subscribe_customers::CustomerBillingKey* InsertCustomerBillingKeyResponse::release_response() {
  
  ::subscribe_customers::CustomerBillingKey* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::subscribe_customers::CustomerBillingKey* InsertCustomerBillingKeyResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:subscribe_customers.InsertCustomerBillingKeyResponse.response)
  
  ::subscribe_customers::CustomerBillingKey* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::subscribe_customers::CustomerBillingKey* InsertCustomerBillingKeyResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscribe_customers::CustomerBillingKey>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::subscribe_customers::CustomerBillingKey* InsertCustomerBillingKeyResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.InsertCustomerBillingKeyResponse.response)
  return _internal_mutable_response();
}
inline void InsertCustomerBillingKeyResponse::set_allocated_response(::subscribe_customers::CustomerBillingKey* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.InsertCustomerBillingKeyResponse.response)
}

// -------------------------------------------------------------------

// GetPaidByBillingKeyListRequest

// string customer_uid = 1;
inline void GetPaidByBillingKeyListRequest::clear_customer_uid() {
  customer_uid_.ClearToEmpty();
}
inline const std::string& GetPaidByBillingKeyListRequest::customer_uid() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetPaidByBillingKeyListRequest.customer_uid)
  return _internal_customer_uid();
}
inline void GetPaidByBillingKeyListRequest::set_customer_uid(const std::string& value) {
  _internal_set_customer_uid(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.GetPaidByBillingKeyListRequest.customer_uid)
}
inline std::string* GetPaidByBillingKeyListRequest::mutable_customer_uid() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.GetPaidByBillingKeyListRequest.customer_uid)
  return _internal_mutable_customer_uid();
}
inline const std::string& GetPaidByBillingKeyListRequest::_internal_customer_uid() const {
  return customer_uid_.Get();
}
inline void GetPaidByBillingKeyListRequest::_internal_set_customer_uid(const std::string& value) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPaidByBillingKeyListRequest::set_customer_uid(std::string&& value) {
  
  customer_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.GetPaidByBillingKeyListRequest.customer_uid)
}
inline void GetPaidByBillingKeyListRequest::set_customer_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.GetPaidByBillingKeyListRequest.customer_uid)
}
inline void GetPaidByBillingKeyListRequest::set_customer_uid(const char* value,
    size_t size) {
  
  customer_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.GetPaidByBillingKeyListRequest.customer_uid)
}
inline std::string* GetPaidByBillingKeyListRequest::_internal_mutable_customer_uid() {
  
  return customer_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPaidByBillingKeyListRequest::release_customer_uid() {
  // @@protoc_insertion_point(field_release:subscribe_customers.GetPaidByBillingKeyListRequest.customer_uid)
  return customer_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPaidByBillingKeyListRequest::set_allocated_customer_uid(std::string* customer_uid) {
  if (customer_uid != nullptr) {
    
  } else {
    
  }
  customer_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.GetPaidByBillingKeyListRequest.customer_uid)
}

// int32 page = 2;
inline void GetPaidByBillingKeyListRequest::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaidByBillingKeyListRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaidByBillingKeyListRequest::page() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetPaidByBillingKeyListRequest.page)
  return _internal_page();
}
inline void GetPaidByBillingKeyListRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void GetPaidByBillingKeyListRequest::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.GetPaidByBillingKeyListRequest.page)
}

// -------------------------------------------------------------------

// NestedGetPaidByBillingKeyListData

// int32 total = 1;
inline void NestedGetPaidByBillingKeyListData::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaidByBillingKeyListData::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaidByBillingKeyListData::total() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.NestedGetPaidByBillingKeyListData.total)
  return _internal_total();
}
inline void NestedGetPaidByBillingKeyListData::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void NestedGetPaidByBillingKeyListData::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.NestedGetPaidByBillingKeyListData.total)
}

// int32 previous = 2;
inline void NestedGetPaidByBillingKeyListData::clear_previous() {
  previous_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaidByBillingKeyListData::_internal_previous() const {
  return previous_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaidByBillingKeyListData::previous() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.NestedGetPaidByBillingKeyListData.previous)
  return _internal_previous();
}
inline void NestedGetPaidByBillingKeyListData::_internal_set_previous(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  previous_ = value;
}
inline void NestedGetPaidByBillingKeyListData::set_previous(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_previous(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.NestedGetPaidByBillingKeyListData.previous)
}

// int32 next = 3;
inline void NestedGetPaidByBillingKeyListData::clear_next() {
  next_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaidByBillingKeyListData::_internal_next() const {
  return next_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NestedGetPaidByBillingKeyListData::next() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.NestedGetPaidByBillingKeyListData.next)
  return _internal_next();
}
inline void NestedGetPaidByBillingKeyListData::_internal_set_next(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_ = value;
}
inline void NestedGetPaidByBillingKeyListData::set_next(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.NestedGetPaidByBillingKeyListData.next)
}

// repeated .payment.Payment list = 4;
inline int NestedGetPaidByBillingKeyListData::_internal_list_size() const {
  return list_.size();
}
inline int NestedGetPaidByBillingKeyListData::list_size() const {
  return _internal_list_size();
}
inline ::payment::Payment* NestedGetPaidByBillingKeyListData::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.NestedGetPaidByBillingKeyListData.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >*
NestedGetPaidByBillingKeyListData::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:subscribe_customers.NestedGetPaidByBillingKeyListData.list)
  return &list_;
}
inline const ::payment::Payment& NestedGetPaidByBillingKeyListData::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::payment::Payment& NestedGetPaidByBillingKeyListData::list(int index) const {
  // @@protoc_insertion_point(field_get:subscribe_customers.NestedGetPaidByBillingKeyListData.list)
  return _internal_list(index);
}
inline ::payment::Payment* NestedGetPaidByBillingKeyListData::_internal_add_list() {
  return list_.Add();
}
inline ::payment::Payment* NestedGetPaidByBillingKeyListData::add_list() {
  // @@protoc_insertion_point(field_add:subscribe_customers.NestedGetPaidByBillingKeyListData.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::payment::Payment >&
NestedGetPaidByBillingKeyListData::list() const {
  // @@protoc_insertion_point(field_list:subscribe_customers.NestedGetPaidByBillingKeyListData.list)
  return list_;
}

// -------------------------------------------------------------------

// GetPaidByBillingKeyListResponse

// int32 code = 1;
inline void GetPaidByBillingKeyListResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaidByBillingKeyListResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPaidByBillingKeyListResponse::code() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetPaidByBillingKeyListResponse.code)
  return _internal_code();
}
inline void GetPaidByBillingKeyListResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetPaidByBillingKeyListResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.GetPaidByBillingKeyListResponse.code)
}

// string message = 2;
inline void GetPaidByBillingKeyListResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GetPaidByBillingKeyListResponse::message() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetPaidByBillingKeyListResponse.message)
  return _internal_message();
}
inline void GetPaidByBillingKeyListResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:subscribe_customers.GetPaidByBillingKeyListResponse.message)
}
inline std::string* GetPaidByBillingKeyListResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.GetPaidByBillingKeyListResponse.message)
  return _internal_mutable_message();
}
inline const std::string& GetPaidByBillingKeyListResponse::_internal_message() const {
  return message_.Get();
}
inline void GetPaidByBillingKeyListResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPaidByBillingKeyListResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:subscribe_customers.GetPaidByBillingKeyListResponse.message)
}
inline void GetPaidByBillingKeyListResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:subscribe_customers.GetPaidByBillingKeyListResponse.message)
}
inline void GetPaidByBillingKeyListResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:subscribe_customers.GetPaidByBillingKeyListResponse.message)
}
inline std::string* GetPaidByBillingKeyListResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPaidByBillingKeyListResponse::release_message() {
  // @@protoc_insertion_point(field_release:subscribe_customers.GetPaidByBillingKeyListResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPaidByBillingKeyListResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.GetPaidByBillingKeyListResponse.message)
}

// .subscribe_customers.NestedGetPaidByBillingKeyListData response = 3;
inline bool GetPaidByBillingKeyListResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool GetPaidByBillingKeyListResponse::has_response() const {
  return _internal_has_response();
}
inline void GetPaidByBillingKeyListResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::subscribe_customers::NestedGetPaidByBillingKeyListData& GetPaidByBillingKeyListResponse::_internal_response() const {
  const ::subscribe_customers::NestedGetPaidByBillingKeyListData* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscribe_customers::NestedGetPaidByBillingKeyListData&>(
      ::subscribe_customers::_NestedGetPaidByBillingKeyListData_default_instance_);
}
inline const ::subscribe_customers::NestedGetPaidByBillingKeyListData& GetPaidByBillingKeyListResponse::response() const {
  // @@protoc_insertion_point(field_get:subscribe_customers.GetPaidByBillingKeyListResponse.response)
  return _internal_response();
}
inline void GetPaidByBillingKeyListResponse::unsafe_arena_set_allocated_response(
    ::subscribe_customers::NestedGetPaidByBillingKeyListData* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscribe_customers.GetPaidByBillingKeyListResponse.response)
}
inline ::subscribe_customers::NestedGetPaidByBillingKeyListData* GetPaidByBillingKeyListResponse::release_response() {
  
  ::subscribe_customers::NestedGetPaidByBillingKeyListData* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::subscribe_customers::NestedGetPaidByBillingKeyListData* GetPaidByBillingKeyListResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:subscribe_customers.GetPaidByBillingKeyListResponse.response)
  
  ::subscribe_customers::NestedGetPaidByBillingKeyListData* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::subscribe_customers::NestedGetPaidByBillingKeyListData* GetPaidByBillingKeyListResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscribe_customers::NestedGetPaidByBillingKeyListData>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::subscribe_customers::NestedGetPaidByBillingKeyListData* GetPaidByBillingKeyListResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:subscribe_customers.GetPaidByBillingKeyListResponse.response)
  return _internal_mutable_response();
}
inline void GetPaidByBillingKeyListResponse::set_allocated_response(::subscribe_customers::NestedGetPaidByBillingKeyListData* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:subscribe_customers.GetPaidByBillingKeyListResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace subscribe_customers

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_v1_2fsubscribe_5fcustomers_2fsubscribe_5fcustomers_2eproto
