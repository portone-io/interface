// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package card

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentCardServiceClient is the client API for PaymentCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentCardServiceClient interface {
	CardRegisterV2RPC(ctx context.Context, in *CardRegisterRequest, opts ...grpc.CallOption) (*CardRegisterResponse, error)
	GetCardInfoV2RPC(ctx context.Context, in *GetCardInfoRequest, opts ...grpc.CallOption) (*GetCardInfoResponse, error)
	DeleteCardInfoV2RPC(ctx context.Context, in *DeleteCardInfoRequest, opts ...grpc.CallOption) (*DeleteCardInfoResponse, error)
	PayByRegiseteredCardV2RPC(ctx context.Context, in *PayByRegisteredCardRequest, opts ...grpc.CallOption) (*PayByRegisteredCardResponse, error)
	CancelRegiseteredCardV2RPC(ctx context.Context, in *CancelCardPaymentRequest, opts ...grpc.CallOption) (*CancelCardPaymenttResponse, error)
}

type paymentCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentCardServiceClient(cc grpc.ClientConnInterface) PaymentCardServiceClient {
	return &paymentCardServiceClient{cc}
}

func (c *paymentCardServiceClient) CardRegisterV2RPC(ctx context.Context, in *CardRegisterRequest, opts ...grpc.CallOption) (*CardRegisterResponse, error) {
	out := new(CardRegisterResponse)
	err := c.cc.Invoke(ctx, "/card_v2.PaymentCardService/CardRegisterV2RPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentCardServiceClient) GetCardInfoV2RPC(ctx context.Context, in *GetCardInfoRequest, opts ...grpc.CallOption) (*GetCardInfoResponse, error) {
	out := new(GetCardInfoResponse)
	err := c.cc.Invoke(ctx, "/card_v2.PaymentCardService/GetCardInfoV2RPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentCardServiceClient) DeleteCardInfoV2RPC(ctx context.Context, in *DeleteCardInfoRequest, opts ...grpc.CallOption) (*DeleteCardInfoResponse, error) {
	out := new(DeleteCardInfoResponse)
	err := c.cc.Invoke(ctx, "/card_v2.PaymentCardService/DeleteCardInfoV2RPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentCardServiceClient) PayByRegiseteredCardV2RPC(ctx context.Context, in *PayByRegisteredCardRequest, opts ...grpc.CallOption) (*PayByRegisteredCardResponse, error) {
	out := new(PayByRegisteredCardResponse)
	err := c.cc.Invoke(ctx, "/card_v2.PaymentCardService/PayByRegiseteredCardV2RPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentCardServiceClient) CancelRegiseteredCardV2RPC(ctx context.Context, in *CancelCardPaymentRequest, opts ...grpc.CallOption) (*CancelCardPaymenttResponse, error) {
	out := new(CancelCardPaymenttResponse)
	err := c.cc.Invoke(ctx, "/card_v2.PaymentCardService/CancelRegiseteredCardV2RPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentCardServiceServer is the server API for PaymentCardService service.
// All implementations must embed UnimplementedPaymentCardServiceServer
// for forward compatibility
type PaymentCardServiceServer interface {
	CardRegisterV2RPC(context.Context, *CardRegisterRequest) (*CardRegisterResponse, error)
	GetCardInfoV2RPC(context.Context, *GetCardInfoRequest) (*GetCardInfoResponse, error)
	DeleteCardInfoV2RPC(context.Context, *DeleteCardInfoRequest) (*DeleteCardInfoResponse, error)
	PayByRegiseteredCardV2RPC(context.Context, *PayByRegisteredCardRequest) (*PayByRegisteredCardResponse, error)
	CancelRegiseteredCardV2RPC(context.Context, *CancelCardPaymentRequest) (*CancelCardPaymenttResponse, error)
	mustEmbedUnimplementedPaymentCardServiceServer()
}

// UnimplementedPaymentCardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentCardServiceServer struct {
}

func (UnimplementedPaymentCardServiceServer) CardRegisterV2RPC(context.Context, *CardRegisterRequest) (*CardRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardRegisterV2RPC not implemented")
}
func (UnimplementedPaymentCardServiceServer) GetCardInfoV2RPC(context.Context, *GetCardInfoRequest) (*GetCardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardInfoV2RPC not implemented")
}
func (UnimplementedPaymentCardServiceServer) DeleteCardInfoV2RPC(context.Context, *DeleteCardInfoRequest) (*DeleteCardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardInfoV2RPC not implemented")
}
func (UnimplementedPaymentCardServiceServer) PayByRegiseteredCardV2RPC(context.Context, *PayByRegisteredCardRequest) (*PayByRegisteredCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayByRegiseteredCardV2RPC not implemented")
}
func (UnimplementedPaymentCardServiceServer) CancelRegiseteredCardV2RPC(context.Context, *CancelCardPaymentRequest) (*CancelCardPaymenttResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRegiseteredCardV2RPC not implemented")
}
func (UnimplementedPaymentCardServiceServer) mustEmbedUnimplementedPaymentCardServiceServer() {}

// UnsafePaymentCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentCardServiceServer will
// result in compilation errors.
type UnsafePaymentCardServiceServer interface {
	mustEmbedUnimplementedPaymentCardServiceServer()
}

func RegisterPaymentCardServiceServer(s grpc.ServiceRegistrar, srv PaymentCardServiceServer) {
	s.RegisterService(&PaymentCardService_ServiceDesc, srv)
}

func _PaymentCardService_CardRegisterV2RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentCardServiceServer).CardRegisterV2RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_v2.PaymentCardService/CardRegisterV2RPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentCardServiceServer).CardRegisterV2RPC(ctx, req.(*CardRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentCardService_GetCardInfoV2RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentCardServiceServer).GetCardInfoV2RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_v2.PaymentCardService/GetCardInfoV2RPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentCardServiceServer).GetCardInfoV2RPC(ctx, req.(*GetCardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentCardService_DeleteCardInfoV2RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentCardServiceServer).DeleteCardInfoV2RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_v2.PaymentCardService/DeleteCardInfoV2RPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentCardServiceServer).DeleteCardInfoV2RPC(ctx, req.(*DeleteCardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentCardService_PayByRegiseteredCardV2RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayByRegisteredCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentCardServiceServer).PayByRegiseteredCardV2RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_v2.PaymentCardService/PayByRegiseteredCardV2RPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentCardServiceServer).PayByRegiseteredCardV2RPC(ctx, req.(*PayByRegisteredCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentCardService_CancelRegiseteredCardV2RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCardPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentCardServiceServer).CancelRegiseteredCardV2RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_v2.PaymentCardService/CancelRegiseteredCardV2RPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentCardServiceServer).CancelRegiseteredCardV2RPC(ctx, req.(*CancelCardPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentCardService_ServiceDesc is the grpc.ServiceDesc for PaymentCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_v2.PaymentCardService",
	HandlerType: (*PaymentCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CardRegisterV2RPC",
			Handler:    _PaymentCardService_CardRegisterV2RPC_Handler,
		},
		{
			MethodName: "GetCardInfoV2RPC",
			Handler:    _PaymentCardService_GetCardInfoV2RPC_Handler,
		},
		{
			MethodName: "DeleteCardInfoV2RPC",
			Handler:    _PaymentCardService_DeleteCardInfoV2RPC_Handler,
		},
		{
			MethodName: "PayByRegiseteredCardV2RPC",
			Handler:    _PaymentCardService_PayByRegiseteredCardV2RPC_Handler,
		},
		{
			MethodName: "CancelRegiseteredCardV2RPC",
			Handler:    _PaymentCardService_CancelRegiseteredCardV2RPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/payments/card/card.proto",
}
