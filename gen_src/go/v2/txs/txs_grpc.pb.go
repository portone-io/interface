// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package txs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TxsServiceClient is the client API for TxsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxsServiceClient interface {
	GetTxsRecordService(ctx context.Context, in *GetTxsRecordsRequest, opts ...grpc.CallOption) (*GetTxsRecordsReponse, error)
}

type txsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTxsServiceClient(cc grpc.ClientConnInterface) TxsServiceClient {
	return &txsServiceClient{cc}
}

func (c *txsServiceClient) GetTxsRecordService(ctx context.Context, in *GetTxsRecordsRequest, opts ...grpc.CallOption) (*GetTxsRecordsReponse, error) {
	out := new(GetTxsRecordsReponse)
	err := c.cc.Invoke(ctx, "/txs_v2.TxsService/GetTxsRecordService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxsServiceServer is the server API for TxsService service.
// All implementations must embed UnimplementedTxsServiceServer
// for forward compatibility
type TxsServiceServer interface {
	GetTxsRecordService(context.Context, *GetTxsRecordsRequest) (*GetTxsRecordsReponse, error)
	mustEmbedUnimplementedTxsServiceServer()
}

// UnimplementedTxsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTxsServiceServer struct {
}

func (UnimplementedTxsServiceServer) GetTxsRecordService(context.Context, *GetTxsRecordsRequest) (*GetTxsRecordsReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxsRecordService not implemented")
}
func (UnimplementedTxsServiceServer) mustEmbedUnimplementedTxsServiceServer() {}

// UnsafeTxsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxsServiceServer will
// result in compilation errors.
type UnsafeTxsServiceServer interface {
	mustEmbedUnimplementedTxsServiceServer()
}

func RegisterTxsServiceServer(s grpc.ServiceRegistrar, srv TxsServiceServer) {
	s.RegisterService(&TxsService_ServiceDesc, srv)
}

func _TxsService_GetTxsRecordService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxsRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxsServiceServer).GetTxsRecordService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txs_v2.TxsService/GetTxsRecordService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxsServiceServer).GetTxsRecordService(ctx, req.(*GetTxsRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TxsService_ServiceDesc is the grpc.ServiceDesc for TxsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TxsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "txs_v2.TxsService",
	HandlerType: (*TxsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTxsRecordService",
			Handler:    _TxsService_GetTxsRecordService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/txs/txs.proto",
}
